function init(){scene=new THREE.Scene,window.scene=scene,window.THREE=THREE,initRoad(),initTrees(),initShop(),initApartment(),initBench(),initBackHoe(),initTruck(),initWorkers(),initCamera(),initLights(),initRender()}function initCamera(){(camera=new THREE.PerspectiveCamera(60,(window.innerWidth-110)/(window.innerHeight-50),1,100)).position.set(0,23,20),camera.lookAt(0,0,0)}function initLights(){ambient=new THREE.HemisphereLight(14610162,6708333,1.2),(sun=new THREE.SpotLight(16571508,.2)).position.set(-50,40,-5),sun.castShadow=!0,sun.shadow.camera.left=-10,sun.shadow.camera.right=10,sun.shadow.camera.top=10,sun.shadow.camera.bottom=-10,sun.shadow.camera.near=.1,sun.shadow.camera.far=1e3,sun.shadow.mapSize.width=2048,sun.shadow.mapSize.height=2048,scene.add(ambient),scene.add(sun)}function initRender(){renderer=new THREE.WebGLRenderer({antialias:!0});const e=document.getElementById("container");renderer.setSize(window.innerWidth-110,window.innerHeight),renderer.setClearColor(16777215,1),renderer.setPixelRatio(window.devicePixelRatio),renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap,e.appendChild(renderer.domElement),controls=new THREE.OrbitControls(camera,renderer.domElement)}function initRoad(){const e=new THREE.Geometry,t=(new THREE.Geometry,[grass,road,divider,lines,gray,white,shadows]),r=new THREE.BoxGeometry(45,1,10);r.translate(0,0,-9);for(T=0;T<r.faces.length;T++)r.faces[T].materialIndex=0;e.mergeMesh(new THREE.Mesh(r));const s=new THREE.BoxGeometry(45,1,8);for(T=0;T<s.faces.length;T++)s.faces[T].materialIndex=1;e.mergeMesh(new THREE.Mesh(s));let n=new THREE.Geometry;n.vertices.push(new THREE.Vector3(-22.5,.51,-3.7),new THREE.Vector3(22.5,.51,-3.7));for(T=0;T<n.faces.length;T++)n.faces[T].materialIndex=3;e.mergeMesh(new THREE.Mesh(n)),(n=new THREE.Geometry).vertices.push(new THREE.Vector3(-22.5,.51,3.7),new THREE.Vector3(22.5,.51,3.7));for(T=0;T<n.faces.length;T++)n.faces[T].materialIndex=3;e.mergeMesh(new THREE.Mesh(n));const a=new THREE.BoxGeometry(45,1,7);a.translate(0,0,7.5);for(T=0;T<a.faces.length;T++)a.faces[T].materialIndex=0;e.mergeMesh(new THREE.Mesh(a));const o=new THREE.Geometry,c=new THREE.BoxGeometry(1,.1,.2);c.translate(-22,.5,0),o.merge(c);for(let e=22;e>=-22;e-=2)c.translate(2,0,0),o.merge(c);for(T=0;T<o.faces.length;T++)o.faces[T].materialIndex=2;e.mergeMesh(new THREE.Mesh(o));const m=new THREE.BoxGeometry(45,1,25),l=new THREE.Mesh(m,shadows);l.position.set(0,.05,-1.5),l.receiveShadow=!0,scene.add(l),objects.push(l);const E=new THREE.Geometry,i=new THREE.Geometry,g=coneGeometry.clone(!0),w=stripeGeometry.clone(!0);g.translate(0,.75,.5),E.merge(g),w.translate(0,.75,.5),i.merge(w);for(var y=1.5;y<=10;y+=1.5)g.translate(1.5,0,0),E.merge(g),w.translate(1.5,0,0),i.merge(w);for(T=0;T<E.faces.length;T++)E.faces[T].materialIndex=4;e.mergeMesh(new THREE.Mesh(E));for(var T=0;T<i.faces.length;T++)i.faces[T].materialIndex=5;e.mergeMesh(new THREE.Mesh(i));let v=new THREE.Mesh(e,t);v.castShadow=!0,scene.add(v)}function initTrees(){const e=new THREE.Geometry,t=new THREE.Geometry,r=new THREE.ConeGeometry(1.68,4,32);r.translate(0,1.35,0),t.merge(r);const s=new THREE.SphereGeometry(1.8,60,60);s.translate(0,-1.3,0),t.merge(s),t.translate(-18,3,-10.5),e.merge(t),t.translate(7,0,18.5),e.merge(t);const n=t.clone();n.scale(.5,.5,.5),n.translate(0,.2,-12),e.merge(n),n.translate(17.5,0,14),e.merge(n),n.translate(4.5,0,-16.5),e.merge(n);const a=new THREE.Mesh(e,treeTall);a.castShadow=!0,scene.add(a);const o=new THREE.Mesh(e,shadows);o.receiveShadow=!0,scene.add(o)}function initShop(){const e=new THREE.Group,t=new THREE.Geometry,r=new THREE.Geometry,s=new THREE.BoxGeometry(10,1,5);t.merge(s);const n=new THREE.BoxGeometry(2,.5,.5);n.translate(0,.25,2.75),t.merge(n);const a=new THREE.BoxGeometry(2,.5,1);a.translate(0,-.25,3),t.merge(a);const o=t.clone();r.merge(o);let c=new THREE.Mesh(t,foundation);c.castShadow=!0,e.add(c);const m=new THREE.BoxGeometry(9.75,4.9,.125);m.translate(0,3,2.4);const l=new THREE.Mesh(m,windowColor);e.add(l);const E=new THREE.Geometry,i=new THREE.BoxGeometry(4,1,.75);i.translate(-3,1,2.125),E.merge(i),i.translate(6,0,0),E.merge(i);const g=new THREE.BoxGeometry(10,2,.75);g.translate(0,5,2.12),E.merge(g);const w=new THREE.BoxGeometry(1,5.5,3.25);w.translate(-4.5,3.25,.126),E.merge(w),w.translate(9,0,0),E.merge(w);const y=new THREE.BoxGeometry(1,2.5,.5);y.translate(-1.5,2.75,2.25),E.merge(y),y.translate(3,0,0),E.merge(y);const T=new THREE.BoxGeometry(10,5.5,1);T.translate(0,3.25,-2),E.merge(T);const v=new THREE.BoxGeometry(8,1,3.25);v.translate(0,5.5,.125),E.merge(v);const R=E.clone();r.merge(R),(c=new THREE.Mesh(E,stone)).castShadow=!0,e.add(c);const H=new THREE.Geometry,d=new THREE.BoxGeometry(3,1.5,1);d.translate(0,1.25,0);const h=d.clone();H.merge(h);const x=new THREE.Mesh(d,stone);e.add(x);const G=new THREE.BoxGeometry(.5,.1,3);G.translate(3.75,2,0);const M=new THREE.BoxGeometry(.5,.1,3);M.translate(3.75,3,0),G.merge(M),M.translate(0,1,0),G.merge(M),M.translate(-7.5,0,0),G.merge(M),M.translate(0,-1,0),G.merge(M),M.translate(0,-1,0),G.merge(M);const f=G.clone();H.merge(f);const B=new THREE.Mesh(G,stone);e.add(B);const u=new THREE.BoxGeometry(.7,.75,.2);u.translate(3.75,3.45,0);const p=new THREE.BoxGeometry(.7,.75,.2);p.translate(3.75,3.45,1),u.merge(p),p.translate(0,1,-1.5),u.merge(p),p.translate(0,-2,-.5),u.merge(p),p.translate(0,0,.75),u.merge(p),p.translate(0,0,1),u.merge(p),p.translate(-7.5,0,0),u.merge(p),p.translate(0,0,-1.5),u.merge(p),p.translate(0,1,.5),u.merge(p),p.translate(0,0,.75),u.merge(p),p.translate(0,1,.25),u.merge(p),p.translate(0,0,-.75),u.merge(p),p.translate(0,0,-.5),u.merge(p);const z=new THREE.BoxGeometry(.7,.75,.2);z.translate(-3.5,1.87,2.25),u.merge(z);const b=u.clone();H.merge(b);const S=new THREE.Mesh(u,red);S.castShadow=!0,e.add(S);const I=new THREE.Geometry,k=new THREE.BoxGeometry(.7,.75,.2);k.translate(3.75,3.45,1.2),I.merge(k),k.translate(0,1,-1.5),I.merge(k),k.translate(0,-2,-.5),I.merge(k),k.translate(0,0,.75),I.merge(k),k.translate(0,0,1),I.merge(k),k.translate(-7.5,0,0),I.merge(k),k.translate(0,0,-1.5),I.merge(k),k.translate(0,1,.5),I.merge(k),k.translate(0,0,.75),I.merge(k),k.translate(0,1,.25),I.merge(k),k.translate(0,0,-.75),I.merge(k),k.translate(0,0,-.5),I.merge(k);const C=new THREE.BoxGeometry(.7,.75,.2);C.translate(-2.5,1.87,2.25),I.merge(C);const L=I.clone();H.merge(L);const j=new THREE.Mesh(I,blue);j.castShadow=!0,e.add(j);const O=new THREE.Geometry,A=new THREE.BoxGeometry(.7,.75,.2);A.translate(3.75,3.45,1.4),O.merge(A),A.translate(0,1,-1.5),O.merge(A),A.translate(0,-2,-.5),O.merge(A),A.translate(0,0,.75),O.merge(A),A.translate(0,0,1),O.merge(A),A.translate(-7.5,0,0),O.merge(A),A.translate(0,0,-1.5),O.merge(A),A.translate(0,1,.5),O.merge(A),A.translate(0,0,.75),O.merge(A),A.translate(0,1,.25),O.merge(A),A.translate(0,0,-.75),O.merge(A),A.translate(0,0,-1.5),O.merge(A),A.translate(7.5,0,2),O.merge(A),A.translate(0,-1,-1.75),O.merge(A);const Y=O.clone();H.merge(Y);const N=new THREE.Mesh(O,purple);N.castShadow=!0,e.add(N);const F=new THREE.Geometry,D=new THREE.BoxGeometry(.7,.75,.2);D.translate(3.75,3.45,.6),F.merge(D),D.translate(0,0,-1),F.merge(D),D.translate(0,1,-.75),F.merge(D),D.translate(0,0,1.5),F.merge(D),D.translate(0,0,.75),F.merge(D),D.translate(-7.5,-1,-1.75),F.merge(D),D.translate(0,-1,-.5),F.merge(D),D.translate(0,0,1.5),F.merge(D);const X=new THREE.BoxGeometry(.7,.75,.2);X.translate(3.5,1.87,2.25),F.merge(X);const W=F.clone();H.merge(W);const Z=new THREE.Mesh(F,orange);Z.castShadow=!0,e.add(Z);const V=new THREE.Mesh(H,shadows);V.receiveShadow=!0,e.add(V);const P=new THREE.Geometry,q=new THREE.BoxGeometry(1.1,1.25,2);q.translate(-4.4,5.25,3.5),q.vertices[0].y-=.9,q.vertices[5].y-=.9,P.merge(q),q.translate(2.2,0,0),P.merge(q),q.translate(2.2,0,0),P.merge(q),q.translate(2.2,0,0),P.merge(q),q.translate(2.2,0,0),P.merge(q);const J=P.clone();r.merge(J);const K=new THREE.Mesh(P,offwhite);K.castShadow=!0;const Q=new THREE.Geometry,U=new THREE.BoxGeometry(1.1,1.25,2);U.translate(-3.3,5.25,3.5),U.vertices[0].y-=.9,U.vertices[5].y-=.9,Q.merge(U),U.translate(2.2,0,0),Q.merge(U),U.translate(2.2,0,0),Q.merge(U),U.translate(2.2,0,0),Q.merge(U);const $=Q.clone();r.merge($);const _=new THREE.Mesh(Q,blue);_.castShadow=!0,e.add(K),e.add(_);const ee=new THREE.Mesh(r,shadows);ee.receiveShadow=!0,e.add(ee),e.position.set(8,1,-8),scene.add(e)}function initApartment(){const e=new THREE.Geometry,t=new THREE.Geometry,r=[foundation,brick,windowColor,couchFabric,blueFabric,purpleFabric,tanFabric,stone,shadows],s=new THREE.Geometry,n=new THREE.BoxGeometry(.5,10,1);n.translate(-3.5,5.25,3.25),s.merge(n),n.translate(0,0,-2.125),s.merge(n),n.translate(0,0,-2.125),s.merge(n),n.translate(0,0,-2.125),s.merge(n),n.translate(7,0,0),s.merge(n),n.translate(0,0,2.125),s.merge(n),n.translate(0,0,2.125),s.merge(n),n.translate(0,0,2.125),s.merge(n);const a=new THREE.BoxGeometry(1,10,.5);a.translate(-1.5,5.25,-3.375),s.merge(a),a.translate(3,0,0),s.merge(a),a.translate(0,0,6.875),s.merge(a),a.translate(-3,0,0),s.merge(a);const o=new THREE.BoxGeometry(1.25,3.5,.5);o.translate(-2.625,2,3.5),s.merge(o),o.translate(5.25,0,0),s.merge(o),o.translate(0,0,-6.875),s.merge(o),o.translate(-5.25,0,0),s.merge(o);let c=new THREE.BoxGeometry(1.25,1.75,.5);c.translate(-2.625,6.25,3.5),s.merge(c),c.translate(0,3.125,0),s.merge(c),c.translate(5.25,0,0),s.merge(c),c.translate(0,-3.125,0),s.merge(c),c.translate(0,0,-6.875),s.merge(c),c.translate(0,3.125,0),s.merge(c),c.translate(-5.25,0,0),s.merge(c),c.translate(0,-3.125,0),s.merge(c),(c=new THREE.BoxGeometry(2,7.5,.5)).translate(0,6.5,3.5),s.merge(c),(c=new THREE.BoxGeometry(2,10,.5)).translate(0,5.25,-3.375),s.merge(c);let m=new THREE.BoxGeometry(.5,3.5,1.15);m.translate(-3.5,2,2.19),s.merge(m),m.translate(0,0,-2.125),s.merge(m),m.translate(0,0,-2.125),s.merge(m),m.translate(7,0,0),s.merge(m),m.translate(0,0,2.125),s.merge(m),m.translate(0,0,2.125),s.merge(m),(m=new THREE.BoxGeometry(.5,1.75,1.15)).translate(-3.5,6.25,2.19),s.merge(m),m.translate(0,0,-2.125),s.merge(m),m.translate(0,0,-2.125),s.merge(m),m.translate(7,0,0),s.merge(m),m.translate(0,0,2.125),s.merge(m),m.translate(0,0,2.125),s.merge(m),m.translate(0,3.125,0),s.merge(m),m.translate(0,0,-2.125),s.merge(m),m.translate(0,0,-2.125),s.merge(m),m.translate(-7,0,0),s.merge(m),m.translate(0,0,2.125),s.merge(m),m.translate(0,0,2.125),s.merge(m);const l=new THREE.BoxGeometry(6.5,.25,6.5);l.translate(0,3,0),s.merge(l),l.translate(0,3.5,0),s.merge(l),l.translate(0,3.63,0),s.merge(l);const E=new THREE.BoxGeometry(.25,7.25,6.5);E.translate(0,6.67,0),s.merge(E);for(Z=0;Z<s.faces.length;Z++)s.faces[Z].materialIndex=1;e.mergeMesh(new THREE.Mesh(s));for(Z=0;Z<s.faces.length;Z++)s.faces[Z].materialIndex=8;e.mergeMesh(new THREE.Mesh(s));const i=new THREE.Geometry;let g=new THREE.BoxGeometry(7,9.5,.1);g.translate(0,5,3.5),i.merge(g),g.translate(0,0,-7),i.merge(g),(g=new THREE.BoxGeometry(.1,9.5,7)).translate(3.5,5,0),i.merge(g),g.translate(-7,0,0),i.merge(g);for(Z=0;Z<i.faces.length;Z++)i.faces[Z].materialIndex=2;e.mergeMesh(new THREE.Mesh(i));const w=new THREE.Geometry,y=new THREE.BoxGeometry(8,.5,8);w.merge(y);const T=new THREE.BoxGeometry(8.25,.25,8.25);T.translate(0,-.125,0),w.merge(T);const v=new THREE.BoxGeometry(.25,.5,7.375);v.translate(-3.88,10.5,.05),w.merge(v),v.translate(7.76,0,0),w.merge(v);const R=new THREE.BoxGeometry(8.01,.5,.25);R.translate(0,10.5,3.86),w.merge(R),R.translate(0,0,-7.6),w.merge(R);const H=new THREE.Geometry,d=new THREE.BoxGeometry(1.5,.1,.1);d.translate(-2.6,7.125,3.8),H.merge(d),d.translate(0,0,-7.475),H.merge(d);let h=new THREE.BoxGeometry(1.22,.1,.5);h.translate(-2.62,7.125,3.5),H.merge(h),h.translate(0,0,-6.875),H.merge(h),w.merge(H),H.translate(5.25,0,0),w.merge(H),H.translate(0,-3.375,0),w.merge(H),H.translate(-5.25,0,0),w.merge(H);const x=new THREE.Geometry;let G=new THREE.BoxGeometry(1.375,.1,.1);G.translate(-2.6,8.5,3.8),x.merge(G),G.translate(0,0,-7.475),x.merge(G);let M=new THREE.BoxGeometry(1.25,.1,.1);M.translate(-2.625,7.75,3.55),x.merge(M),M.translate(0,0,-7.1),x.merge(M),w.merge(x),x.translate(5.25,0,0),w.merge(x),x.translate(0,-3.12,0),w.merge(x),x.translate(-5.25,0,0),w.merge(x);const f=new THREE.Geometry,B=new THREE.BoxGeometry(.1,.1,1.375);B.translate(3.8,8.5,2.175),f.merge(B),B.translate(-7.6,0,0),f.merge(B),(h=new THREE.BoxGeometry(.1,.1,1.25)).translate(3.55,7.75,2.175),f.merge(h),h.translate(-7.1,0,0),f.merge(h),w.merge(f),f.translate(0,0,-2.125),w.merge(f),f.translate(0,0,-2.125),w.merge(f),f.translate(0,-3.125,0),w.merge(f),f.translate(0,0,2.125),w.merge(f),f.translate(0,0,2.125),w.merge(f);const u=new THREE.Geometry;(G=new THREE.BoxGeometry(.1,.1,1.5)).translate(3.8,7.1,2.175),u.merge(G),G.translate(-7.6,0,0),u.merge(G),(M=new THREE.BoxGeometry(.5,.1,1.22)).translate(3.51,7.1,2.175),u.merge(M),M.translate(-7.02,0,0),u.merge(M),w.merge(u),u.translate(0,0,-2.125),w.merge(u),u.translate(0,0,-2.125),w.merge(u),u.translate(0,-3.37,0),w.merge(u),u.translate(0,0,2.125),w.merge(u),u.translate(0,0,2.125),w.merge(u);const p=new THREE.BoxGeometry(2.5,.25,.2);p.translate(0,2.87,3.75),w.merge(p);const z=new THREE.BoxGeometry(.1,2.5,.1);z.translate(-1,1.5,3.75),w.merge(z),z.translate(1,0,0),w.merge(z),z.translate(1,0,0),w.merge(z);for(Z=0;Z<w.faces.length;Z++)w.faces[Z].materialIndex=0;e.mergeMesh(new THREE.Mesh(w));for(Z=0;Z<w.faces.length;Z++)w.faces[Z].materialIndex=8;t.mergeMesh(new THREE.Mesh(w));const b=new THREE.Geometry,S=new THREE.Geometry,I=new THREE.Geometry,k=new THREE.Geometry,C=new THREE.BoxGeometry(.75,.25,1.65);C.translate(-1,6.75,-.01),b.merge(C),S.merge(C),I.merge(C),k.merge(C);const L=new THREE.BoxGeometry(.25,.75,1.65);L.translate(-.5,7,-.01),b.merge(L),S.merge(L),I.merge(L),k.merge(L);const j=new THREE.BoxGeometry(1,.5,.25);j.translate(-.87,6.87,.92),b.merge(j),S.merge(j),I.merge(j),k.merge(j),j.translate(0,0,-1.84),b.merge(j),S.merge(j),I.merge(j),k.merge(j);const O=new THREE.BoxGeometry(.75,.15,.5);O.translate(-1,6.86,0),b.merge(O),S.merge(O),I.merge(O),k.merge(O),O.translate(0,0,-.52),b.merge(O),S.merge(O),I.merge(O),k.merge(O),O.translate(0,0,1.04),b.merge(O),S.merge(O),I.merge(O),k.merge(O),b.rotateY(1.25),b.translate(-1.25,0,-3),S.rotateY(-1.25),S.translate(2.25,0,3.25),I.rotateY(1),I.translate(2.5,-3.5,-3.25),k.rotateY(-1.5),k.translate(-2.25,-3.5,3.25);const A=new THREE.BoxGeometry(2.2,.5,1.2);A.translate(-1.5,3.55,-2),A.rotateY(-1.55),A.translate(-3,0,0),S.merge(A),A.translate(0,3.5,3),I.merge(A),A.rotateY(1.55),A.translate(.325,0,-3.075),I.merge(A),A.translate(-.75,-3.5,3.985),b.merge(A);for(Z=0;Z<b.faces.length;Z++)b.faces[Z].materialIndex=3;e.mergeMesh(new THREE.Mesh(b));for(Z=0;Z<S.faces.length;Z++)S.faces[Z].materialIndex=4;e.mergeMesh(new THREE.Mesh(S));for(Z=0;Z<I.faces.length;Z++)I.faces[Z].materialIndex=5;e.mergeMesh(new THREE.Mesh(I));for(Z=0;Z<k.faces.length;Z++)k.faces[Z].materialIndex=6;e.mergeMesh(new THREE.Mesh(k));const Y=new THREE.BoxGeometry(2.5,.45,1);Y.rotateY(-1.55),Y.translate(-1.02,3.475,-1.75);for(Z=0;Z<Y.faces.length;Z++)Y.faces[Z].materialIndex=6;e.mergeMesh(new THREE.Mesh(Y));const N=Y.clone();N.rotateY(1.55),N.translate(3.3,0,1);for(Z=0;Z<N.faces.length;Z++)N.faces[Z].materialIndex=6;e.mergeMesh(new THREE.Mesh(N));const F=Y.clone();F.rotateY(1.55),F.translate(3.3,3.5,-3);for(Z=0;Z<F.faces.length;Z++)F.faces[Z].materialIndex=6;e.mergeMesh(new THREE.Mesh(F));const D=Y.clone();D.translate(0,3.5,3);for(Z=0;Z<D.faces.length;Z++)D.faces[Z].materialIndex=6;e.mergeMesh(new THREE.Mesh(D));const X=new THREE.Geometry;let W=new THREE.BoxGeometry(3,1,.1);W.translate(0,1,-.5),X.merge(W),(W=new THREE.BoxGeometry(.1,1,1)).translate(1.45,1,-1),X.merge(W),W.translate(-2.9,0,0),X.merge(W),(W=new THREE.BoxGeometry(3.2,.1,1.2)).translate(0,1.55,-1),X.merge(W),(W=new THREE.BoxGeometry(3.1,.1,1.1)).translate(0,1.65,-1),X.merge(W);for(var Z=0;Z<X.faces.length;Z++)X.faces[Z].materialIndex=7;e.mergeMesh(new THREE.Mesh(X));let V=new THREE.Mesh(e,r);V.position.set(-11,.75,-9),V.castShadow=!0,scene.add(V)}function initBench(){const e=new THREE.Geometry,t=(new THREE.Geometry,[orange,gray,skinTone3,jean,red,offwhite,shadows]),r=new THREE.Geometry,s=new THREE.BoxGeometry(2,.1,1);r.merge(s);const n=new THREE.BoxGeometry(2,.8,.1);n.translate(0,.8,-.55),r.merge(n),r.scale(.8,.8,.8);for(p=0;p<r.faces.length;p++)r.faces[p].materialIndex=0;e.mergeMesh(new THREE.Mesh(r));const a=new THREE.Geometry;let o=new THREE.BoxGeometry(.1,1.8,.1);o.translate(-1.05,.4,-.55),a.merge(o),o.translate(2.1,0,0),a.merge(o),(o=new THREE.BoxGeometry(.1,.6,.1)).translate(-1.05,-.25,.55),a.merge(o),o.translate(2.1,0,0),a.merge(o),(o=new THREE.BoxGeometry(.1,.1,1)).translate(-1.05,0,0),a.merge(o),o.translate(2.1,0,0),a.merge(o),(o=new THREE.BoxGeometry(2,.1,.1)).translate(0,0,.55),a.merge(o),o.translate(0,0,-1.1),a.merge(o),o.translate(0,.35,0),a.merge(o),o.translate(0,.9,0),a.merge(o),a.scale(.8,.8,.8);for(p=0;p<a.faces.length;p++)a.faces[p].materialIndex=1;e.mergeMesh(new THREE.Mesh(a));const c=new THREE.Geometry,m=r.clone();c.merge(m);const l=a.clone();c.merge(l);for(p=0;p<c.faces.length;p++)c.faces[p].materialIndex=6;e.mergeMesh(new THREE.Mesh(c));const E=new THREE.Geometry;let i=new THREE.BoxGeometry(.3,.4,.5);i.translate(.55,.1,.5),i.vertices[4].x+=.1,i.vertices[6].x+=.1,i.vertices[0].x-=.2,i.vertices[2].x-=.2,i.vertices[0].y+=.3,i.vertices[2].y+=.4,i.vertices[4].y+=.3,i.vertices[5].y+=.3,i.vertices[6].y+=.3,i.vertices[7].y+=.4,E.merge(i),(i=new THREE.BoxGeometry(.3,.4,.5)).translate(-.55,.1,.5),i.vertices[1].x-=.1,i.vertices[3].x-=.1,i.vertices[5].x+=.2,i.vertices[7].x+=.2,i.vertices[5].y+=.3,i.vertices[7].y+=.4,i.vertices[1].y+=.3,i.vertices[0].y+=.3,i.vertices[3].y+=.3,i.vertices[2].y+=.4,E.merge(i);const g=new THREE.SphereGeometry(.35,32,32);g.translate(0,1.3,0),E.merge(g),E.scale(.5,.5,.5),E.translate(0,.56,0);for(p=0;p<E.faces.length;p++)E.faces[p].materialIndex=2;e.mergeMesh(new THREE.Mesh(E));const w=new THREE.BoxGeometry(1,1.4,.8);w.translate(0,.1,0),w.vertices[0].z-=.15,w.vertices[0].x-=.15,w.vertices[1].z+=.15,w.vertices[1].x-=.15,w.vertices[4].z+=.15,w.vertices[4].x+=.15,w.vertices[5].z-=.15,w.vertices[5].x+=.15;const y=new THREE.BoxGeometry(.3,.5,.5);y.translate(.55,.55,0),y.vertices[4].x-=.05,y.vertices[5].x-=.05,y.vertices[0].y-=.5,y.vertices[1].y-=.5,y.vertices[2].y-=.4,y.vertices[3].y-=.4,y.vertices[1].z+=.1,y.vertices[3].z+=.1,w.merge(y),(i=new THREE.BoxGeometry(.3,.5,.5)).translate(-.55,.55,0),i.vertices[1].x+=.05,i.vertices[0].x+=.05,i.vertices[5].y-=.5,i.vertices[4].y-=.5,i.vertices[7].y-=.4,i.vertices[6].y-=.4,i.vertices[4].z+=.1,i.vertices[6].z+=.1,w.merge(i),w.scale(.5,.5,.5),w.translate(0,.56,0);for(p=0;p<w.faces.length;p++)w.faces[p].materialIndex=1;e.mergeMesh(new THREE.Mesh(w));const T=new THREE.BoxGeometry(.5,.5,.8);T.translate(-.25,-.8,0),T.vertices[3].z+=.2,T.vertices[6].z+=.2;let v=new THREE.BoxGeometry(.5,.5,.8);v.translate(-.25,-.8,.8),v.vertices[0].x-=.1,v.vertices[2].x-=.1,v.vertices[5].x+=.1,v.vertices[7].x+=.1,v.vertices[0].y-=.2,v.vertices[5].y-=.2,T.merge(v),(v=new THREE.BoxGeometry(.5,.5,.8)).translate(.25,-.8,0),v.vertices[3].z+=.2,v.vertices[6].z+=.2,T.merge(v),(v=new THREE.BoxGeometry(.5,.5,.8)).translate(.25,-.8,.8),v.vertices[0].x-=.1,v.vertices[2].x-=.1,v.vertices[5].x+=.1,v.vertices[7].x+=.1,v.vertices[0].y-=.2,v.vertices[5].y-=.2,T.merge(v),T.scale(.5,.5,.5),T.translate(0,.56,0);for(p=0;p<T.faces.length;p++)T.faces[p].materialIndex=3;e.mergeMesh(new THREE.Mesh(T));const R=new THREE.BoxGeometry(.25,.3,.02);R.translate(-.05,.75,.35),R.rotateY(-.2);const H=new THREE.BoxGeometry(.25,.3,.02);H.translate(.05,.75,.35),H.rotateY(.2),R.merge(H);for(p=0;p<R.faces.length;p++)R.faces[p].materialIndex=4;e.mergeMesh(new THREE.Mesh(R));const d=new THREE.BoxGeometry(.25,.3,.05);d.translate(-.05,.75,.32),d.rotateY(-.2);const h=new THREE.BoxGeometry(.25,.3,.05);h.translate(.05,.75,.32),h.rotateY(.2),d.merge(h);for(p=0;p<d.faces.length;p++)d.faces[p].materialIndex=5;e.mergeMesh(new THREE.Mesh(d));const x=new THREE.Geometry,G=E.clone(!0);x.merge(G);const M=d.clone(!0);x.merge(M);const f=w.clone(!0);f.scale(1.01,1.01,1.01),x.merge(f);const B=T.clone(!0);B.scale(1.01,1.01,1.01),x.merge(B);const u=R.clone(!0);x.merge(u);for(var p=0;p<x.faces.length;p++)x.faces[p].materialIndex=6;e.mergeMesh(new THREE.Mesh(x));let z=new THREE.Mesh(e,t);z.castShadow=!0,z.position.set(0,.95,-7),scene.add(z)}function initBackHoe(){const e=new THREE.Geometry,t=(new THREE.Geometry,[truckMaterial,windowColor,gray,shadows]),r=new THREE.Geometry,s=new THREE.Geometry,n=new THREE.BoxGeometry(4,.5,1.2);n.translate(.75,.25,-.5),s.merge(n);const a=new THREE.BoxGeometry(.5,.5,1.2);a.translate(-1,1,-.5),a.vertices[4].y-=.5,a.vertices[5].y-=.5,s.merge(a);const o=new THREE.BoxGeometry(.25,.5,1.2);o.translate(-.63,1,-.5),s.merge(o);const c=new THREE.BoxGeometry(2.5,.25,1.2);c.translate(0,.625,-.5),s.merge(c);const m=new THREE.BoxGeometry(1.9,.1,1.3);m.translate(.4,2.3,-.5),s.merge(m);const l=new THREE.BoxGeometry(.75,.5,.25);l.translate(2.55,.25,.25),l.vertices[4].x-=.5,l.vertices[5].x-=.5,l.vertices[0].y+=.55,l.vertices[1].y+=.55,l.vertices[0].x-=.4,l.vertices[1].x-=.4,l.vertices[2].y+=1,l.vertices[3].y+=1,l.vertices[6].y+=.5,l.vertices[7].y+=.5,l.vertices[6].x+=.2,l.vertices[7].x+=.2,s.merge(l),l.translate(0,0,-1.5),s.merge(l);const E=new THREE.BoxGeometry(1,.25,.3);E.translate(3.025,1.18,.25),E.vertices[4].x+=.35,E.vertices[5].x+=.35,E.vertices[0].y-=.3,E.vertices[1].y-=.3,E.vertices[2].y-=.5,E.vertices[3].y-=.5,s.merge(E),E.translate(0,0,-1.5),s.merge(E);const i=new THREE.BoxGeometry(.75,.45,.3);i.translate(3.9,.78,.25),i.vertices[0].y-=.5,i.vertices[1].y-=.5,i.vertices[0].x+=.2,i.vertices[1].x+=.2,i.vertices[2].y-=.5,i.vertices[3].y-=.5,s.merge(i),i.translate(0,0,-1.5),s.merge(i);const g=s.clone(!0);r.merge(g);for(D=0;D<s.faces.length;D++)s.faces[D].materialIndex=0;e.mergeMesh(new THREE.Mesh(s));const w=new THREE.BoxGeometry(2.75,1.75,1.125);w.translate(.94,1.375,-.5),w.vertices[0].x-=1.1,w.vertices[1].x-=1.1,w.vertices[3].y+=.15,w.vertices[2].y+=.15;for(D=0;D<w.faces.length;D++)w.faces[D].materialIndex=1;e.mergeMesh(new THREE.Mesh(w));const y=new THREE.Geometry;let T=new THREE.BoxGeometry(.1,1.5,.1);T.translate(-.45,1.5,.05),y.merge(T),T.translate(.55,0,0),y.merge(T),T.translate(0,0,-1.1),y.merge(T),T.translate(-.55,0,0),y.merge(T),(T=new THREE.BoxGeometry(.05,1.5,.1)).translate(1.23,1.5,.05),y.merge(T),T.translate(0,0,-1.1),y.merge(T);const v=new THREE.BoxGeometry(.05,1.75,.1);v.translate(1.28,1.375,.05),v.vertices[0].y-=.05,v.vertices[1].y-=.05,y.merge(v),v.translate(0,0,-1.1),y.merge(v);const R=new THREE.BoxGeometry(.1,.25,.1);R.translate(2.3,.625,.05),R.vertices[0].y-=.05,R.vertices[1].y-=.05,y.merge(R),R.translate(0,0,-1.1),y.merge(R);let H=new THREE.BoxGeometry(1.75,.1,.1);H.translate(.375,2.2,.05),y.merge(H),H.translate(0,0,-1.1),y.merge(H),(H=new THREE.BoxGeometry(1,.1,.1)).translate(1.75,.55,.05),y.merge(H),H.translate(0,0,-1.1),y.merge(H),(H=new THREE.BoxGeometry(1.75,.5,.1)).translate(.4,1,.05),y.merge(H),H.translate(0,0,-1.1),y.merge(H);const d=new THREE.BoxGeometry(.01,.2,1);d.translate(-.496,1.3,-.5),y.merge(d),d.translate(0,.9,0),y.merge(d);const h=new THREE.BoxGeometry(1.045,.1,.1);h.translate(1.825,2.155,.05),h.vertices[0].y-=1.5,h.vertices[1].y-=1.5,h.vertices[2].y-=1.5,h.vertices[3].y-=1.5,y.merge(h),h.translate(0,0,-1.1),y.merge(h);const x=new THREE.BoxGeometry(.1,.1,1);x.translate(2.3,.55,-.5),y.merge(x);const G=y.clone(!0);r.merge(G);for(D=0;D<y.faces.length;D++)y.faces[D].materialIndex=2;e.mergeMesh(new THREE.Mesh(y));const M=new THREE.Geometry,f=new THREE.BoxGeometry(.4,.1,.4);f.translate(.7,.75,-.5),M.merge(f);const B=new THREE.BoxGeometry(.1,.7,.4);B.translate(.45,1.05,-.5),M.merge(B);const u=new THREE.CylinderGeometry(.2,.2,.05,32);u.translate(1.5,-.75,-.5),u.rotateZ(1.2),M.merge(u);const p=new THREE.BoxGeometry(.95,.24,.98);p.translate(1.75,.65,-.5),M.merge(p);const z=new THREE.BoxGeometry(.95,.5,.98);z.translate(1.75,1,-.5),z.vertices[0].x-=.4,z.vertices[1].x-=.4,M.merge(z);for(D=0;D<M.faces.length;D++)M.faces[D].materialIndex=2;e.mergeMesh(new THREE.Mesh(M));const b=new THREE.Shape;b.moveTo(0,.75),b.bezierCurveTo(0,1.75,1.5,1.75,1.5,.75),b.lineTo(1.125,.75),b.bezierCurveTo(1.125,1.25,.375,1.25,.375,.75),b.bezierCurveTo(.375,.35,1.125,.35,1.125,.75),b.lineTo(1.5,.75),b.bezierCurveTo(1.5,-.125,0,-.125,0,.75);new THREE.Group;const S=new THREE.Geometry,I=new THREE.ExtrudeGeometry(b,{amount:.5,steps:50,bevelEnabled:!1,curveSegments:8});I.translate(-1,-1,0),S.merge(I),I.translate(0,0,-1.5),S.merge(I),I.translate(3.2,0,0),S.merge(I),I.translate(0,0,1.5),S.merge(I);const k=new THREE.CylinderGeometry(.15,.15,.3,6);k.rotateX(1.6),k.translate(-.25,-.2,.3),S.merge(k),k.translate(0,0,-1.5),S.merge(k),k.translate(3.2,0,0),S.merge(k),k.translate(0,0,1.5),S.merge(k);let C=new THREE.BoxGeometry(.2,.2,1.5);C.translate(-1.25,0,-.5),S.merge(C),(C=new THREE.BoxGeometry(.32,.2,1.5)).translate(-1.19,-.2,-.5),S.merge(C),(C=new THREE.BoxGeometry(1.25,.2,1.5)).translate(1.25,-.2,-.5),S.merge(C),(C=new THREE.BoxGeometry(.2,.2,.9)).translate(2.75,-.2,-.45),S.merge(C);const L=new THREE.BoxGeometry(.05,.2,.5);L.translate(-1.25,.3,-.5),S.merge(L);let j=new THREE.BoxGeometry(.5,.2,2);j.rotateZ(.2),j.translate(4.825,.7,-.5),S.merge(j),(j=new THREE.BoxGeometry(1,.2,2)).rotateZ(1.15),j.translate(4.45,.25,-.5),S.merge(j),(j=new THREE.BoxGeometry(1,.2,2)).rotateZ(-.7),j.translate(4.61,-.42,-.5),S.merge(j),(j=new THREE.BoxGeometry(.75,.2,2)).translate(5.3,-.717,-.5),S.merge(j),(j=new THREE.BoxGeometry(.5,.25,.2)).translate(4.839,.53,.4),j.vertices[6].y+=.2,j.vertices[7].y+=.2,j.vertices[2].y+=.1,j.vertices[3].y+=.1,j.vertices[2].x-=.15,j.vertices[3].x-=.15,S.merge(j),j.translate(0,0,-1.8),S.merge(j),(j=new THREE.BoxGeometry(.75,.25,.2)).translate(5.3,-.5,.4),j.vertices[4].x+=.2,j.vertices[5].x+=.2,j.vertices[0].y-=.2,j.vertices[1].y-=.2,S.merge(j),j.translate(0,0,-1.8),S.merge(j),(j=new THREE.BoxGeometry(.75,.75,.2)).translate(4.75,.25,.4),j.vertices[2].x+=.1,j.vertices[3].x+=.1,j.vertices[4].x+=.2,j.vertices[5].x+=.2,j.vertices[0].x-=.23,j.vertices[1].x-=.23,j.vertices[0].y+=.02,j.vertices[1].y+=.02,S.merge(j),j.translate(0,0,-1.8),S.merge(j),(j=new THREE.BoxGeometry(.5,.5,.2)).translate(4.875,-.375,.4),j.vertices[0].x+=.1,j.vertices[1].x+=.1,j.vertices[2].x+=.3,j.vertices[3].x+=.3,j.vertices[4].x-=.25,j.vertices[5].x-=.25,j.vertices[6].x+=.05,j.vertices[7].x+=.05,j.vertices[6].y+=.05,j.vertices[7].y+=.05,S.merge(j),j.translate(0,0,-1.8),S.merge(j);const O=S.clone(!0);r.merge(O);for(D=0;D<S.faces.length;D++)S.faces[D].materialIndex=2;e.mergeMesh(new THREE.Mesh(S));const A=new THREE.Geometry,Y=new THREE.TorusGeometry(.34,.1,4,50,6.3);Y.translate(-.25,-.213,.415),A.merge(Y),Y.translate(0,0,-1.825),A.merge(Y),Y.translate(3.2,0,0),A.merge(Y),Y.translate(0,0,1.825),A.merge(Y);const N=new THREE.CylinderGeometry(.5,.5,.3,32);N.translate(-.25,.2,.25),N.rotateX(1.6),A.merge(N),N.translate(0,0,-1.3),A.merge(N),N.translate(3.25,0,0),A.merge(N),N.translate(0,0,1.3),A.merge(N);const F=A.clone(!0);r.merge(F);for(D=0;D<A.faces.length;D++)A.faces[D].materialIndex=2;e.mergeMesh(new THREE.Mesh(A));for(var D=0;D<r.faces.length;D++)r.faces[D].materialIndex=3;e.mergeMesh(new THREE.Mesh(r));let X=new THREE.Mesh(e,t);X.castShadow=!0,X.position.set(2.5,1.4,2.8),scene.add(X)}function initTruck(){const e=new THREE.Group,t=new THREE.Geometry,r=new THREE.Geometry,s=new THREE.BoxGeometry(1,.8,1.3);s.translate(-.6,0,0),r.merge(s);const n=new THREE.BoxGeometry(.1,.8,1.3);n.translate(.52,.25,0),r.merge(n);const a=new THREE.BoxGeometry(.1,.7,.3);a.translate(.52,.85,.5),r.merge(a),a.translate(0,0,-1),r.merge(a);const o=new THREE.BoxGeometry(.8,.1,1.3);o.translate(.17,1.15,0),o.vertices[6].x-=.05,o.vertices[7].x-=.05,r.merge(o);const c=new THREE.BoxGeometry(.1,1,.1);c.translate(-.6,.52,-.6),c.rotateZ(-.4),r.merge(c),c.translate(0,0,1.2),r.merge(c);const m=new THREE.BoxGeometry(1,.8,1.29);m.vertices[4].x+=.26,m.vertices[5].x+=.26,m.vertices[6].x-=.035,m.vertices[7].x-=.035,m.vertices[0].y+=2.2,m.vertices[1].y+=2.2,m.vertices[2].y+=2.3,m.vertices[3].y+=2.3,m.vertices[4].y+=2.2,m.vertices[5].y+=2.2,m.vertices[6].y+=2.3,m.vertices[7].y+=2.3;const l=new THREE.Mesh(m,windowColor);e.add(l);const E=new THREE.BoxGeometry(3.2,.3,1.3);E.translate(.9,-.31,0),r.merge(E);const i=new THREE.BoxGeometry(2.68,.6,.1);i.translate(1.15,.1,.6),r.merge(i),i.translate(0,0,-1.2),r.merge(i);const g=new THREE.BoxGeometry(.1,.6,1.3);g.translate(2.45,.1,0),r.merge(g),r.translate(0,1.5,0);const w=r.clone(!0);t.merge(w);const y=new THREE.Mesh(r,offwhite);y.castShadow=!0,e.add(y);const T=new THREE.Geometry,v=new THREE.BoxGeometry(.4,.1,.4);v.translate(.25,1.6,.3),T.merge(v),v.translate(0,0,-.6),T.merge(v);const R=new THREE.BoxGeometry(.1,.7,.4);R.translate(.45,1.8,.3),T.merge(R),R.translate(0,0,-.6),T.merge(R);const H=new THREE.CylinderGeometry(.2,.2,.05,32);H.translate(-1.9,.65,.3),H.rotateZ(-1.2),T.merge(H);const d=T.clone(!0);t.merge(d);const h=new THREE.Mesh(T,gray);e.add(h);const x=new THREE.Geometry,G=new THREE.BoxGeometry(.4,.1,1.4);G.translate(-.95,1.05,0),G.vertices[2].x+=.01,G.vertices[3].x+=.01,x.merge(G);const M=new THREE.BoxGeometry(1.1,.1,1.4);M.translate(.7,1.05,0),M.vertices[2].x+=.01,M.vertices[3].x+=.01,M.vertices[6].x-=.01,M.vertices[7].x-=.01,x.merge(M);const f=new THREE.BoxGeometry(.4,.1,1.4);f.translate(2.35,1.05,0),f.vertices[6].x-=.01,f.vertices[7].x-=.01,x.merge(f);const B=x.clone(!0);t.merge(B);const u=new THREE.Mesh(x,palegray);e.add(u);const p=new THREE.Geometry,z=new THREE.CylinderGeometry(.45,.45,.2,32);z.translate(-.3,.55,-1.1),z.rotateX(1.6),p.merge(z),z.translate(0,0,-1.2),p.merge(z),z.translate(2,0,1.2),p.merge(z),z.translate(0,0,-1.2),p.merge(z);const b=new THREE.BoxGeometry(.01,.7,1.2);b.translate(-1.1,1.5,0),p.merge(b);const S=new THREE.BoxGeometry(.05,.2,.5);S.translate(2.5,1.25,0),p.merge(S);const I=p.clone(!0);t.merge(I);const k=new THREE.Mesh(p,gray);k.castShadow=!0,e.add(k);const C=new THREE.Geometry,L=new THREE.TorusGeometry(.25,.1,3,199);L.translate(-.3,1.09,.63),C.merge(L),L.translate(0,0,-1.3),C.merge(L),L.translate(2,0,1.3),C.merge(L),L.translate(0,0,-1.3),C.merge(L);const j=C.clone(!0);t.merge(j);const O=new THREE.Mesh(C,offwhite);e.add(O);const A=new THREE.Geometry,Y=new THREE.BoxGeometry(.1,.1,.1);Y.translate(2.5,1.25,.45),A.merge(Y),Y.translate(0,0,-.9),A.merge(Y);const N=A.clone(!0);t.merge(N);const F=new THREE.Mesh(A,red);e.add(F);const D=new THREE.BoxGeometry(.1,.05,.5);D.translate(.2,2.72,0);const X=D.clone(!0);t.merge(X);const W=new THREE.Mesh(D,orange);W.castShadow=!0,e.add(W);const Z=new THREE.Mesh(t,shadows);e.add(Z),e.position.set(0,0,7),e.rotation.y+=.5,e.scale.set(.9,.9,.9),scene.add(e)}function initWorkers(){const e=new THREE.Group,t=new THREE.Group,r=new THREE.Group,s=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.Geometry,o=new THREE.Geometry,c=new THREE.BoxGeometry(1,.4,.5);c.translate(.85,.6,0),c.vertices[0].y-=.75,c.vertices[1].y-=.75,c.vertices[2].y-=.5,c.vertices[3].y-=.5,c.vertices[0].x-=.5,c.vertices[1].x-=.5,c.vertices[2].x-=.5,c.vertices[3].x-=.5,c.vertices[0].z-=.15,c.vertices[1].z+=.15,c.vertices[2].z-=.15,c.vertices[3].z+=.15,o.merge(c);const m=new THREE.BoxGeometry(1,.4,.5);m.translate(-.85,.6,0),m.vertices[5].y+=.3,m.vertices[4].y+=.3,m.vertices[7].y+=.55,m.vertices[6].y+=.55,m.vertices[5].x+=.8,m.vertices[4].x+=.8,m.vertices[7].x+=.8,m.vertices[6].x+=.8,m.vertices[5].z+=.9,m.vertices[4].z+=1.05,m.vertices[7].z+=.9,m.vertices[6].z+=1.05,o.merge(m);const l=new THREE.SphereGeometry(.35,32,32);l.translate(0,1.3,0),o.merge(l);const E=new THREE.Mesh(o,skinTone2);E.castShadow=!0,E.geometry.scale(.5,.5,.5);const i=o.clone(!0);s.merge(i),e.add(E);const g=new THREE.BoxGeometry(1,1.4,.8);g.translate(0,.1,0),g.vertices[0].z-=.15,g.vertices[0].x-=.15,g.vertices[1].z+=.15,g.vertices[1].x-=.15,g.vertices[4].z+=.15,g.vertices[4].x+=.15,g.vertices[5].z-=.15,g.vertices[5].x+=.15;const w=new THREE.Mesh(g,palegray);w.castShadow=!0,w.geometry.scale(.5,.5,.5);const y=g.clone(!0);s.merge(y),e.add(w);const T=new THREE.BoxGeometry(.5,.8,.8);T.translate(-.25,-1,0),T.vertices[0].x-=.1,T.vertices[1].x-=.1,T.vertices[2].x-=.3,T.vertices[2].z-=.3,T.vertices[3].x-=.3,T.vertices[3].z+=.3,T.vertices[6].z+=.3,T.vertices[7].z-=.3;const v=new THREE.BoxGeometry(.5,.8,.8);v.translate(.25,-1,0),v.vertices[4].x+=.1,v.vertices[5].x+=.1,v.vertices[2].z-=.3,v.vertices[3].z+=.3,v.vertices[6].x+=.3,v.vertices[6].z+=.3,v.vertices[7].x+=.3,v.vertices[7].z-=.3,T.merge(v);const R=new THREE.Mesh(T,jean);R.castShadow=!0,R.geometry.scale(.5,.5,.5);const H=T.clone(!0);s.merge(H),e.add(R);const d=new THREE.Geometry,h=c.clone();d.merge(h);const x=new THREE.BoxGeometry(1,.4,.5);x.translate(-.85,.6,0),x.vertices[5].y-=.75,x.vertices[4].y-=.75,x.vertices[7].y-=.5,x.vertices[6].y-=.5,x.vertices[5].x+=.5,x.vertices[4].x+=.5,x.vertices[7].x+=.5,x.vertices[6].x+=.5,x.vertices[5].z-=.15,x.vertices[4].z+=.15,x.vertices[7].z-=.15,x.vertices[6].z+=.15,d.merge(x);const G=new THREE.SphereGeometry(.35,32,32);G.translate(0,1.3,0),d.merge(G);const M=new THREE.Mesh(d,skinTone4);M.castShadow=!0,M.geometry.scale(.5,.5,.5),t.add(M);const f=new THREE.Mesh(g,palegray);f.castShadow=!0;const B=g.clone(!0);n.merge(B),t.add(f);const u=new THREE.Mesh(T,jean);u.castShadow=!0;const p=T.clone(!0);n.merge(p),t.add(u);const z=new THREE.Geometry,b=new THREE.BoxGeometry(1,.4,.5);b.translate(.85,.6,0),b.vertices[0].y-=.45,b.vertices[1].y-=.45,b.vertices[2].y-=.2,b.vertices[3].y-=.2,b.vertices[0].x-=.5,b.vertices[1].x-=.5,b.vertices[2].x-=.5,b.vertices[3].x-=.5,b.vertices[0].z+=.45,b.vertices[1].z+=.85,b.vertices[2].z+=.45,b.vertices[3].z+=.85,z.merge(b);const S=new THREE.BoxGeometry(1,.4,.5);S.translate(-.85,.6,0),S.vertices[5].y-=.45,S.vertices[4].y-=.45,S.vertices[7].y-=.2,S.vertices[6].y-=.2,S.vertices[5].x+=.5,S.vertices[4].x+=.5,S.vertices[7].x+=.5,S.vertices[6].x+=.5,S.vertices[5].z+=.45,S.vertices[4].z+=.85,S.vertices[7].z+=.45,S.vertices[6].z+=.85,z.merge(S);const I=new THREE.SphereGeometry(.35,32,32);I.translate(0,1.3,0),z.merge(I);const k=new THREE.Mesh(z,skinTone1);k.castShadow=!0,k.geometry.scale(.5,.5,.5),r.add(k);const C=new THREE.Mesh(g,palegray);C.castShadow=!0;const L=g.clone(!0);a.merge(L),r.add(C);const j=new THREE.Mesh(T,jean);j.castShadow=!0;const O=T.clone(!0);a.merge(O),r.add(j);const A=new THREE.Geometry,Y=new THREE.SphereGeometry(.2,32,32,1,6.3,0,1.5);Y.translate(0,.7,0),A.merge(Y);const N=new THREE.CylinderGeometry(.2,.2,.02,32);N.translate(0,.72,.1),A.merge(N);const F=new THREE.Mesh(A,truckMaterial);F.castShadow=!0;const D=F.clone(),X=F.clone(),W=new THREE.Geometry,Z=new THREE.BoxGeometry(.2,.5,.4);Z.translate(-.13,.17,0),Z.vertices[0].z-=.05,Z.vertices[1].z+=.05,Z.vertices[4].z+=.05,Z.vertices[4].x+=.05,Z.vertices[5].z-=.05,Z.vertices[5].x+=.05,W.merge(Z);const V=new THREE.BoxGeometry(.2,.5,.4);V.translate(.13,.17,0),V.vertices[5].z-=.05,V.vertices[4].z+=.05,V.vertices[1].z+=.05,V.vertices[1].x-=.05,V.vertices[0].z-=.05,V.vertices[0].x-=.05,W.merge(V);const P=new THREE.BoxGeometry(.2,.5,.025);P.translate(0,.17,-.1875),P.vertices[0].z+=.05,P.vertices[1].z+=.05,P.vertices[4].z+=.05,P.vertices[5].z+=.05,W.merge(P);let q=new THREE.Mesh(W,truckMaterial);q.castShadow=!0;const J=new THREE.Geometry,K=new THREE.BoxGeometry(.05,.5,.001);K.translate(-.11,.17,.201),K.vertices[0].z-=.05,K.vertices[1].z-=.05,K.vertices[4].z-=.05,K.vertices[5].z-=.05,J.merge(K),K.translate(.22,0,0),J.merge(K);const Q=new THREE.BoxGeometry(.05,.5,.001);Q.translate(-.11,.17,-.201),Q.vertices[0].z+=.05,Q.vertices[1].z+=.05,Q.vertices[4].z+=.05,Q.vertices[5].z+=.05,J.merge(Q),Q.translate(.22,0,0),J.merge(Q);const U=new THREE.BoxGeometry(.05,.001,.3);U.translate(-.11,.42,0),J.merge(U),U.translate(.22,0,0),J.merge(U);const $=new THREE.BoxGeometry(.2,.2,.001);$.translate(-.13,.02,.201),$.vertices[4].x+=.02,$.vertices[5].x+=.02,$.vertices[0].z-=.02,$.vertices[1].z-=.02,$.vertices[4].z-=.02,$.vertices[5].z-=.02,J.merge($);const _=new THREE.BoxGeometry(.2,.2,.001);_.translate(.13,.02,.201),_.vertices[0].x-=.02,_.vertices[1].x-=.02,_.vertices[0].z-=.02,_.vertices[1].z-=.02,_.vertices[4].z-=.02,_.vertices[5].z-=.02,J.merge(_);const ee=new THREE.BoxGeometry(.001,.2,.4);ee.translate(-.23,.02,0),ee.vertices[0].x+=.02,ee.vertices[1].x+=.02,ee.vertices[4].x+=.02,ee.vertices[5].x+=.02,ee.vertices[0].z-=.02,ee.vertices[1].z+=.02,ee.vertices[4].z+=.02,ee.vertices[5].z-=.02,J.merge(ee);const te=new THREE.BoxGeometry(.001,.2,.4);te.translate(.23,.02,0),te.vertices[0].x-=.02,te.vertices[1].x-=.02,te.vertices[4].x-=.02,te.vertices[5].x-=.02,te.vertices[0].z-=.02,te.vertices[1].z+=.02,te.vertices[4].z+=.02,te.vertices[5].z-=.02,J.merge(te);const re=new THREE.BoxGeometry(.45,.2,.001);re.translate(0,.02,-.201),re.vertices[0].x-=.02,re.vertices[1].x-=.02,re.vertices[4].x+=.02,re.vertices[5].x+=.02,re.vertices[0].z+=.02,re.vertices[1].z+=.02,re.vertices[4].z+=.02,re.vertices[5].z+=.02,J.merge(re);const se=new THREE.Mesh(J,yellow);(q=new THREE.Mesh(W,truckMaterial)).add(se);const ne=q.clone(),ae=q.clone(),oe=new THREE.BoxGeometry(.8,.6,.025);oe.translate(0,.3,.25),oe.rotateX(.4);const ce=new THREE.Mesh(oe,white);ce.castShadow=!0,e.add(F),e.add(q);const me=new THREE.Mesh(s,shadows);e.add(me),e.position.set(2.7,1.2,6.5),e.rotation.y-=1,scene.add(e),t.add(D),t.add(ne);const le=new THREE.Mesh(n,shadows);t.add(le),t.position.set(5.6,1.2,6.3),t.rotation.y+=.8,scene.add(t),r.add(X),r.add(ae),r.add(ce);const Ee=new THREE.Mesh(a,shadows);r.add(Ee),r.position.set(7,1.2,6.4),r.rotation.y-=.6,scene.add(r)}function render(){scene.position.set(0,0,3),renderer.render(scene,camera)}function animate(){requestAnimationFrame(animate),render(),controls.update()}function slide(e){switch(showing){case e:document.getElementById(e).removeAttribute("style"),document.getElementsByClassName(e)[0].removeAttribute("style");break;case"group-1":document.getElementById("group-1").removeAttribute("style"),document.getElementsByClassName("group-1")[0].removeAttribute("style");break;case"group-2":document.getElementById("group-2").removeAttribute("style"),document.getElementsByClassName("group-2")[0].removeAttribute("style");break;case"group-3":document.getElementById("group-3").removeAttribute("style"),document.getElementsByClassName("group-3")[0].removeAttribute("style");break;case"group-4":document.getElementById("group-4").removeAttribute("style"),document.getElementsByClassName("group-4")[0].removeAttribute("style");break;case"group-5":document.getElementById("group-5").removeAttribute("style"),document.getElementsByClassName("group-5")[0].removeAttribute("style");break;case"group-6":document.getElementById("group-6").removeAttribute("style"),document.getElementsByClassName("group-6")[0].removeAttribute("style")}showing===e?showing="none":(document.getElementsByClassName(e)[0].style.backgroundColor="#666",document.getElementById(e).style.width="300px",showing=e)}function onDocumentMouseMove(e){e.preventDefault();const t=renderer.domElement.getBoundingClientRect();mouse.x=(e.clientX-t.left)/t.width*2-1,mouse.y=-(e.clientY-t.top)/t.height*2+1,raycaster.setFromCamera(mouse,camera),selected&&raycaster.intersectObjects(objects)&&(selected.position.set(0,1,0),selected.position.set(raycaster.intersectObjects(objects)[0].point.x,selected.position.y,raycaster.intersectObjects(objects)[0].point.z-3)),raycaster.setFromCamera(mouse,camera);const r=raycaster.intersectObjects(flaggers);if(r.length>0){const e=r[0].object;hovered!==e&&(renderer.domElement.style.cursor="pointer",hovered=e)}else null!==hovered&&(renderer.domElement.style.cursor="auto",hovered=null)}function onDocumentTouchMove(e){e.preventDefault(),e=e.changedTouches[0];const t=renderer.domElement.getBoundingClientRect();mouse.x=(e.clientX-t.left)/t.width*2-1,mouse.y=-(e.clientY-t.top)/t.height*2+1,raycaster.setFromCamera(mouse,camera),selected&&raycaster.intersectObjects(objects)&&(selected.position.set(0,1,0),selected.position.set(raycaster.intersectObjects(objects)[0].point.x,selected.position.y,raycaster.intersectObjects(objects)[0].point.z))}function onDocumentMouseDown(e){controls.enabled=!1,e.preventDefault(),raycaster.setFromCamera(mouse,camera);const t=raycaster.intersectObjects(flaggers);t.length>0&&(selected=t[0].object,raycaster.intersectObjects(objects)&&offset.copy(intersection).sub(selected.position),renderer.domElement.style.cursor="move")}function onDocumentTouchStart(e){controls.enabled=!1,e.preventDefault(),e=e.changedTouches[0];const t=renderer.domElement.getBoundingClientRect();mouse.x=(e.clientX-t.left)/t.width*2-1,mouse.y=-(e.clientY-t.top)/t.height*2+1,raycaster.setFromCamera(mouse,camera);const r=raycaster.intersectObjects(flaggers);r.length>0&&(selected=r[0].object,raycaster.intersectObjects(objects)&&offset.copy(intersection).sub(selected.position),renderer.domElement.style.cursor="move")}function onDocumentMouseCancel(e){controls.enabled=!0,e.preventDefault(),selected&&(selected=null),renderer.domElement.style.cursor="auto"}function onDocumentTouchEnd(e){controls.enabled=!0,e.preventDefault(),selected&&(selected=null),renderer.domElement.style.cursor="auto"}function flagger(e){const t=new THREE.Geometry,r=(new THREE.Geometry,[e,gray,jean,skinTone1,skinTone2,skinTone3,yellow,truckMaterial,shadows]),s=new THREE.BoxGeometry(1,1.4,.8);s.translate(0,.1,0),s.vertices[0].z-=.15,s.vertices[0].x-=.15,s.vertices[1].z+=.15,s.vertices[1].x-=.15,s.vertices[4].z+=.15,s.vertices[4].x+=.15,s.vertices[5].z-=.15,s.vertices[5].x+=.15,s.rotateY(-.5),s.translate(.45,0,.7),s.scale(.5,.5,.5);for(u=0;u<s.faces.length;u++)s.faces[u].materialIndex=0;t.mergeMesh(new THREE.Mesh(s));for(u=0;u<s.faces.length;u++)s.faces[u].materialIndex=8;t.mergeMesh(new THREE.Mesh(s));const n=new THREE.Geometry,a=new THREE.SphereGeometry(.2,32,32,1,6.3,0,1.5);a.translate(0,.7,0),n.merge(a);const o=new THREE.CylinderGeometry(.2,.2,.02,32);o.translate(0,.72,.1),n.merge(o),n.rotateY(-.5),n.translate(.225,0,.345);for(u=0;u<n.faces.length;u++)n.faces[u].materialIndex=0;t.mergeMesh(new THREE.Mesh(n));for(u=0;u<n.faces.length;u++)n.faces[u].materialIndex=8;t.mergeMesh(new THREE.Mesh(n));const c=new THREE.Geometry,m=new THREE.BoxGeometry(.2,.5,.4);m.translate(-.13,.17,0),m.vertices[0].z-=.05,m.vertices[1].z+=.05,m.vertices[4].z+=.05,m.vertices[4].x+=.05,m.vertices[5].z-=.05,m.vertices[5].x+=.05,c.merge(m);const l=new THREE.BoxGeometry(.2,.5,.4);l.translate(.13,.17,0),l.vertices[5].z-=.05,l.vertices[4].z+=.05,l.vertices[1].z+=.05,l.vertices[1].x-=.05,l.vertices[0].z-=.05,l.vertices[0].x-=.05,c.merge(l);const E=new THREE.BoxGeometry(.2,.5,.025);E.translate(0,.17,-.1875),E.vertices[0].z+=.05,E.vertices[1].z+=.05,E.vertices[4].z+=.05,E.vertices[5].z+=.05,c.merge(E),c.rotateY(-.5),c.translate(.225,0,.345);for(u=0;u<c.faces.length;u++)c.faces[u].materialIndex=7;t.mergeMesh(new THREE.Mesh(c));for(u=0;u<c.faces.length;u++)c.faces[u].materialIndex=8;t.mergeMesh(new THREE.Mesh(c));const i=new THREE.Geometry;let g=new THREE.BoxGeometry(.05,.5,.001);g.translate(-.11,.17,.201),g.vertices[0].z-=.05,g.vertices[1].z-=.05,g.vertices[4].z-=.05,g.vertices[5].z-=.05,i.merge(g),g.translate(.22,0,0),i.merge(g),(g=new THREE.BoxGeometry(.05,.5,.001)).translate(-.11,.17,-.201),g.vertices[0].z+=.05,g.vertices[1].z+=.05,g.vertices[4].z+=.05,g.vertices[5].z+=.05,i.merge(g),g.translate(.22,0,0),i.merge(g),(g=new THREE.BoxGeometry(.05,.001,.3)).translate(-.11,.42,0),i.merge(g),g.translate(.22,0,0),i.merge(g),(g=new THREE.BoxGeometry(.2,.2,.001)).translate(-.13,.02,.201),g.vertices[4].x+=.02,g.vertices[5].x+=.02,g.vertices[0].z-=.02,g.vertices[1].z-=.02,g.vertices[4].z-=.02,g.vertices[5].z-=.02,i.merge(g),(g=new THREE.BoxGeometry(.2,.2,.001)).translate(.13,.02,.201),g.vertices[0].x-=.02,g.vertices[1].x-=.02,g.vertices[0].z-=.02,g.vertices[1].z-=.02,g.vertices[4].z-=.02,g.vertices[5].z-=.02,i.merge(g),(g=new THREE.BoxGeometry(.001,.2,.4)).translate(-.23,.02,0),g.vertices[0].x+=.02,g.vertices[1].x+=.02,g.vertices[4].x+=.02,g.vertices[5].x+=.02,g.vertices[0].z-=.02,g.vertices[1].z+=.02,g.vertices[4].z+=.02,g.vertices[5].z-=.02,i.merge(g),(g=new THREE.BoxGeometry(.001,.2,.4)).translate(.23,.02,0),g.vertices[0].x-=.02,g.vertices[1].x-=.02,g.vertices[4].x-=.02,g.vertices[5].x-=.02,g.vertices[0].z-=.02,g.vertices[1].z+=.02,g.vertices[4].z+=.02,g.vertices[5].z-=.02,i.merge(g),(g=new THREE.BoxGeometry(.45,.2,.001)).translate(0,.02,-.201),g.vertices[0].x-=.02,g.vertices[1].x-=.02,g.vertices[4].x+=.02,g.vertices[5].x+=.02,g.vertices[0].z+=.02,g.vertices[1].z+=.02,g.vertices[4].z+=.02,g.vertices[5].z+=.02,i.merge(g),i.rotateY(-.5),i.translate(.225,0,.345);for(u=0;u<i.faces.length;u++)i.faces[u].materialIndex=6;t.mergeMesh(new THREE.Mesh(i));for(u=0;u<i.faces.length;u++)i.faces[u].materialIndex=8;t.mergeMesh(new THREE.Mesh(i));const w=new THREE.Geometry;let y=new THREE.BoxGeometry(.5,.8,.8);y.translate(-.25,-1,0),y.vertices[0].x-=.1,y.vertices[1].x-=.1,y.vertices[2].x-=.3,y.vertices[2].z-=.3,y.vertices[3].x-=.3,y.vertices[3].z+=.3,y.vertices[6].z+=.3,y.vertices[7].z-=.3,w.merge(y);const T=new THREE.BoxGeometry(.5,.8,.8);T.translate(.25,-1,0),T.vertices[4].x+=.1,T.vertices[5].x+=.1,T.vertices[2].z-=.3,T.vertices[3].z+=.3,T.vertices[6].x+=.3,T.vertices[6].z+=.3,T.vertices[7].x+=.3,T.vertices[7].z-=.3,w.merge(T),w.rotateY(-.5),w.translate(.45,0,.7),w.scale(.5,.5,.5);for(u=0;u<w.faces.length;u++)w.faces[u].materialIndex=2;t.mergeMesh(new THREE.Mesh(w));for(u=0;u<w.faces.length;u++)w.faces[u].materialIndex=8;t.mergeMesh(new THREE.Mesh(w));const v=new THREE.Geometry,R=new THREE.BoxGeometry(.5,.4,.5);R.translate(.64,.6,0),R.vertices[0].y-=.1,R.vertices[0].z+=.1,R.vertices[0].x-=.2,R.vertices[1].y-=.08,R.vertices[1].z+=.3,R.vertices[1].x-=.1,R.vertices[2].z+=.1,R.vertices[2].x-=.05,R.vertices[2].y+=.1,R.vertices[3].y+=.2,R.vertices[3].z+=.4,R.vertices[3].x+=.2,R.vertices[4].x-=.04,R.vertices[5].x-=.04,v.merge(R);const H=new THREE.BoxGeometry(.5,.3,.3);H.translate(1.14,.6,.3),H.vertices[0].y+=.25,H.vertices[0].z-=.1,H.vertices[0].x-=.65,H.vertices[1].y+=.25,H.vertices[1].z+=.05,H.vertices[1].x-=.5,H.vertices[2].y+=.55,H.vertices[2].z-=.05,H.vertices[2].x-=.55,H.vertices[3].y+=.55,H.vertices[3].z+=.1,H.vertices[3].x-=.4,H.vertices[4].x-=.1,H.vertices[4].z-=.1,H.vertices[4].y-=.03,H.vertices[5].y-=.05,H.vertices[5].z-=.1,H.vertices[5].x-=.2,H.vertices[6].x+=.2,H.vertices[6].y+=.15,H.vertices[6].z+=0,H.vertices[7].x-=.05,H.vertices[7].z-=.1,H.vertices[7].y+=.05,v.merge(H);const d=new THREE.BoxGeometry(1,.4,.5);d.translate(-.85,.6,0),d.vertices[5].y-=.8,d.vertices[5].z-=.1,d.vertices[4].y-=.8,d.vertices[4].z+=.1,d.vertices[7].y-=.5,d.vertices[7].z-=.1,d.vertices[6].y-=.5,d.vertices[6].z+=.1,d.vertices[3].x-=.04,d.vertices[2].x-=.04,v.merge(d);const h=new THREE.SphereGeometry(.35,32,32);h.translate(0,1.3,0),v.merge(h),v.rotateY(-.5),v.translate(.45,0,.7),v.scale(.5,.5,.5);let x=Math.ceil(3),G=Math.floor(5),M=Math.floor(Math.random()*(G-x))+x;for(u=0;u<v.faces.length;u++)v.faces[u].materialIndex=M;t.mergeMesh(new THREE.Mesh(v));for(u=0;u<v.faces.length;u++)v.faces[u].materialIndex=8;t.mergeMesh(new THREE.Mesh(v));const f=new THREE.CylinderGeometry(.4,.4,.1,8);f.translate(.75,.25,-.55),f.rotateZ(1.25),f.rotateY(.75),f.rotateX(.5);for(u=0;u<f.faces.length;u++)f.faces[u].materialIndex=0;t.mergeMesh(new THREE.Mesh(f));for(u=0;u<f.faces.length;u++)f.faces[u].materialIndex=8;t.mergeMesh(new THREE.Mesh(f));const B=new THREE.CylinderGeometry(.05,.05,2.4,32);B.translate(-.7,.05,.02),B.scale(.5,.5,.5);for(u=0;u<B.faces.length;u++)B.faces[u].materialIndex=1;t.mergeMesh(new THREE.Mesh(B));for(var u=0;u<B.faces.length;u++)B.faces[u].materialIndex=8;t.mergeMesh(new THREE.Mesh(B));let p=new THREE.Mesh(t,r);p.castShadow=!0,p.position.set(-1,1.2,-1),scene.add(p),flaggers.push(p);const z=p.clone(!0);z.position.set(1,1.2,-1),scene.add(z),flaggers.push(z)}function signArray(e,t){const r=signs[e].indexOf(t.value);-1!==r&&signs[e].splice(r,1),t.checked&&signs[e].unshift(t.value)}function signSpace(e,t,r){const s=new THREE.Group,n=Number(document.getElementById("sign-"+t).value)/200,a=signs[t];let o,c=r-n;for(let r=0;r<a.length&&c>=-22;r++){const n=new THREE.CylinderGeometry(.8,.8,.1,4);switch(n.rotateX(1.5),n.rotateZ(1.6),a[r]){case"worker":o=new THREE.Mesh(n,[safetyOrange,workerSignMaterial,safetyOrange]);break;case"flagger":o=new THREE.Mesh(n,[safetyOrange,flaggerSignMaterial,safetyOrange]);break;case"fAhead":o=new THREE.Mesh(n,[safetyOrange,flagAheadSignMaterial,safetyOrange]);break;case"men":o=new THREE.Mesh(n,[safetyOrange,menWorkSignMaterial,safetyOrange]);break;case"stop":o=new THREE.Mesh(n,[safetyOrange,prepareStopSignMaterial,safetyOrange]);break;case"lane":o=new THREE.Mesh(n,[safetyOrange,oneLaneSignMaterial,safetyOrange]);break;default:o=new THREE.Mesh(n,[safetyOrange,workAheadSignMaterial,safetyOrange])}o.position.set(c,3,4+.5*t),s.add(o);const m=new THREE.CylinderGeometry(1,1,.1,4);m.rotateX(1.5),m.rotateZ(1.6);const l=new THREE.Mesh(m,e);l.position.set(c+.01,3,4+.5*t),s.add(l);const E=new THREE.CylinderGeometry(.05,.05,2,32),i=new THREE.Mesh(E,e);i.position.set(c+.01,1.2,4+.5*t),s.add(i),console.log(4+t/.5),c-=2}s.name="signGroup-"+t,scene.add(s)}function test(e,t){scene.getObjectByName(e)&&scene.remove(scene.getObjectByName(e)),scene.getObjectByName("signGroup-"+e)&&scene.remove(scene.getObjectByName("signGroup-"+e));const r=new THREE.Mesh(coneGeometry,t),s=new THREE.Mesh(coneGeometry,shadows);s.scale.set(1.05,1.05,1.05),r.castShadow=!0;const n=new THREE.Group,a=stripe.clone();n.add(r),n.add(a);let o;const c=new THREE.Group,m=new THREE.Group;switch(e){case 1:o=0;break;case 2:o=-.5;break;case 3:o=-1.5;break;case 4:o=-2;break;case 5:o=-2.5;break;case 6:o=-3}const l=Number(document.getElementById("buffer-"+e).value);n.position.set(o,.75,.5),c.add(n),s.position.set(o,.75,.5),m.add(s);let E=o,i=1+l/100,g=l/50/i;for(;Math.abs(E-g)<=Math.abs(l/50)-o&&Math.abs(E)<=23;){const e=n.clone(),t=s.clone();t.position.set(E,.75,.5),m.add(t),E-=g,e.position.set(E,.75,.5),c.add(e)}const w=Number(document.getElementById("upstream-"+e).value);g=w/50/(i=2+w/100);let y=3/i+.5;for(let e=1;e<=i;e++){const e=n.clone();E-=g,e.position.set(E,.75,y);const t=s.clone();t.position.set(E,.75,y),m.add(t),y+=3/i,c.add(e)}switch(signSpace(t,e,E),e){case 1:o=10;break;case 2:o=10.5;break;case 3:o=11;break;case 4:o=11.5;break;case 5:o=12;break;case 6:o=12.5}const T=Number(document.getElementById("downstream-"+e).value);for(E=o,g=T/50/(i=2+T/100),y=.5;Math.abs(E)<=T/50+o&&Math.abs(E)<=21.5;){const e=n.clone();e.position.set(E,.75,y);const t=s.clone();t.position.set(E,.75,y),m.add(t),y+=3/i,E+=g,c.add(e)}c.name=e,m.name=e,scene.add(c),scene.add(m),slide("group-"+e),flagger(t)}let scene,camera,controls,renderer,ambient,sun;const objects=[],flaggers=[],raycaster=new THREE.Raycaster,mouse=new THREE.Vector2,offset=new THREE.Vector3,intersection=new THREE.Vector3;let selected=null,hovered=null;const road=new THREE.MeshLambertMaterial({color:8881006}),lines=new THREE.LineBasicMaterial({color:16777215}),divider=new THREE.MeshLambertMaterial({color:16777094}),grass=new THREE.MeshLambertMaterial({color:7850391}),treeTall=new THREE.MeshLambertMaterial({color:6472082}),shadows=new THREE.ShadowMaterial({opacity:.3}),windowColor=new THREE.MeshLambertMaterial({color:13688291,transparent:!0,opacity:.5}),brick=new THREE.MeshLambertMaterial({color:11161680}),stone=new THREE.MeshLambertMaterial({color:15061673}),truckMaterial=new THREE.MeshLambertMaterial({color:15697223}),foundation=new THREE.MeshLambertMaterial({color:16051951}),couchFabric=new THREE.MeshLambertMaterial({color:6521956}),blueFabric=new THREE.MeshLambertMaterial({color:6192795}),purpleFabric=new THREE.MeshLambertMaterial({color:8412302}),tanFabric=new THREE.MeshLambertMaterial({color:15253920}),skinTone1=new THREE.MeshLambertMaterial({color:9262372}),skinTone2=new THREE.MeshLambertMaterial({color:13010498}),skinTone3=new THREE.MeshLambertMaterial({color:15843965}),skinTone4=new THREE.MeshLambertMaterial({color:16767916}),red=new THREE.MeshLambertMaterial({color:16283254}),green=new THREE.MeshLambertMaterial({color:7915401}),blue=new THREE.MeshLambertMaterial({color:2275554}),orange=new THREE.MeshLambertMaterial({color:16167729}),safetyOrange=new THREE.MeshLambertMaterial({color:16742656}),yellow=new THREE.MeshLambertMaterial({color:16636748}),purple=new THREE.MeshLambertMaterial({color:12029393}),white=new THREE.MeshLambertMaterial({color:16777215}),offwhite=new THREE.MeshLambertMaterial({color:15921906}),gray=new THREE.MeshLambertMaterial({color:5592405}),palegray=new THREE.MeshLambertMaterial({color:10855845}),jean=new THREE.MeshLambertMaterial({color:4287405}),workerSign=(new THREE.TextureLoader).load("images/sign-01.png"),workerSignMaterial=new THREE.MeshBasicMaterial({map:workerSign}),flaggerSign=(new THREE.TextureLoader).load("images/sign-02.png"),flaggerSignMaterial=new THREE.MeshBasicMaterial({map:flaggerSign}),flagAheadSign=(new THREE.TextureLoader).load("images/sign-03.png"),flagAheadSignMaterial=new THREE.MeshBasicMaterial({map:flagAheadSign}),menWorkSign=(new THREE.TextureLoader).load("images/sign-04.png"),menWorkSignMaterial=new THREE.MeshBasicMaterial({map:menWorkSign}),prepareStopSign=(new THREE.TextureLoader).load("images/sign-05.png"),prepareStopSignMaterial=new THREE.MeshBasicMaterial({map:prepareStopSign}),oneLaneSign=(new THREE.TextureLoader).load("images/sign-06.png"),oneLaneSignMaterial=new THREE.MeshBasicMaterial({map:oneLaneSign}),workAheadSign=(new THREE.TextureLoader).load("images/sign-07.png"),workAheadSignMaterial=new THREE.MeshBasicMaterial({map:workAheadSign}),tallTree=new THREE.Geometry,tallCone=new THREE.ConeGeometry(1.68,4,32);tallCone.translate(0,1.35,0),tallTree.merge(tallCone);const tallSphere=new THREE.SphereGeometry(1.8,60,60);tallSphere.translate(0,-1.3,0),tallTree.merge(tallSphere);const shortTree=tallTree.clone();shortTree.scale(.5,.5,.5);const coreGeometry=new THREE.CylinderGeometry(.07,.2,.5,32,.8,!1,.8),coneBottomG=new THREE.BoxGeometry(.5,.06,.5);coneBottomG.translate(0,-.23,0);const coneGeometry=new THREE.Geometry;coneGeometry.merge(coreGeometry),coneGeometry.merge(coneBottomG);const stripeGeometry=new THREE.CylinderGeometry(.116,.155,.15,32,1,!1,.8),stripe=new THREE.Mesh(stripeGeometry,white);init(),animate();let showing="none";const signs=[[],[],[],[],[],[],[]];
//# sourceMappingURL=../app/maps/main.min.js.map
