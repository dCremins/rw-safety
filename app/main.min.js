function init(){scene=new THREE.Scene,initRoad(),initTrees(),initShop(),initApartment(),initBench(),initBackHoe(),initTruck(),initWorkers(),initCamera(),initLights(),initRender()}function initCamera(){(camera=new THREE.PerspectiveCamera(60,(window.innerWidth-100)/(window.innerHeight-50),1,100)).position.set(0,23,20),camera.lookAt(0,0,0)}function initLights(){ambient=new THREE.HemisphereLight(14610162,6708333,1.2),(sun=new THREE.SpotLight(16571508,.2)).position.set(-50,40,-5),sun.castShadow=!0,sun.shadow.camera.left=-10,sun.shadow.camera.right=10,sun.shadow.camera.top=10,sun.shadow.camera.bottom=-10,sun.shadow.camera.near=.1,sun.shadow.camera.far=1e3,sun.shadow.mapSize.width=2048,sun.shadow.mapSize.height=2048,scene.add(ambient),scene.add(sun)}function initRender(){(renderer=new THREE.WebGLRenderer({antialias:!0})).setSize(window.innerWidth-100,window.innerHeight),console.log(window.innerWidth-100,", ",window.innerHeight),renderer.setClearColor(16777215,1),renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap;const e=document.getElementById("container");e.appendChild(renderer.domElement),controls=new THREE.OrbitControls(camera,renderer.domElement),e.addEventListener("mousemove",onDocumentMouseMove,!1),e.addEventListener("mouseup",onDocumentMouseCancel,!1),e.addEventListener("mousedown",onDocumentMouseDown,!1),e.addEventListener("touchmove",onDocumentTouchMove,!1),e.addEventListener("touchstart",onDocumentTouchStart,!1),e.addEventListener("touchend",onDocumentTouchEnd,!1)}function initRoad(){const e=new THREE.BoxGeometry(45,1,10),t=new THREE.Mesh(e,grass);t.position.set(0,0,-9),scene.add(t);const r=new THREE.BoxGeometry(45,1,8),s=new THREE.Mesh(r,road);s.position.set(0,0,0),scene.add(s);let n=new THREE.Geometry;n.vertices.push(new THREE.Vector3(-22.5,.51,-3.7),new THREE.Vector3(22.5,.51,-3.7));const a=new THREE.Line(n,lines);scene.add(a),(n=new THREE.Geometry).vertices.push(new THREE.Vector3(-22.5,.51,3.7),new THREE.Vector3(22.5,.51,3.7));const o=new THREE.Line(n,lines);scene.add(o);const c=new THREE.BoxGeometry(45,1,7),E=new THREE.Mesh(c,grass);E.position.set(0,0,7.5),scene.add(E);const m=new THREE.BoxGeometry(1,.1,.2),i=new THREE.Mesh(m,divider);i.position.set(0,.5,0),scene.add(i);for(let e=22;e>=23;e-=2){const t=i.clone();t.position.set(e,.5,0),scene.add(t)}const l=new THREE.BoxGeometry(45,1,25),w=new THREE.Mesh(l,shadows);w.position.set(0,.05,-1.5),w.receiveShadow=!0,scene.add(w),objects.push(w);const g=new THREE.Mesh(coneGeometry,gray);g.castShadow=!0;const T=new THREE.Group;T.add(g),T.add(stripe),T.position.set(0,.75,.5),scene.add(T);for(let e=1.5;e<10;e+=1.5){const t=T.clone();t.position.set(e,.75,.5),scene.add(t)}}function initTrees(){const e=new THREE.Geometry,t=new THREE.Geometry,r=new THREE.ConeGeometry(1.68,4,32);r.translate(0,1.35,0),t.merge(r);const s=new THREE.SphereGeometry(1.8,60,60);s.translate(0,-1.3,0),t.merge(s),t.translate(-18,3,-10.5),e.merge(t),t.translate(7,0,18.5),e.merge(t);const n=t.clone();n.scale(.5,.5,.5),n.translate(0,.2,-12),e.merge(n),n.translate(17.5,0,14),e.merge(n),n.translate(4.5,0,-16.5),e.merge(n);const a=new THREE.Mesh(e,treeTall);a.castShadow=!0,scene.add(a);const o=new THREE.Mesh(e,shadows);o.receiveShadow=!0,scene.add(o)}function initShop(){const e=new THREE.Group,t=new THREE.Geometry,r=new THREE.Geometry,s=new THREE.BoxGeometry(10,1,5);t.merge(s);const n=new THREE.BoxGeometry(2,.5,.5);n.translate(0,.25,2.75),t.merge(n);const a=new THREE.BoxGeometry(2,.5,1);a.translate(0,-.25,3),t.merge(a);const o=t.clone();r.merge(o);let c=new THREE.Mesh(t,foundation);c.castShadow=!0,e.add(c);const E=new THREE.BoxGeometry(9.75,4.9,.125);E.translate(0,3,2.4);const m=new THREE.Mesh(E,windowColor);e.add(m);const i=new THREE.Geometry,l=new THREE.BoxGeometry(4,1,.75);l.translate(-3,1,2.125),i.merge(l),l.translate(6,0,0),i.merge(l);const w=new THREE.BoxGeometry(10,2,.75);w.translate(0,5,2.12),i.merge(w);const g=new THREE.BoxGeometry(1,5.5,3.25);g.translate(-4.5,3.25,.126),i.merge(g),g.translate(9,0,0),i.merge(g);const T=new THREE.BoxGeometry(1,2.5,.5);T.translate(-1.5,2.75,2.25),i.merge(T),T.translate(3,0,0),i.merge(T);const d=new THREE.BoxGeometry(10,5.5,1);d.translate(0,3.25,-2),i.merge(d);const R=new THREE.BoxGeometry(8,1,3.25);R.translate(0,5.5,.125),i.merge(R);const H=i.clone();r.merge(H),(c=new THREE.Mesh(i,stone)).castShadow=!0,e.add(c);const y=new THREE.Geometry,v=new THREE.BoxGeometry(3,1.5,1);v.translate(0,1.25,0);const h=v.clone();y.merge(h);const u=new THREE.Mesh(v,stone);e.add(u);const x=new THREE.BoxGeometry(.5,.1,3);x.translate(3.75,2,0);const G=new THREE.BoxGeometry(.5,.1,3);G.translate(3.75,3,0),x.merge(G),G.translate(0,1,0),x.merge(G),G.translate(-7.5,0,0),x.merge(G),G.translate(0,-1,0),x.merge(G),G.translate(0,-1,0),x.merge(G);const p=x.clone();y.merge(p);const M=new THREE.Mesh(x,stone);e.add(M);const B=new THREE.BoxGeometry(.7,.75,.2);B.translate(3.75,3.45,0);const f=new THREE.BoxGeometry(.7,.75,.2);f.translate(3.75,3.45,1),B.merge(f),f.translate(0,1,-1.5),B.merge(f),f.translate(0,-2,-.5),B.merge(f),f.translate(0,0,.75),B.merge(f),f.translate(0,0,1),B.merge(f),f.translate(-7.5,0,0),B.merge(f),f.translate(0,0,-1.5),B.merge(f),f.translate(0,1,.5),B.merge(f),f.translate(0,0,.75),B.merge(f),f.translate(0,1,.25),B.merge(f),f.translate(0,0,-.75),B.merge(f),f.translate(0,0,-.5),B.merge(f);const b=new THREE.BoxGeometry(.7,.75,.2);b.translate(-3.5,1.87,2.25),B.merge(b);const z=B.clone();y.merge(z);const S=new THREE.Mesh(B,red);S.castShadow=!0,e.add(S);const F=new THREE.Geometry,k=new THREE.BoxGeometry(.7,.75,.2);k.translate(3.75,3.45,1.2),F.merge(k),k.translate(0,1,-1.5),F.merge(k),k.translate(0,-2,-.5),F.merge(k),k.translate(0,0,.75),F.merge(k),k.translate(0,0,1),F.merge(k),k.translate(-7.5,0,0),F.merge(k),k.translate(0,0,-1.5),F.merge(k),k.translate(0,1,.5),F.merge(k),k.translate(0,0,.75),F.merge(k),k.translate(0,1,.25),F.merge(k),k.translate(0,0,-.75),F.merge(k),k.translate(0,0,-.5),F.merge(k);const C=new THREE.BoxGeometry(.7,.75,.2);C.translate(-2.5,1.87,2.25),F.merge(C);const L=F.clone();y.merge(L);const O=new THREE.Mesh(F,blue);O.castShadow=!0,e.add(O);const j=new THREE.Geometry,A=new THREE.BoxGeometry(.7,.75,.2);A.translate(3.75,3.45,1.4),j.merge(A),A.translate(0,1,-1.5),j.merge(A),A.translate(0,-2,-.5),j.merge(A),A.translate(0,0,.75),j.merge(A),A.translate(0,0,1),j.merge(A),A.translate(-7.5,0,0),j.merge(A),A.translate(0,0,-1.5),j.merge(A),A.translate(0,1,.5),j.merge(A),A.translate(0,0,.75),j.merge(A),A.translate(0,1,.25),j.merge(A),A.translate(0,0,-.75),j.merge(A),A.translate(0,0,-1.5),j.merge(A),A.translate(7.5,0,2),j.merge(A),A.translate(0,-1,-1.75),j.merge(A);const V=j.clone();y.merge(V);const D=new THREE.Mesh(j,purple);D.castShadow=!0,e.add(D);const N=new THREE.Geometry,Y=new THREE.BoxGeometry(.7,.75,.2);Y.translate(3.75,3.45,.6),N.merge(Y),Y.translate(0,0,-1),N.merge(Y),Y.translate(0,1,-.75),N.merge(Y),Y.translate(0,0,1.5),N.merge(Y),Y.translate(0,0,.75),N.merge(Y),Y.translate(-7.5,-1,-1.75),N.merge(Y),Y.translate(0,-1,-.5),N.merge(Y),Y.translate(0,0,1.5),N.merge(Y);const I=new THREE.BoxGeometry(.7,.75,.2);I.translate(3.5,1.87,2.25),N.merge(I);const W=N.clone();y.merge(W);const X=new THREE.Mesh(N,orange);X.castShadow=!0,e.add(X);const Z=new THREE.Mesh(y,shadows);Z.receiveShadow=!0,e.add(Z);const P=new THREE.Geometry,q=new THREE.BoxGeometry(1.1,1.25,2);q.translate(-4.4,5.25,3.5),q.vertices[0].y-=.9,q.vertices[5].y-=.9,P.merge(q),q.translate(2.2,0,0),P.merge(q),q.translate(2.2,0,0),P.merge(q),q.translate(2.2,0,0),P.merge(q),q.translate(2.2,0,0),P.merge(q);const J=P.clone();r.merge(J);const K=new THREE.Mesh(P,offwhite);K.castShadow=!0;const Q=new THREE.Geometry,U=new THREE.BoxGeometry(1.1,1.25,2);U.translate(-3.3,5.25,3.5),U.vertices[0].y-=.9,U.vertices[5].y-=.9,Q.merge(U),U.translate(2.2,0,0),Q.merge(U),U.translate(2.2,0,0),Q.merge(U),U.translate(2.2,0,0),Q.merge(U);const $=Q.clone();r.merge($);const _=new THREE.Mesh(Q,blue);_.castShadow=!0,e.add(K),e.add(_);const ee=new THREE.Mesh(r,shadows);ee.receiveShadow=!0,e.add(ee),e.position.set(8,1,-8),scene.add(e)}function initApartment(){const e=new THREE.Group,t=new THREE.Geometry,r=new THREE.BoxGeometry(8,.5,8),s=new THREE.BoxGeometry(8.25,.25,8.25);s.translate(0,-.125,0),r.merge(s);const n=r.clone(!0);t.merge(n);const a=new THREE.Mesh(r,foundation);a.castShadow=!0,e.add(a);const o=new THREE.Geometry,c=new THREE.BoxGeometry(.5,10,1);c.translate(-3.5,5.25,3.25),o.merge(c),c.translate(0,0,-2.125),o.merge(c),c.translate(0,0,-2.125),o.merge(c),c.translate(0,0,-2.125),o.merge(c),c.translate(7,0,0),o.merge(c),c.translate(0,0,2.125),o.merge(c),c.translate(0,0,2.125),o.merge(c),c.translate(0,0,2.125),o.merge(c);const E=new THREE.BoxGeometry(1,10,.5);E.translate(-1.5,5.25,-3.375),o.merge(E),E.translate(3,0,0),o.merge(E),E.translate(0,0,6.875),o.merge(E),E.translate(-3,0,0),o.merge(E);const m=new THREE.BoxGeometry(1.25,3.5,.5);m.translate(-2.625,2,3.5),o.merge(m),m.translate(5.25,0,0),o.merge(m),m.translate(0,0,-6.875),o.merge(m),m.translate(-5.25,0,0),o.merge(m);let i=new THREE.BoxGeometry(1.25,1.75,.5);i.translate(-2.625,6.25,3.5),o.merge(i),i.translate(0,3.125,0),o.merge(i),i.translate(5.25,0,0),o.merge(i),i.translate(0,-3.125,0),o.merge(i),i.translate(0,0,-6.875),o.merge(i),i.translate(0,3.125,0),o.merge(i),i.translate(-5.25,0,0),o.merge(i),i.translate(0,-3.125,0),o.merge(i),(i=new THREE.BoxGeometry(2,7.5,.5)).translate(0,6.5,3.5),o.merge(i),(i=new THREE.BoxGeometry(2,10,.5)).translate(0,5.25,-3.375),o.merge(i);let l=new THREE.BoxGeometry(.5,3.5,1.15);l.translate(-3.5,2,2.19),o.merge(l),l.translate(0,0,-2.125),o.merge(l),l.translate(0,0,-2.125),o.merge(l),l.translate(7,0,0),o.merge(l),l.translate(0,0,2.125),o.merge(l),l.translate(0,0,2.125),o.merge(l),(l=new THREE.BoxGeometry(.5,1.75,1.15)).translate(-3.5,6.25,2.19),o.merge(l),l.translate(0,0,-2.125),o.merge(l),l.translate(0,0,-2.125),o.merge(l),l.translate(7,0,0),o.merge(l),l.translate(0,0,2.125),o.merge(l),l.translate(0,0,2.125),o.merge(l),l.translate(0,3.125,0),o.merge(l),l.translate(0,0,-2.125),o.merge(l),l.translate(0,0,-2.125),o.merge(l),l.translate(-7,0,0),o.merge(l),l.translate(0,0,2.125),o.merge(l),l.translate(0,0,2.125),o.merge(l);const w=new THREE.BoxGeometry(6.5,.25,6.5);w.translate(0,3,0),o.merge(w),w.translate(0,3.5,0),o.merge(w),w.translate(0,3.63,0),o.merge(w);const g=new THREE.BoxGeometry(.25,7.25,6.5);g.translate(0,6.67,0),o.merge(g);const T=new THREE.Geometry;let d=new THREE.BoxGeometry(7,9.5,.1);d.translate(0,5,3.5),T.merge(d),d.translate(0,0,-7),T.merge(d),(d=new THREE.BoxGeometry(.1,9.5,7)).translate(3.5,5,0),T.merge(d),d.translate(-7,0,0),T.merge(d);const R=new THREE.Mesh(T,windowColor);e.add(R);const H=new THREE.Geometry,y=new THREE.BoxGeometry(.25,.5,7.375);y.translate(-3.88,10.5,.05),H.merge(y),y.translate(7.76,0,0),H.merge(y);const v=new THREE.BoxGeometry(8.01,.5,.25);v.translate(0,10.5,3.86),H.merge(v),v.translate(0,0,-7.6),H.merge(v);const h=new THREE.Geometry,u=new THREE.BoxGeometry(1.5,.1,.1);u.translate(-2.6,7.125,3.8),h.merge(u),u.translate(0,0,-7.475),h.merge(u);let x=new THREE.BoxGeometry(1.22,.1,.5);x.translate(-2.62,7.125,3.5),h.merge(x),x.translate(0,0,-6.875),h.merge(x),H.merge(h),h.translate(5.25,0,0),H.merge(h),h.translate(0,-3.375,0),H.merge(h),h.translate(-5.25,0,0),H.merge(h);const G=new THREE.Geometry;let p=new THREE.BoxGeometry(1.375,.1,.1);p.translate(-2.6,8.5,3.8),G.merge(p),p.translate(0,0,-7.475),G.merge(p);let M=new THREE.BoxGeometry(1.25,.1,.1);M.translate(-2.625,7.75,3.55),G.merge(M),M.translate(0,0,-7.1),G.merge(M),H.merge(G),G.translate(5.25,0,0),H.merge(G),G.translate(0,-3.12,0),H.merge(G),G.translate(-5.25,0,0),H.merge(G);const B=new THREE.Geometry,f=new THREE.BoxGeometry(.1,.1,1.375);f.translate(3.8,8.5,2.175),B.merge(f),f.translate(-7.6,0,0),B.merge(f),(x=new THREE.BoxGeometry(.1,.1,1.25)).translate(3.55,7.75,2.175),B.merge(x),x.translate(-7.1,0,0),B.merge(x),H.merge(B),B.translate(0,0,-2.125),H.merge(B),B.translate(0,0,-2.125),H.merge(B),B.translate(0,-3.125,0),H.merge(B),B.translate(0,0,2.125),H.merge(B),B.translate(0,0,2.125),H.merge(B);const b=new THREE.Geometry;(p=new THREE.BoxGeometry(.1,.1,1.5)).translate(3.8,7.1,2.175),b.merge(p),p.translate(-7.6,0,0),b.merge(p),(M=new THREE.BoxGeometry(.5,.1,1.22)).translate(3.51,7.1,2.175),b.merge(M),M.translate(-7.02,0,0),b.merge(M),H.merge(b),b.translate(0,0,-2.125),H.merge(b),b.translate(0,0,-2.125),H.merge(b),b.translate(0,-3.37,0),H.merge(b),b.translate(0,0,2.125),H.merge(b),b.translate(0,0,2.125),H.merge(b);const z=new THREE.BoxGeometry(2.5,.25,.2);z.translate(0,2.87,3.75),H.merge(z);const S=new THREE.BoxGeometry(.1,2.5,.1);S.translate(-1,1.5,3.75),H.merge(S),S.translate(1,0,0),H.merge(S),S.translate(1,0,0),H.merge(S);const F=H.clone(!0);t.merge(F);const k=new THREE.Mesh(H,foundation);k.castShadow=!0,e.add(k);const C=o.clone(!0);t.merge(C);const L=new THREE.Mesh(o,brick);L.castShadow=!0,e.add(L);const O=new THREE.Mesh(t,shadows);O.receiveShadow=!0,e.add(O);const j=new THREE.Group,A=new THREE.Geometry,V=new THREE.Geometry,D=new THREE.BoxGeometry(.75,.25,1.65);D.translate(-1,6.75,-.01),V.merge(D);const N=new THREE.BoxGeometry(.25,.75,1.65);N.translate(-.5,7,-.01),V.merge(N);const Y=new THREE.BoxGeometry(1,.5,.25);Y.translate(-.87,6.87,.92),V.merge(Y),Y.translate(0,0,-1.84),V.merge(Y);const I=new THREE.BoxGeometry(.75,.15,.5);I.translate(-1,6.86,0),V.merge(I),I.translate(0,0,-.52),V.merge(I),I.translate(0,0,1.04),V.merge(I),V.rotateY(1.25),V.translate(-1.25,0,-3);let W=V.clone(!0);A.merge(W);const X=new THREE.Mesh(V,couchFabric);X.castShadow=!0,j.add(X);const Z=V.clone(!0);Z.rotateY(2),Z.translate(2.5,0,-1),W=Z.clone(!0),A.merge(W);const P=new THREE.Mesh(Z,blueFabric);P.castShadow=!0,j.add(P);const q=V.clone(!0);q.rotateY(-1),q.translate(1.5,-3.5,1),W=q.clone(!0),A.merge(W);const J=new THREE.Mesh(q,purpleFabric);J.castShadow=!0,j.add(J);const K=V.clone(!0);K.rotateY(3.5),K.translate(-3.75,-3.5,.5),W=K.clone(!0),A.merge(W);const Q=new THREE.Mesh(K,tanFabric);Q.castShadow=!0,j.add(Q);const U=new THREE.Group,$=new THREE.BoxGeometry(2,.1,1);$.translate(-1.5,3.7,-2);const _=new THREE.BoxGeometry(2,.5,.1);_.translate(-1.5,3.5,-1.5),$.merge(_),_.translate(0,0,-1),$.merge(_);const ee=new THREE.BoxGeometry(.1,.5,1.1);ee.translate(-.5,3.5,-2),$.merge(ee),$.rotateY(-1.55),$.translate(-3,0,0);let te=$.clone(!0);A.merge(te);const re=new THREE.Mesh($,blueFabric);re.castShadow=!0,U.add(re);const se=$.clone();se.rotateY(1.55),se.translate(3.5,0,1),te=se.clone(!0),A.merge(te);const ne=new THREE.Mesh(se,couchFabric);U.add(ne);const ae=$.clone();ae.rotateY(1.55),ae.translate(3.5,3.5,-3),te=ae.clone(!0),A.merge(te);const oe=new THREE.Mesh(ae,purpleFabric);U.add(oe);const ce=$.clone();ce.rotateY(3.14),ce.translate(-2.05,3.5,-.5),te=ce.clone(!0),A.merge(te);const Ee=new THREE.Mesh(ce,blueFabric);U.add(Ee);const me=new THREE.BoxGeometry(2.5,.45,1);me.rotateY(-1.55),me.translate(-1.02,3.475,-1.75);let ie=me.clone(!0);A.merge(ie);const le=new THREE.Mesh(me,tanFabric);U.add(le);const we=me.clone();we.rotateY(1.55),we.translate(3.3,0,1),ie=we.clone(!0),A.merge(ie);const ge=new THREE.Mesh(we,tanFabric);U.add(ge);const Te=me.clone();Te.rotateY(1.55),Te.translate(3.3,3.5,-3),ie=Te.clone(!0),A.merge(ie);const de=new THREE.Mesh(Te,tanFabric);U.add(de);const Re=me.clone();Re.translate(0,3.5,3),ie=Re.clone(!0),A.merge(ie);const He=new THREE.Mesh(Re,tanFabric);U.add(He),j.add(U);const ye=new THREE.Geometry;let ve=new THREE.BoxGeometry(3,1,.1);ve.translate(0,1,-.5),ye.merge(ve),(ve=new THREE.BoxGeometry(.1,1,1)).translate(1.45,1,-1),ye.merge(ve),ve.translate(-2.9,0,0),ye.merge(ve),(ve=new THREE.BoxGeometry(3.2,.1,1.2)).translate(0,1.55,-1),ye.merge(ve),(ve=new THREE.BoxGeometry(3.1,.1,1.1)).translate(0,1.65,-1),ye.merge(ve);const he=ye.clone(!0);A.merge(he);const ue=new THREE.Mesh(ye,stone);j.add(ue);const xe=new THREE.Mesh(A,shadows);xe.receiveShadow=!0,e.add(xe),e.add(j),e.position.set(-11,.75,-9),scene.add(e)}function initBench(){const e=new THREE.Group,t=new THREE.Geometry,r=new THREE.BoxGeometry(2,.1,1);t.merge(r);const s=new THREE.BoxGeometry(2,.8,.1);s.translate(0,.8,-.55),t.merge(s),t.scale(.8,.8,.8);const n=new THREE.Mesh(t,orange);n.castShadow=!0,e.add(n);const a=new THREE.Geometry;let o=new THREE.BoxGeometry(.1,1.8,.1);o.translate(-1.05,.4,-.55),a.merge(o),o.translate(2.1,0,0),a.merge(o),(o=new THREE.BoxGeometry(.1,.6,.1)).translate(-1.05,-.25,.55),a.merge(o),o.translate(2.1,0,0),a.merge(o),(o=new THREE.BoxGeometry(.1,.1,1)).translate(-1.05,0,0),a.merge(o),o.translate(2.1,0,0),a.merge(o),(o=new THREE.BoxGeometry(2,.1,.1)).translate(0,0,.55),a.merge(o),o.translate(0,0,-1.1),a.merge(o),o.translate(0,.35,0),a.merge(o),o.translate(0,.9,0),a.merge(o),a.scale(.8,.8,.8);const c=new THREE.Mesh(a,gray);c.castShadow=!0,e.add(c);const E=new THREE.Geometry,m=t.clone();E.merge(m);const i=a.clone();E.merge(i);const l=new THREE.Mesh(E,shadows);e.add(l);const w=new THREE.Geometry;let g=new THREE.BoxGeometry(.3,.4,.5);g.translate(.55,.1,.5),g.vertices[4].x+=.1,g.vertices[6].x+=.1,g.vertices[0].x-=.2,g.vertices[2].x-=.2,g.vertices[0].y+=.3,g.vertices[2].y+=.4,g.vertices[4].y+=.3,g.vertices[5].y+=.3,g.vertices[6].y+=.3,g.vertices[7].y+=.4,w.merge(g),(g=new THREE.BoxGeometry(.3,.4,.5)).translate(-.55,.1,.5),g.vertices[1].x-=.1,g.vertices[3].x-=.1,g.vertices[5].x+=.2,g.vertices[7].x+=.2,g.vertices[5].y+=.3,g.vertices[7].y+=.4,g.vertices[1].y+=.3,g.vertices[0].y+=.3,g.vertices[3].y+=.3,g.vertices[2].y+=.4,w.merge(g);const T=new THREE.SphereGeometry(.35,32,32);T.translate(0,1.3,0),w.merge(T),w.scale(.5,.5,.5),w.translate(0,.56,0);const d=new THREE.Mesh(w,skinTone3);e.add(d);const R=new THREE.BoxGeometry(1,1.4,.8);R.translate(0,.1,0),R.vertices[0].z-=.15,R.vertices[0].x-=.15,R.vertices[1].z+=.15,R.vertices[1].x-=.15,R.vertices[4].z+=.15,R.vertices[4].x+=.15,R.vertices[5].z-=.15,R.vertices[5].x+=.15;const H=new THREE.BoxGeometry(.3,.5,.5);H.translate(.55,.55,0),H.vertices[4].x-=.05,H.vertices[5].x-=.05,H.vertices[0].y-=.5,H.vertices[1].y-=.5,H.vertices[2].y-=.4,H.vertices[3].y-=.4,H.vertices[1].z+=.1,H.vertices[3].z+=.1,R.merge(H),(g=new THREE.BoxGeometry(.3,.5,.5)).translate(-.55,.55,0),g.vertices[1].x+=.05,g.vertices[0].x+=.05,g.vertices[5].y-=.5,g.vertices[4].y-=.5,g.vertices[7].y-=.4,g.vertices[6].y-=.4,g.vertices[4].z+=.1,g.vertices[6].z+=.1,R.merge(g),R.scale(.5,.5,.5),R.translate(0,.56,0);const y=new THREE.Mesh(R,gray);e.add(y);const v=new THREE.BoxGeometry(.5,.5,.8);v.translate(-.25,-.8,0),v.vertices[3].z+=.2,v.vertices[6].z+=.2;let h=new THREE.BoxGeometry(.5,.5,.8);h.translate(-.25,-.8,.8),h.vertices[0].x-=.1,h.vertices[2].x-=.1,h.vertices[5].x+=.1,h.vertices[7].x+=.1,h.vertices[0].y-=.2,h.vertices[5].y-=.2,v.merge(h),(h=new THREE.BoxGeometry(.5,.5,.8)).translate(.25,-.8,0),h.vertices[3].z+=.2,h.vertices[6].z+=.2,v.merge(h),(h=new THREE.BoxGeometry(.5,.5,.8)).translate(.25,-.8,.8),h.vertices[0].x-=.1,h.vertices[2].x-=.1,h.vertices[5].x+=.1,h.vertices[7].x+=.1,h.vertices[0].y-=.2,h.vertices[5].y-=.2,v.merge(h),v.scale(.5,.5,.5),v.translate(0,.56,0);const u=new THREE.Mesh(v,blue);e.add(u);const x=new THREE.BoxGeometry(.25,.3,.02);x.translate(-.05,.75,.35),x.rotateY(-.2);const G=new THREE.BoxGeometry(.25,.3,.02);G.translate(.05,.75,.35),G.rotateY(.2),x.merge(G);let p=new THREE.Mesh(x,red);e.add(p);const M=new THREE.BoxGeometry(.25,.3,.05);M.translate(-.05,.75,.32),M.rotateY(-.2);const B=new THREE.BoxGeometry(.25,.3,.05);B.translate(.05,.75,.32),B.rotateY(.2),M.merge(B),p=new THREE.Mesh(M,offwhite),e.add(p);const f=new THREE.Geometry,b=w.clone(!0);f.merge(b);const z=M.clone(!0);f.merge(z);const S=R.clone(!0);S.scale(1.01,1.01,1.01),f.merge(S);const F=v.clone(!0);F.scale(1.01,1.01,1.01),f.merge(F);const k=x.clone(!0);f.merge(k);const C=new THREE.Mesh(f,shadows);e.add(C),e.position.set(0,.95,-7),scene.add(e)}function initBackHoe(){const e=new THREE.Group,t=new THREE.Geometry,r=new THREE.Geometry,s=new THREE.BoxGeometry(4,.5,1.2);s.translate(.75,.25,-.5),r.merge(s);const n=new THREE.BoxGeometry(.5,.5,1.2);n.translate(-1,1,-.5),n.vertices[4].y-=.5,n.vertices[5].y-=.5,r.merge(n);const a=new THREE.BoxGeometry(.25,.5,1.2);a.translate(-.63,1,-.5),r.merge(a);const o=new THREE.BoxGeometry(2.5,.25,1.2);o.translate(0,.625,-.5),r.merge(o);const c=new THREE.BoxGeometry(1.9,.1,1.3);c.translate(.4,2.3,-.5),r.merge(c);const E=new THREE.BoxGeometry(.75,.5,.25);E.translate(2.55,.25,.25),E.vertices[4].x-=.5,E.vertices[5].x-=.5,E.vertices[0].y+=.55,E.vertices[1].y+=.55,E.vertices[0].x-=.4,E.vertices[1].x-=.4,E.vertices[2].y+=1,E.vertices[3].y+=1,E.vertices[6].y+=.5,E.vertices[7].y+=.5,E.vertices[6].x+=.2,E.vertices[7].x+=.2,r.merge(E),E.translate(0,0,-1.5),r.merge(E);const m=new THREE.BoxGeometry(1,.25,.3);m.translate(3.025,1.18,.25),m.vertices[4].x+=.35,m.vertices[5].x+=.35,m.vertices[0].y-=.3,m.vertices[1].y-=.3,m.vertices[2].y-=.5,m.vertices[3].y-=.5,r.merge(m),m.translate(0,0,-1.5),r.merge(m);const i=new THREE.BoxGeometry(.75,.45,.3);i.translate(3.9,.78,.25),i.vertices[0].y-=.5,i.vertices[1].y-=.5,i.vertices[0].x+=.2,i.vertices[1].x+=.2,i.vertices[2].y-=.5,i.vertices[3].y-=.5,r.merge(i),i.translate(0,0,-1.5),r.merge(i);const l=r.clone(!0);t.merge(l);const w=new THREE.Mesh(r,truckMaterial);w.castShadow=!0,e.add(w);const g=new THREE.Geometry;g.vertices.push(new THREE.Vector3(-.5,2.25,0)),g.vertices.push(new THREE.Vector3(1.25,2.25,0)),g.vertices.push(new THREE.Vector3(2.25,.75,0)),g.vertices.push(new THREE.Vector3(2.25,.5,0)),g.vertices.push(new THREE.Vector3(1.25,.5,0)),g.vertices.push(new THREE.Vector3(1.25,.75,0)),g.vertices.push(new THREE.Vector3(-.5,.75,0)),g.vertices.push(new THREE.Vector3(-.5,2.25,-1)),g.vertices.push(new THREE.Vector3(1.25,2.25,-1)),g.vertices.push(new THREE.Vector3(2.25,.75,-1)),g.vertices.push(new THREE.Vector3(2.25,.5,-1)),g.vertices.push(new THREE.Vector3(1.25,.5,-1)),g.vertices.push(new THREE.Vector3(1.25,.75,-1)),g.vertices.push(new THREE.Vector3(-.5,.75,-1)),g.faces.push(new THREE.Face3(6,1,0)),g.faces.push(new THREE.Face3(1,6,5)),g.faces.push(new THREE.Face3(5,2,1)),g.faces.push(new THREE.Face3(2,5,3)),g.faces.push(new THREE.Face3(4,3,5)),g.faces.push(new THREE.Face3(6,0,1)),g.faces.push(new THREE.Face3(1,5,6)),g.faces.push(new THREE.Face3(5,1,2)),g.faces.push(new THREE.Face3(2,3,5)),g.faces.push(new THREE.Face3(4,5,3)),g.faces.push(new THREE.Face3(13,8,7)),g.faces.push(new THREE.Face3(8,13,12)),g.faces.push(new THREE.Face3(12,9,8)),g.faces.push(new THREE.Face3(9,12,10)),g.faces.push(new THREE.Face3(11,10,12)),g.faces.push(new THREE.Face3(13,7,8)),g.faces.push(new THREE.Face3(8,12,13)),g.faces.push(new THREE.Face3(12,8,9)),g.faces.push(new THREE.Face3(9,10,12)),g.faces.push(new THREE.Face3(11,12,10)),g.faces.push(new THREE.Face3(0,8,7)),g.faces.push(new THREE.Face3(8,0,1)),g.faces.push(new THREE.Face3(8,1,2)),g.faces.push(new THREE.Face3(8,2,9)),g.faces.push(new THREE.Face3(2,3,9)),g.faces.push(new THREE.Face3(9,3,10)),g.faces.push(new THREE.Face3(11,10,4)),g.faces.push(new THREE.Face3(10,3,4)),g.faces.push(new THREE.Face3(5,12,4)),g.faces.push(new THREE.Face3(12,11,4)),g.faces.push(new THREE.Face3(13,12,6)),g.faces.push(new THREE.Face3(12,5,6)),g.faces.push(new THREE.Face3(0,7,6)),g.faces.push(new THREE.Face3(7,13,6)),g.computeFaceNormals();const T=new THREE.Mesh(g,windowColor);e.add(T);const d=new THREE.Geometry;let R=new THREE.BoxGeometry(.1,1.5,.1);R.translate(-.45,1.5,.05),d.merge(R),R.translate(.55,0,0),d.merge(R),R.translate(0,0,-1.1),d.merge(R),R.translate(-.55,0,0),d.merge(R),(R=new THREE.BoxGeometry(.05,1.5,.1)).translate(1.23,1.5,.05),d.merge(R),R.translate(0,0,-1.1),d.merge(R);const H=new THREE.BoxGeometry(.05,1.75,.1);H.translate(1.28,1.375,.05),H.vertices[0].y-=.05,H.vertices[1].y-=.05,d.merge(H),H.translate(0,0,-1.1),d.merge(H);const y=new THREE.BoxGeometry(.1,.25,.1);y.translate(2.3,.625,.05),y.vertices[0].y-=.05,y.vertices[1].y-=.05,d.merge(y),y.translate(0,0,-1.1),d.merge(y);let v=new THREE.BoxGeometry(1.75,.1,.1);v.translate(.375,2.2,.05),d.merge(v),v.translate(0,0,-1.1),d.merge(v),(v=new THREE.BoxGeometry(1,.1,.1)).translate(1.75,.55,.05),d.merge(v),v.translate(0,0,-1.1),d.merge(v),(v=new THREE.BoxGeometry(1.75,.5,.1)).translate(.4,1,.05),d.merge(v),v.translate(0,0,-1.1),d.merge(v);const h=new THREE.BoxGeometry(.01,.2,1);h.translate(-.496,1.3,-.5),d.merge(h),h.translate(0,.9,0),d.merge(h);const u=new THREE.BoxGeometry(1.045,.1,.1);u.translate(1.825,2.155,.05),u.vertices[0].y-=1.5,u.vertices[1].y-=1.5,u.vertices[2].y-=1.5,u.vertices[3].y-=1.5,d.merge(u),u.translate(0,0,-1.1),d.merge(u);const x=new THREE.BoxGeometry(.1,.1,1);x.translate(2.3,.55,-.5),d.merge(x);const G=d.clone(!0);t.merge(G);const p=new THREE.Mesh(d,gray);p.castShadow=!0,e.add(p);const M=new THREE.Geometry,B=new THREE.BoxGeometry(.4,.1,.4);B.translate(.7,.75,-.5),M.merge(B);const f=new THREE.BoxGeometry(.1,.7,.4);f.translate(.45,1.05,-.5),M.merge(f);const b=new THREE.CylinderGeometry(.2,.2,.05,32);b.translate(1.5,-.75,-.5),b.rotateZ(1.2),M.merge(b);const z=new THREE.BoxGeometry(.95,.24,.98);z.translate(1.75,.65,-.5),M.merge(z);const S=new THREE.BoxGeometry(.95,.5,.98);S.translate(1.75,1,-.5),S.vertices[0].x-=.4,S.vertices[1].x-=.4,M.merge(S);const F=new THREE.Mesh(M,gray);F.castShadow=!0,e.add(F);const k=new THREE.Shape;k.moveTo(0,.75),k.bezierCurveTo(0,1.75,1.5,1.75,1.5,.75),k.lineTo(1.125,.75),k.bezierCurveTo(1.125,1.25,.375,1.25,.375,.75),k.bezierCurveTo(.375,.35,1.125,.35,1.125,.75),k.lineTo(1.5,.75),k.bezierCurveTo(1.5,-.125,0,-.125,0,.75);const C=new THREE.Group,L=new THREE.Geometry,O=new THREE.ExtrudeGeometry(k,{amount:.5,steps:50,bevelEnabled:!1,curveSegments:8});O.translate(-1,-1,0),L.merge(O),O.translate(0,0,-1.5),L.merge(O),O.translate(3.2,0,0),L.merge(O),O.translate(0,0,1.5),L.merge(O);const j=new THREE.CylinderGeometry(.15,.15,.3,6);j.rotateX(1.6),j.translate(-.25,-.2,.3),L.merge(j),j.translate(0,0,-1.5),L.merge(j),j.translate(3.2,0,0),L.merge(j),j.translate(0,0,1.5),L.merge(j);let A=new THREE.BoxGeometry(.2,.2,1.5);A.translate(-1.25,0,-.5),L.merge(A),(A=new THREE.BoxGeometry(.32,.2,1.5)).translate(-1.19,-.2,-.5),L.merge(A),(A=new THREE.BoxGeometry(1.25,.2,1.5)).translate(1.25,-.2,-.5),L.merge(A),(A=new THREE.BoxGeometry(.2,.2,.9)).translate(2.75,-.2,-.45),L.merge(A);const V=new THREE.BoxGeometry(.05,.2,.5);V.translate(-1.25,.3,-.5),L.merge(V);let D=new THREE.BoxGeometry(.5,.2,2);D.rotateZ(.2),D.translate(4.825,.7,-.5),L.merge(D),(D=new THREE.BoxGeometry(1,.2,2)).rotateZ(1.15),D.translate(4.45,.25,-.5),L.merge(D),(D=new THREE.BoxGeometry(1,.2,2)).rotateZ(-.7),D.translate(4.61,-.42,-.5),L.merge(D),(D=new THREE.BoxGeometry(.75,.2,2)).translate(5.3,-.717,-.5),L.merge(D),(D=new THREE.BoxGeometry(.5,.25,.2)).translate(4.839,.53,.4),D.vertices[6].y+=.2,D.vertices[7].y+=.2,D.vertices[2].y+=.1,D.vertices[3].y+=.1,D.vertices[2].x-=.15,D.vertices[3].x-=.15,L.merge(D),D.translate(0,0,-1.8),L.merge(D),(D=new THREE.BoxGeometry(.75,.25,.2)).translate(5.3,-.5,.4),D.vertices[4].x+=.2,D.vertices[5].x+=.2,D.vertices[0].y-=.2,D.vertices[1].y-=.2,L.merge(D),D.translate(0,0,-1.8),L.merge(D),(D=new THREE.BoxGeometry(.75,.75,.2)).translate(4.75,.25,.4),D.vertices[2].x+=.1,D.vertices[3].x+=.1,D.vertices[4].x+=.2,D.vertices[5].x+=.2,D.vertices[0].x-=.23,D.vertices[1].x-=.23,D.vertices[0].y+=.02,D.vertices[1].y+=.02,L.merge(D),D.translate(0,0,-1.8),L.merge(D),(D=new THREE.BoxGeometry(.5,.5,.2)).translate(4.875,-.375,.4),D.vertices[0].x+=.1,D.vertices[1].x+=.1,D.vertices[2].x+=.3,D.vertices[3].x+=.3,D.vertices[4].x-=.25,D.vertices[5].x-=.25,D.vertices[6].x+=.05,D.vertices[7].x+=.05,D.vertices[6].y+=.05,D.vertices[7].y+=.05,L.merge(D),D.translate(0,0,-1.8),L.merge(D);const N=L.clone(!0);t.merge(N);const Y=new THREE.Mesh(L,gray);Y.castShadow=!0,C.add(Y);const I=new THREE.Geometry,W=new THREE.TorusGeometry(.34,.1,4,50,6.3);W.translate(-.25,-.213,.415),I.merge(W),W.translate(0,0,-1.825),I.merge(W),W.translate(3.2,0,0),I.merge(W),W.translate(0,0,1.825),I.merge(W);const X=new THREE.CylinderGeometry(.5,.5,.3,32);X.translate(-.25,.2,.25),X.rotateX(1.6),I.merge(X),X.translate(0,0,-1.3),I.merge(X),X.translate(3.25,0,0),I.merge(X),X.translate(0,0,1.3),I.merge(X);const Z=I.clone(!0);t.merge(Z);const P=new THREE.Mesh(I,truckMaterial);P.castShadow=!0,C.add(P),e.add(C);const q=new THREE.Mesh(t,shadows);e.add(q),e.position.set(2.5,1.4,2.8),scene.add(e)}function initTruck(){const e=new THREE.Group,t=new THREE.Geometry,r=new THREE.Geometry,s=new THREE.BoxGeometry(1,.8,1.3);s.translate(-.6,0,0),r.merge(s);const n=new THREE.BoxGeometry(.1,.8,1.3);n.translate(.52,.25,0),r.merge(n);const a=new THREE.BoxGeometry(.1,.7,.3);a.translate(.52,.85,.5),r.merge(a),a.translate(0,0,-1),r.merge(a);const o=new THREE.BoxGeometry(.8,.1,1.3);o.translate(.17,1.15,0),o.vertices[6].x-=.05,o.vertices[7].x-=.05,r.merge(o);const c=new THREE.BoxGeometry(.1,1,.1);c.translate(-.6,.52,-.6),c.rotateZ(-.4),r.merge(c),c.translate(0,0,1.2),r.merge(c);const E=new THREE.BoxGeometry(1,.8,1.29);E.vertices[4].x+=.26,E.vertices[5].x+=.26,E.vertices[6].x-=.035,E.vertices[7].x-=.035,E.vertices[0].y+=2.2,E.vertices[1].y+=2.2,E.vertices[2].y+=2.3,E.vertices[3].y+=2.3,E.vertices[4].y+=2.2,E.vertices[5].y+=2.2,E.vertices[6].y+=2.3,E.vertices[7].y+=2.3;const m=new THREE.Mesh(E,windowColor);e.add(m);const i=new THREE.BoxGeometry(3.2,.3,1.3);i.translate(.9,-.31,0),r.merge(i);const l=new THREE.BoxGeometry(2.68,.6,.1);l.translate(1.15,.1,.6),r.merge(l),l.translate(0,0,-1.2),r.merge(l);const w=new THREE.BoxGeometry(.1,.6,1.3);w.translate(2.45,.1,0),r.merge(w),r.translate(0,1.5,0);const g=r.clone(!0);t.merge(g);const T=new THREE.Mesh(r,offwhite);T.castShadow=!0,e.add(T);const d=new THREE.Geometry,R=new THREE.BoxGeometry(.4,.1,.4);R.translate(.25,1.6,.3),d.merge(R),R.translate(0,0,-.6),d.merge(R);const H=new THREE.BoxGeometry(.1,.7,.4);H.translate(.45,1.8,.3),d.merge(H),H.translate(0,0,-.6),d.merge(H);const y=new THREE.CylinderGeometry(.2,.2,.05,32);y.translate(-1.9,.65,.3),y.rotateZ(-1.2),d.merge(y);const v=d.clone(!0);t.merge(v);const h=new THREE.Mesh(d,gray);e.add(h);const u=new THREE.Geometry,x=new THREE.BoxGeometry(.4,.1,1.4);x.translate(-.95,1.05,0),x.vertices[2].x+=.01,x.vertices[3].x+=.01,u.merge(x);const G=new THREE.BoxGeometry(1.1,.1,1.4);G.translate(.7,1.05,0),G.vertices[2].x+=.01,G.vertices[3].x+=.01,G.vertices[6].x-=.01,G.vertices[7].x-=.01,u.merge(G);const p=new THREE.BoxGeometry(.4,.1,1.4);p.translate(2.35,1.05,0),p.vertices[6].x-=.01,p.vertices[7].x-=.01,u.merge(p);const M=u.clone(!0);t.merge(M);const B=new THREE.Mesh(u,palegray);e.add(B);const f=new THREE.Geometry,b=new THREE.CylinderGeometry(.45,.45,.2,32);b.translate(-.3,.55,-1.1),b.rotateX(1.6),f.merge(b),b.translate(0,0,-1.2),f.merge(b),b.translate(2,0,1.2),f.merge(b),b.translate(0,0,-1.2),f.merge(b);const z=new THREE.BoxGeometry(.01,.7,1.2);z.translate(-1.1,1.5,0),f.merge(z);const S=new THREE.BoxGeometry(.05,.2,.5);S.translate(2.5,1.25,0),f.merge(S);const F=f.clone(!0);t.merge(F);const k=new THREE.Mesh(f,gray);k.castShadow=!0,e.add(k);const C=new THREE.Geometry,L=new THREE.TorusGeometry(.25,.1,3,199);L.translate(-.3,1.09,.63),C.merge(L),L.translate(0,0,-1.3),C.merge(L),L.translate(2,0,1.3),C.merge(L),L.translate(0,0,-1.3),C.merge(L);const O=C.clone(!0);t.merge(O);const j=new THREE.Mesh(C,offwhite);e.add(j);const A=new THREE.Geometry,V=new THREE.BoxGeometry(.1,.1,.1);V.translate(2.5,1.25,.45),A.merge(V),V.translate(0,0,-.9),A.merge(V);const D=A.clone(!0);t.merge(D);const N=new THREE.Mesh(A,red);e.add(N);const Y=new THREE.BoxGeometry(.1,.05,.5);Y.translate(.2,2.72,0);const I=Y.clone(!0);t.merge(I);const W=new THREE.Mesh(Y,orange);W.castShadow=!0,e.add(W);const X=new THREE.Mesh(t,shadows);e.add(X),e.position.set(0,0,7),e.rotation.y+=.5,e.scale.set(.9,.9,.9),scene.add(e)}function initWorkers(){const e=new THREE.Group,t=new THREE.Group,r=new THREE.Group,s=new THREE.Geometry,n=new THREE.Geometry,a=new THREE.Geometry,o=new THREE.Geometry,c=new THREE.BoxGeometry(1,.4,.5);c.translate(.85,.6,0),c.vertices[0].y-=.75,c.vertices[1].y-=.75,c.vertices[2].y-=.5,c.vertices[3].y-=.5,c.vertices[0].x-=.5,c.vertices[1].x-=.5,c.vertices[2].x-=.5,c.vertices[3].x-=.5,c.vertices[0].z-=.15,c.vertices[1].z+=.15,c.vertices[2].z-=.15,c.vertices[3].z+=.15,o.merge(c);const E=new THREE.BoxGeometry(1,.4,.5);E.translate(-.85,.6,0),E.vertices[5].y+=.3,E.vertices[4].y+=.3,E.vertices[7].y+=.55,E.vertices[6].y+=.55,E.vertices[5].x+=.8,E.vertices[4].x+=.8,E.vertices[7].x+=.8,E.vertices[6].x+=.8,E.vertices[5].z+=.9,E.vertices[4].z+=1.05,E.vertices[7].z+=.9,E.vertices[6].z+=1.05,o.merge(E);const m=new THREE.SphereGeometry(.35,32,32);m.translate(0,1.3,0),o.merge(m);const i=new THREE.Mesh(o,skinTone2);i.castShadow=!0,i.geometry.scale(.5,.5,.5);const l=o.clone(!0);s.merge(l),e.add(i);const w=new THREE.BoxGeometry(1,1.4,.8);w.translate(0,.1,0),w.vertices[0].z-=.15,w.vertices[0].x-=.15,w.vertices[1].z+=.15,w.vertices[1].x-=.15,w.vertices[4].z+=.15,w.vertices[4].x+=.15,w.vertices[5].z-=.15,w.vertices[5].x+=.15;const g=new THREE.Mesh(w,palegray);g.castShadow=!0,g.geometry.scale(.5,.5,.5);const T=w.clone(!0);s.merge(T),e.add(g);const d=new THREE.BoxGeometry(.5,.8,.8);d.translate(-.25,-1,0),d.vertices[0].x-=.1,d.vertices[1].x-=.1,d.vertices[2].x-=.3,d.vertices[2].z-=.3,d.vertices[3].x-=.3,d.vertices[3].z+=.3,d.vertices[6].z+=.3,d.vertices[7].z-=.3;const R=new THREE.BoxGeometry(.5,.8,.8);R.translate(.25,-1,0),R.vertices[4].x+=.1,R.vertices[5].x+=.1,R.vertices[2].z-=.3,R.vertices[3].z+=.3,R.vertices[6].x+=.3,R.vertices[6].z+=.3,R.vertices[7].x+=.3,R.vertices[7].z-=.3,d.merge(R);const H=new THREE.Mesh(d,jean);H.castShadow=!0,H.geometry.scale(.5,.5,.5);const y=d.clone(!0);s.merge(y),e.add(H);const v=new THREE.Geometry,h=c.clone();v.merge(h);const u=new THREE.BoxGeometry(1,.4,.5);u.translate(-.85,.6,0),u.vertices[5].y-=.75,u.vertices[4].y-=.75,u.vertices[7].y-=.5,u.vertices[6].y-=.5,u.vertices[5].x+=.5,u.vertices[4].x+=.5,u.vertices[7].x+=.5,u.vertices[6].x+=.5,u.vertices[5].z-=.15,u.vertices[4].z+=.15,u.vertices[7].z-=.15,u.vertices[6].z+=.15,v.merge(u);const x=new THREE.SphereGeometry(.35,32,32);x.translate(0,1.3,0),v.merge(x);const G=new THREE.Mesh(v,skinTone4);G.castShadow=!0,G.geometry.scale(.5,.5,.5),t.add(G);const p=new THREE.Mesh(w,palegray);p.castShadow=!0;const M=w.clone(!0);n.merge(M),t.add(p);const B=new THREE.Mesh(d,jean);B.castShadow=!0;const f=d.clone(!0);n.merge(f),t.add(B);const b=new THREE.Geometry,z=new THREE.BoxGeometry(1,.4,.5);z.translate(.85,.6,0),z.vertices[0].y-=.45,z.vertices[1].y-=.45,z.vertices[2].y-=.2,z.vertices[3].y-=.2,z.vertices[0].x-=.5,z.vertices[1].x-=.5,z.vertices[2].x-=.5,z.vertices[3].x-=.5,z.vertices[0].z+=.45,z.vertices[1].z+=.85,z.vertices[2].z+=.45,z.vertices[3].z+=.85,b.merge(z);const S=new THREE.BoxGeometry(1,.4,.5);S.translate(-.85,.6,0),S.vertices[5].y-=.45,S.vertices[4].y-=.45,S.vertices[7].y-=.2,S.vertices[6].y-=.2,S.vertices[5].x+=.5,S.vertices[4].x+=.5,S.vertices[7].x+=.5,S.vertices[6].x+=.5,S.vertices[5].z+=.45,S.vertices[4].z+=.85,S.vertices[7].z+=.45,S.vertices[6].z+=.85,b.merge(S);const F=new THREE.SphereGeometry(.35,32,32);F.translate(0,1.3,0),b.merge(F);const k=new THREE.Mesh(b,skinTone1);k.castShadow=!0,k.geometry.scale(.5,.5,.5),r.add(k);const C=new THREE.Mesh(w,palegray);C.castShadow=!0;const L=w.clone(!0);a.merge(L),r.add(C);const O=new THREE.Mesh(d,jean);O.castShadow=!0;const j=d.clone(!0);a.merge(j),r.add(O);const A=new THREE.Geometry,V=new THREE.SphereGeometry(.2,32,32,1,6.3,0,1.5);V.translate(0,.7,0),A.merge(V);const D=new THREE.CylinderGeometry(.2,.2,.02,32);D.translate(0,.72,.1),A.merge(D);const N=new THREE.Mesh(A,truckMaterial);N.castShadow=!0;const Y=N.clone(),I=N.clone(),W=new THREE.Geometry,X=new THREE.BoxGeometry(.2,.5,.4);X.translate(-.13,.17,0),X.vertices[0].z-=.05,X.vertices[1].z+=.05,X.vertices[4].z+=.05,X.vertices[4].x+=.05,X.vertices[5].z-=.05,X.vertices[5].x+=.05,W.merge(X);const Z=new THREE.BoxGeometry(.2,.5,.4);Z.translate(.13,.17,0),Z.vertices[5].z-=.05,Z.vertices[4].z+=.05,Z.vertices[1].z+=.05,Z.vertices[1].x-=.05,Z.vertices[0].z-=.05,Z.vertices[0].x-=.05,W.merge(Z);const P=new THREE.BoxGeometry(.2,.5,.025);P.translate(0,.17,-.1875),P.vertices[0].z+=.05,P.vertices[1].z+=.05,P.vertices[4].z+=.05,P.vertices[5].z+=.05,W.merge(P);let q=new THREE.Mesh(W,truckMaterial);q.castShadow=!0;const J=new THREE.Geometry,K=new THREE.BoxGeometry(.05,.5,.001);K.translate(-.11,.17,.201),K.vertices[0].z-=.05,K.vertices[1].z-=.05,K.vertices[4].z-=.05,K.vertices[5].z-=.05,J.merge(K),K.translate(.22,0,0),J.merge(K);const Q=new THREE.BoxGeometry(.05,.5,.001);Q.translate(-.11,.17,-.201),Q.vertices[0].z+=.05,Q.vertices[1].z+=.05,Q.vertices[4].z+=.05,Q.vertices[5].z+=.05,J.merge(Q),Q.translate(.22,0,0),J.merge(Q);const U=new THREE.BoxGeometry(.05,.001,.3);U.translate(-.11,.42,0),J.merge(U),U.translate(.22,0,0),J.merge(U);const $=new THREE.BoxGeometry(.2,.2,.001);$.translate(-.13,.02,.201),$.vertices[4].x+=.02,$.vertices[5].x+=.02,$.vertices[0].z-=.02,$.vertices[1].z-=.02,$.vertices[4].z-=.02,$.vertices[5].z-=.02,J.merge($);const _=new THREE.BoxGeometry(.2,.2,.001);_.translate(.13,.02,.201),_.vertices[0].x-=.02,_.vertices[1].x-=.02,_.vertices[0].z-=.02,_.vertices[1].z-=.02,_.vertices[4].z-=.02,_.vertices[5].z-=.02,J.merge(_);const ee=new THREE.BoxGeometry(.001,.2,.4);ee.translate(-.23,.02,0),ee.vertices[0].x+=.02,ee.vertices[1].x+=.02,ee.vertices[4].x+=.02,ee.vertices[5].x+=.02,ee.vertices[0].z-=.02,ee.vertices[1].z+=.02,ee.vertices[4].z+=.02,ee.vertices[5].z-=.02,J.merge(ee);const te=new THREE.BoxGeometry(.001,.2,.4);te.translate(.23,.02,0),te.vertices[0].x-=.02,te.vertices[1].x-=.02,te.vertices[4].x-=.02,te.vertices[5].x-=.02,te.vertices[0].z-=.02,te.vertices[1].z+=.02,te.vertices[4].z+=.02,te.vertices[5].z-=.02,J.merge(te);const re=new THREE.BoxGeometry(.45,.2,.001);re.translate(0,.02,-.201),re.vertices[0].x-=.02,re.vertices[1].x-=.02,re.vertices[4].x+=.02,re.vertices[5].x+=.02,re.vertices[0].z+=.02,re.vertices[1].z+=.02,re.vertices[4].z+=.02,re.vertices[5].z+=.02,J.merge(re);const se=new THREE.Mesh(J,yellow);(q=new THREE.Mesh(W,truckMaterial)).add(se);const ne=q.clone(),ae=q.clone(),oe=new THREE.BoxGeometry(.8,.6,.025);oe.translate(0,.3,.25),oe.rotateX(.4);const ce=new THREE.Mesh(oe,white);ce.castShadow=!0,e.add(N),e.add(q);const Ee=new THREE.Mesh(s,shadows);e.add(Ee),e.position.set(2.7,1.2,6.5),e.rotation.y-=1,scene.add(e),t.add(Y),t.add(ne);const me=new THREE.Mesh(n,shadows);t.add(me),t.position.set(5.6,1.2,6.3),t.rotation.y+=.8,scene.add(t),r.add(I),r.add(ae),r.add(ce);const ie=new THREE.Mesh(a,shadows);r.add(ie),r.position.set(7,1.2,6.4),r.rotation.y-=.6,scene.add(r)}function render(){scene.position.set(0,0,3),renderer.render(scene,camera)}function animate(){requestAnimationFrame(animate),render(),controls.update()}function slide(e){switch(showing){case e:document.getElementById(e).removeAttribute("style"),document.getElementsByClassName(e)[0].removeAttribute("style");break;case"group-1":document.getElementById("group-1").removeAttribute("style"),document.getElementsByClassName("group-1")[0].removeAttribute("style");break;case"group-2":document.getElementById("group-2").removeAttribute("style"),document.getElementsByClassName("group-2")[0].removeAttribute("style");break;case"group-3":document.getElementById("group-3").removeAttribute("style"),document.getElementsByClassName("group-3")[0].removeAttribute("style");break;case"group-4":document.getElementById("group-4").removeAttribute("style"),document.getElementsByClassName("group-4")[0].removeAttribute("style");break;case"group-5":document.getElementById("group-5").removeAttribute("style"),document.getElementsByClassName("group-5")[0].removeAttribute("style");break;case"group-6":document.getElementById("group-6").removeAttribute("style"),document.getElementsByClassName("group-6")[0].removeAttribute("style")}showing===e?showing="none":(document.getElementsByClassName(e)[0].style.backgroundColor="#666",document.getElementById(e).style.width="300px",showing=e)}function onDocumentMouseMove(e){e.preventDefault();const t=renderer.domElement.getBoundingClientRect();mouse.x=(e.clientX-t.left)/t.width*2-1,mouse.y=-(e.clientY-t.top)/t.height*2+1,raycaster.setFromCamera(mouse,camera),selected&&raycaster.intersectObjects(objects)&&(selected.position.set(0,1,0),selected.position.set(raycaster.intersectObjects(objects)[0].point.x,selected.position.y,raycaster.intersectObjects(objects)[0].point.z-3)),raycaster.setFromCamera(mouse,camera);const r=raycaster.intersectObjects(flaggers);if(r.length>0){const e=r[0].object;hovered!==e&&(renderer.domElement.style.cursor="pointer",hovered=e)}else null!==hovered&&(renderer.domElement.style.cursor="auto",hovered=null)}function onDocumentTouchMove(e){e.preventDefault(),e=e.changedTouches[0];const t=renderer.domElement.getBoundingClientRect();mouse.x=(e.clientX-t.left)/t.width*2-1,mouse.y=-(e.clientY-t.top)/t.height*2+1,raycaster.setFromCamera(mouse,camera),selected&&raycaster.intersectObjects(objects)&&(selected.position.set(0,1,0),selected.position.set(raycaster.intersectObjects(objects)[0].point.x,selected.position.y,raycaster.intersectObjects(objects)[0].point.z))}function onDocumentMouseDown(e){controls.enabled=!1,e.preventDefault(),raycaster.setFromCamera(mouse,camera);const t=raycaster.intersectObjects(flaggers);t.length>0&&(selected=t[0].object,raycaster.intersectObjects(objects)&&offset.copy(intersection).sub(selected.position),renderer.domElement.style.cursor="move")}function onDocumentTouchStart(e){controls.enabled=!1,e.preventDefault(),e=e.changedTouches[0];const t=renderer.domElement.getBoundingClientRect();mouse.x=(e.clientX-t.left)/t.width*2-1,mouse.y=-(e.clientY-t.top)/t.height*2+1,raycaster.setFromCamera(mouse,camera);const r=raycaster.intersectObjects(flaggers);r.length>0&&(selected=r[0].object,raycaster.intersectObjects(objects)&&offset.copy(intersection).sub(selected.position),renderer.domElement.style.cursor="move")}function onDocumentMouseCancel(e){controls.enabled=!0,e.preventDefault(),selected&&(selected=null),renderer.domElement.style.cursor="auto"}function onDocumentTouchEnd(e){controls.enabled=!0,e.preventDefault(),selected&&(selected=null),renderer.domElement.style.cursor="auto"}function flagger(e){const t=new THREE.Geometry,r=new THREE.BoxGeometry(1,1.4,.8);r.translate(0,.1,0),r.vertices[0].z-=.15,r.vertices[0].x-=.15,r.vertices[1].z+=.15,r.vertices[1].x-=.15,r.vertices[4].z+=.15,r.vertices[4].x+=.15,r.vertices[5].z-=.15,r.vertices[5].x+=.15,t.merge(r);const s=new THREE.BoxGeometry(.5,.8,.8);s.translate(-.25,-1,0),s.vertices[0].x-=.1,s.vertices[1].x-=.1,s.vertices[2].x-=.3,s.vertices[2].z-=.3,s.vertices[3].x-=.3,s.vertices[3].z+=.3,s.vertices[6].z+=.3,s.vertices[7].z-=.3,t.merge(s);const n=new THREE.BoxGeometry(.5,.8,.8);n.translate(.25,-1,0),n.vertices[4].x+=.1,n.vertices[5].x+=.1,n.vertices[2].z-=.3,n.vertices[3].z+=.3,n.vertices[6].x+=.3,n.vertices[6].z+=.3,n.vertices[7].x+=.3,n.vertices[7].z-=.3,t.merge(n);const a=new THREE.BoxGeometry(.5,.4,.5);a.translate(.64,.6,0),a.vertices[0].y-=.1,a.vertices[0].z+=.1,a.vertices[0].x-=.2,a.vertices[1].y-=.08,a.vertices[1].z+=.3,a.vertices[1].x-=.1,a.vertices[2].z+=.1,a.vertices[2].x-=.05,a.vertices[2].y+=.1,a.vertices[3].y+=.2,a.vertices[3].z+=.4,a.vertices[3].x+=.2,a.vertices[4].x-=.04,a.vertices[5].x-=.04,t.merge(a);const o=new THREE.BoxGeometry(.5,.3,.3);o.translate(1.14,.6,.3),o.vertices[0].y+=.25,o.vertices[0].z-=.1,o.vertices[0].x-=.65,o.vertices[1].y+=.25,o.vertices[1].z+=.05,o.vertices[1].x-=.5,o.vertices[2].y+=.55,o.vertices[2].z-=.05,o.vertices[2].x-=.55,o.vertices[3].y+=.55,o.vertices[3].z+=.1,o.vertices[3].x-=.4,o.vertices[4].x-=.1,o.vertices[4].z-=.1,o.vertices[4].y-=.03,o.vertices[5].y-=.05,o.vertices[5].z-=.1,o.vertices[5].x-=.2,o.vertices[6].x+=.2,o.vertices[6].y+=.15,o.vertices[6].z+=0,o.vertices[7].x-=.05,o.vertices[7].z-=.1,o.vertices[7].y+=.05,t.merge(o);const c=new THREE.BoxGeometry(1,.4,.5);c.translate(-.85,.6,0),c.vertices[5].y-=.8,c.vertices[5].z-=.1,c.vertices[4].y-=.8,c.vertices[4].z+=.1,c.vertices[7].y-=.5,c.vertices[7].z-=.1,c.vertices[6].y-=.5,c.vertices[6].z+=.1,c.vertices[3].x-=.04,c.vertices[2].x-=.04,t.merge(c);const E=new THREE.SphereGeometry(.35,32,32);E.translate(0,1.3,0),t.merge(E);const m=new THREE.Geometry;m.vertices.push(new THREE.Vector3(0,.15,0));for(let e=0;e<=7;e++){const t=2*e*Math.PI/8;m.vertices.push(new THREE.Vector3(.6*Math.sin(t),.15,.6*Math.cos(t)))}m.vertices.push(new THREE.Vector3(0,0,0));for(let e=7;e>=0;e--){const t=2*e*Math.PI/8;m.vertices.push(new THREE.Vector3(.6*Math.sin(t),0,.6*Math.cos(t)))}m.faces.push(new THREE.Face3(0,1,2)),m.faces.push(new THREE.Face3(0,2,3)),m.faces.push(new THREE.Face3(0,3,4)),m.faces.push(new THREE.Face3(0,4,5)),m.faces.push(new THREE.Face3(0,5,6)),m.faces.push(new THREE.Face3(0,6,7)),m.faces.push(new THREE.Face3(0,7,8)),m.faces.push(new THREE.Face3(0,8,1)),m.faces.push(new THREE.Face3(9,10,11)),m.faces.push(new THREE.Face3(9,11,12)),m.faces.push(new THREE.Face3(9,12,13)),m.faces.push(new THREE.Face3(9,13,14)),m.faces.push(new THREE.Face3(9,14,15)),m.faces.push(new THREE.Face3(9,15,16)),m.faces.push(new THREE.Face3(9,16,17)),m.faces.push(new THREE.Face3(9,17,10)),m.faces.push(new THREE.Face3(5,4,14)),m.faces.push(new THREE.Face3(14,13,5)),m.faces.push(new THREE.Face3(4,3,15)),m.faces.push(new THREE.Face3(15,14,4)),m.faces.push(new THREE.Face3(3,2,16)),m.faces.push(new THREE.Face3(16,15,3)),m.faces.push(new THREE.Face3(2,1,17)),m.faces.push(new THREE.Face3(17,16,2)),m.faces.push(new THREE.Face3(1,8,10)),m.faces.push(new THREE.Face3(10,17,1)),m.faces.push(new THREE.Face3(8,7,11)),m.faces.push(new THREE.Face3(11,10,8)),m.faces.push(new THREE.Face3(7,6,12)),m.faces.push(new THREE.Face3(12,11,7)),m.faces.push(new THREE.Face3(6,5,13)),m.faces.push(new THREE.Face3(13,12,6)),m.computeFaceNormals();const i=new THREE.Mesh(m,safetyOrange);i.position.set(-.68,.9,.02),i.rotation.x+=.4,i.rotation.y+=.6,i.rotation.z+=1.35,i.geometry.scale(.5,.5,.5),scene.add(i);const l=new THREE.CylinderGeometry(.05,.05,2.4,32),w=new THREE.Mesh(l,gray);w.position.set(-.7,.05,.02),w.geometry.scale(.5,.5,.5),scene.add(w);const g=new THREE.Mesh(t,e);g.position.set(0,1.2,-1),g.rotation.y-=1,g.geometry.scale(.5,.5,.5),g.add(i),g.add(w);const T=new THREE.Geometry,d=t.clone();T.merge(d);const R=l.clone();R.translate(-.7,.05,.02),T.merge(R);const H=new THREE.Mesh(T,shadows);H.receiveShadow=!0;const y=new THREE.Mesh(m,shadows);y.position.set(-.68,.9,.02),y.rotation.x+=.4,y.rotation.y+=.6,y.rotation.z+=1.35,H.add(y),g.add(H),scene.add(g),flaggers.push(g);const v=g.clone(!0);v.position.set(1,1.2,-1),scene.add(v),flaggers.push(v)}function signArray(e,t){const r=signs[e].indexOf(t.value);-1!==r&&signs[e].splice(r,1),t.checked&&signs[e].unshift(t.value)}function signSpace(e,t,r){const s=new THREE.Group,n=Number(document.getElementById("sign-"+t).value)/200,a=signs[t];let o,c=r-n;for(let r=0;r<a.length&&c>=-22;r++){const n=new THREE.CylinderGeometry(.8,.8,.1,4);switch(n.rotateX(1.5),n.rotateZ(1.6),a[r]){case"worker":o=new THREE.Mesh(n,[safetyOrange,workerSignMaterial,safetyOrange]);break;case"flagger":o=new THREE.Mesh(n,[safetyOrange,flaggerSignMaterial,safetyOrange]);break;case"fAhead":o=new THREE.Mesh(n,[safetyOrange,flagAheadSignMaterial,safetyOrange]);break;case"men":o=new THREE.Mesh(n,[safetyOrange,menWorkSignMaterial,safetyOrange]);break;case"stop":o=new THREE.Mesh(n,[safetyOrange,prepareStopSignMaterial,safetyOrange]);break;case"lane":o=new THREE.Mesh(n,[safetyOrange,oneLaneSignMaterial,safetyOrange]);break;default:o=new THREE.Mesh(n,[safetyOrange,workAheadSignMaterial,safetyOrange])}o.position.set(c,3,4+.5*t),s.add(o);const E=new THREE.CylinderGeometry(1,1,.1,4);E.rotateX(1.5),E.rotateZ(1.6);const m=new THREE.Mesh(E,e);m.position.set(c+.01,3,4+.5*t),s.add(m);const i=new THREE.CylinderGeometry(.05,.05,2,32),l=new THREE.Mesh(i,e);l.position.set(c+.01,1.2,4+.5*t),s.add(l),console.log(4+t/.5),c-=2}s.name="signGroup-"+t,scene.add(s)}function test(e,t){scene.getObjectByName(e)&&scene.remove(scene.getObjectByName(e)),scene.getObjectByName("signGroup-"+e)&&scene.remove(scene.getObjectByName("signGroup-"+e));const r=new THREE.Mesh(coneGeometry,t),s=new THREE.Mesh(coneGeometry,shadows);s.scale.set(1.05,1.05,1.05),r.castShadow=!0;const n=new THREE.Group,a=stripe.clone();n.add(r),n.add(a);let o;const c=new THREE.Group,E=new THREE.Group;switch(e){case 1:o=0;break;case 2:o=-.5;break;case 3:o=-1.5;break;case 4:o=-2;break;case 5:o=-2.5;break;case 6:o=-3}const m=Number(document.getElementById("buffer-"+e).value);n.position.set(o,.75,.5),c.add(n),s.position.set(o,.75,.5),E.add(s);let i=o,l=1+m/100,w=m/50/l;for(;Math.abs(i-w)<=Math.abs(m/50)-o&&Math.abs(i)<=23;){const e=n.clone(),t=s.clone();t.position.set(i,.75,.5),E.add(t),i-=w,e.position.set(i,.75,.5),c.add(e)}const g=Number(document.getElementById("upstream-"+e).value);w=g/50/(l=2+g/100);let T=3/l+.5;for(let e=1;e<=l;e++){const e=n.clone();i-=w,e.position.set(i,.75,T);const t=s.clone();t.position.set(i,.75,T),E.add(t),T+=3/l,c.add(e)}switch(signSpace(t,e,i),e){case 1:o=10;break;case 2:o=10.5;break;case 3:o=11;break;case 4:o=11.5;break;case 5:o=12;break;case 6:o=12.5}const d=Number(document.getElementById("downstream-"+e).value);for(i=o,w=d/50/(l=2+d/100),T=.5;Math.abs(i)<=d/50+o&&Math.abs(i)<=21.5;){const e=n.clone();e.position.set(i,.75,T);const t=s.clone();t.position.set(i,.75,T),E.add(t),T+=3/l,i+=w,c.add(e)}c.name=e,E.name=e,scene.add(c),scene.add(E),slide("group-"+e),flagger(t)}const THREE=require("three"),OrbitControls=require("three-orbit-controls-loader");OrbitControls(THREE);let scene,camera,controls,renderer,ambient,sun;const objects=[],flaggers=[],raycaster=new THREE.Raycaster,mouse=new THREE.Vector2,offset=new THREE.Vector3,intersection=new THREE.Vector3;let selected=null,hovered=null;const road=new THREE.MeshLambertMaterial({color:8881006}),lines=new THREE.LineBasicMaterial({color:16777215}),divider=new THREE.MeshLambertMaterial({color:16777094}),grass=new THREE.MeshLambertMaterial({color:7850391}),treeTall=new THREE.MeshLambertMaterial({color:6472082}),shadows=new THREE.ShadowMaterial({opacity:.3}),windowColor=new THREE.MeshLambertMaterial({color:13688291,transparent:!0,opacity:.5}),brick=new THREE.MeshLambertMaterial({color:11161680}),stone=new THREE.MeshLambertMaterial({color:15061673}),truckMaterial=new THREE.MeshLambertMaterial({color:15697223}),foundation=new THREE.MeshLambertMaterial({color:16051951}),couchFabric=new THREE.MeshLambertMaterial({color:6521956}),blueFabric=new THREE.MeshLambertMaterial({color:6192795}),purpleFabric=new THREE.MeshLambertMaterial({color:8412302}),tanFabric=new THREE.MeshLambertMaterial({color:15253920}),skinTone1=new THREE.MeshLambertMaterial({color:9262372}),skinTone2=new THREE.MeshLambertMaterial({color:13010498}),skinTone3=new THREE.MeshLambertMaterial({color:15843965}),skinTone4=new THREE.MeshLambertMaterial({color:16767916}),red=new THREE.MeshLambertMaterial({color:16283254}),green=new THREE.MeshLambertMaterial({color:7915401}),blue=new THREE.MeshLambertMaterial({color:2275554}),orange=new THREE.MeshLambertMaterial({color:16167729}),safetyOrange=new THREE.MeshLambertMaterial({color:16742656}),yellow=new THREE.MeshLambertMaterial({color:16636748}),purple=new THREE.MeshLambertMaterial({color:12029393}),white=new THREE.MeshLambertMaterial({color:16777215}),offwhite=new THREE.MeshLambertMaterial({color:15921906}),gray=new THREE.MeshLambertMaterial({color:5592405}),palegray=new THREE.MeshLambertMaterial({color:10855845}),jean=new THREE.MeshLambertMaterial({color:4287405}),workerSign=(new THREE.TextureLoader).load("includes/images/sign-01.png"),workerSignMaterial=new THREE.MeshBasicMaterial({map:workerSign}),flaggerSign=(new THREE.TextureLoader).load("includes/images/sign-02.png"),flaggerSignMaterial=new THREE.MeshBasicMaterial({map:flaggerSign}),flagAheadSign=(new THREE.TextureLoader).load("includes/images/sign-03.png"),flagAheadSignMaterial=new THREE.MeshBasicMaterial({map:flagAheadSign}),menWorkSign=(new THREE.TextureLoader).load("includes/images/sign-04.png"),menWorkSignMaterial=new THREE.MeshBasicMaterial({map:menWorkSign}),prepareStopSign=(new THREE.TextureLoader).load("includes/images/sign-05.png"),prepareStopSignMaterial=new THREE.MeshBasicMaterial({map:prepareStopSign}),oneLaneSign=(new THREE.TextureLoader).load("includes/images/sign-06.png"),oneLaneSignMaterial=new THREE.MeshBasicMaterial({map:oneLaneSign}),workAheadSign=(new THREE.TextureLoader).load("includes/images/sign-07.png"),workAheadSignMaterial=new THREE.MeshBasicMaterial({map:workAheadSign}),tallTree=new THREE.Geometry,tallCone=new THREE.ConeGeometry(1.68,4,32);tallCone.translate(0,1.35,0),tallTree.merge(tallCone);const tallSphere=new THREE.SphereGeometry(1.8,60,60);tallSphere.translate(0,-1.3,0),tallTree.merge(tallSphere);const shortTree=tallTree.clone();shortTree.scale(.5,.5,.5);const coreGeometry=new THREE.CylinderGeometry(.07,.2,.5,32,.8,!1,.8),coneBottomG=new THREE.BoxGeometry(.5,.06,.5);coneBottomG.translate(0,-.23,0);const coneGeometry=new THREE.Geometry;coneGeometry.merge(coreGeometry),coneGeometry.merge(coneBottomG);const stripeGeometry=new THREE.CylinderGeometry(.116,.155,.15,32,1,!1,.8),stripe=new THREE.Mesh(stripeGeometry,white);init(),animate();let showing="none";const signs=[[],[],[],[],[],[],[]];