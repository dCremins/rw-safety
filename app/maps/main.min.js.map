{"version":3,"sources":["init.js","road.js","trees.js","shop.js","apartments.js","bench.js","backhoe.js","truck.js","workers.js","render.js","slider.js","flaggerMove.js","flaggerClick.js","flaggerRelease.js","flagger.js","sign.js","input.js","materials.js"],"names":["init","scene","THREE","Scene","window","initRoad","initTrees","initShop","initApartment","initBench","initBackHoe","initTruck","initWorkers","initCamera","initLights","initRender","camera","PerspectiveCamera","innerWidth","innerHeight","position","set","lookAt","ambient","HemisphereLight","sun","SpotLight","castShadow","shadow","left","right","top","bottom","near","far","mapSize","width","height","add","renderer","WebGLRenderer","antialias","container","document","getElementById","setSize","setClearColor","setPixelRatio","devicePixelRatio","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","domElement","controls","OrbitControls","meshes","Geometry","materials","grass","road","divider","lines","gray","white","shadows","topGeometry","BoxGeometry","translate","j","faces","length","materialIndex","mergeMesh","Mesh","roadGeometry","lineGeometry","vertices","push","Vector3","bottomGeometry","dividerGeometry","dividerLine","merge","i","shadowGeometry","floorShadows","receiveShadow","objects","cone","stripe","coneCore","coneGeometry","clone","stripeCore","stripeGeometry","combinedMesh","trees","tallTree","tallCone","ConeGeometry","tallSphere","SphereGeometry","shortTree","scale","allTrees","treeTall","treeShadows","shop","Group","shopBase","shopShadowGeometry","bottomStair","topStair","shopBaseShadow","building","foundation","glass","windows","windowColor","shopCore","bottomFront","topFront","sides","inner","center","coreShopShadow","stone","insideShadowGeometry","counter","coreCountersShadow","Counters","shelf","shelf2","coreShelvesShadow","shelves","book1","book2","book7","coreRedShadow","redBooks","red","books2","book3","book8","coreBlueShadow","blueBooks","blue","books3","book4","corePurpleShadow","purpleBooks","purple","books4","book5","book6","coreOrangeShadow","orangeBooks","orange","shopInsideShadow","awningA","aA1","y","aShadow","As","offwhite","awningB","aB1","bShadow","Bs","shopShadow","officeShadows","brick","couchFabric","blueFabric","purpleFabric","tanFabric","base","back","backSide","front","side","floor","innerWall","windowSide","cap","found","step","capLeft","capFront","sillBottom","sill1","sill2","sillTop","sill3","sill4","sillTopSide","sill","sillBottomSide","doorSill","doorSillSide","Green","Blue","Purple","Tan","couchSeat","couchBack","armRest","cushion","rotateY","sheets","mattress","mattress2","mattress3","mattress4","lobbyDesk","deskFront","skinTone3","jean","benchGeometry","benchSeat","benchBack","benchMetal","metalSide","benchShadow","coreBenchShadow","metalBenchShadow","body","rightArm","x","head","torso","z","leftArm","pant","leg","flap","flap2","pages","pages2","pedestrianShadows","newBody","newPages","newShirt","newPants","newCover","truckMaterial","shadowHoe","coreGeometry","blockGeometry","backAngle","backSolid","middleSolid","roofSolid","armBase","armLeft","armRight","shadowCoreGeometry","windowGeometry","cabinGeometry","verticalBarGeometry","verticalBarGeometryBig","verticalBarGeometryLittle","horizontalBarGeometry","backBarGeometry","diagonalBarGeometry","frontBarGeometry","shadowCabin","truckSeat","truckSeatButt","truckSeatBack","truckSteering","CylinderGeometry","rotateZ","truckConsole","truckInnerConsole","shape","Shape","moveTo","bezierCurveTo","lineTo","truckRubber","truckTire","ExtrudeGeometry","amount","steps","bevelEnabled","curveSegments","nut","rotateX","truckBumper","truckLicense","Scoop","shadowRubber","truckHub","innerHub","TorusGeometry","flatHub","shadowHub","truck","shadowCopy","core","nose","cabin","cabinSide","roof","shieldRight","windshield","shield","bed","bedSide","bedBack","shadowCore","seat","seatButt","seatBack","steering","shadowSeat","seatPiece","bumperGeometry","frontBumper","middleBumper","backBumper","shadowBumper","bumper","palegray","wheels","wheelGeometry","grill","license","shadowWheel","greys","hubs","hubGeometry","shadowHubs","hubcaps","brakeLights","leftLight","shadowlights","brakes","lightGeometry","shadowlTopLights","light","baseShadow","rotation","worker","worker2","worker3","shadowPerson1","shadowPerson2","shadowPerson3","person","skinTone2","geometry","shadowBody","shirt1","shadowShirt","leftLeg","rightLeg","pants1","shadowPant","body2","rightArm2","leftArm2","head2","person2","skinTone4","shirt2","shadowShirt2","pants2","shadowPant2","body3","rightArm3","leftArm3","head3","person3","skinTone1","shirt3","shadowShirt3","pants3","shadowPant3","hat","dome","brim","constHat","hat2","hat3","vestGeometry","vest","vestStripes","stripeFront","stripeBack","stripeTop","stripeBottom1","stripeBottom2","stripeBottom3","stripeBottom4","stripeBottom5","stripes","yellow","vest2","vest3","paper","sheet","shadow1","shadow2","shadow3","render","animate","requestAnimationFrame","update","slide","id","showing","removeAttribute","getElementsByClassName","style","backgroundColor","onDocumentMouseMove","event","preventDefault","rect","getBoundingClientRect","mouse","clientX","clientY","raycaster","setFromCamera","selected","intersectObjects","point","intersects","flaggers","object","hovered","cursor","onDocumentTouchMove","changedTouches","onDocumentMouseDown","offset","copy","intersection","sub","onDocumentTouchStart","onDocumentMouseCancel","onDocumentTouchEnd","flagger","color","pants","rightArm1","min","Math","ceil","max","skinTone","random","stick","signArray","group","checkbox","idx","signs","indexOf","value","splice","checked","unshift","signSpace","start","signGrouped","spacing","Number","signImages","sign1","pos","signBase","safetyOrange","workerSignMaterial","flaggerSignMaterial","flagAheadSignMaterial","menWorkSignMaterial","prepareStopSignMaterial","oneLaneSignMaterial","workAheadSignMaterial","signColor","signColorBack","signStick","console","log","name","test","getObjectByName","remove","shadowCone","newStripe","initialX","coneGroup","shadowGroup","buffer","cones","abs","newCone","newShadowCone","upstream","downstream","Raycaster","Vector2","MeshLambertMaterial","LineBasicMaterial","ShadowMaterial","opacity","transparent","green","workerSign","TextureLoader","load","MeshBasicMaterial","map","flaggerSign","flagAheadSign","menWorkSign","prepareStopSign","oneLaneSign","workAheadSign","coneBottomG"],"mappings":"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","file":"../../js/main.min.js","sourcesContent":["function init() {\n\tscene = new THREE.Scene()\n\twindow.scene = scene\n\twindow.THREE = THREE\n\t// Scenery\n\tinitRoad()\n\tinitTrees()\n\tinitShop()\n\tinitApartment()\n\tinitBench()\n\tinitBackHoe()\n\tinitTruck()\n\tinitWorkers()\n\t// Mechanics\n\tinitCamera()\n\tinitLights()\n\tinitRender()\n}\n\nfunction initCamera() {\n\tcamera = new THREE.PerspectiveCamera(60, ((window.innerWidth - 110) / (window.innerHeight - 50)), 1, 100)\n\tcamera.position.set(0, 23, 20)\n\tcamera.lookAt(0, 0, 0)\n}\n\nfunction initLights() {\n\tambient = new THREE.HemisphereLight(0xDEEEF2, 0x665C6D, 1.2)\n\tsun = new THREE.SpotLight(0xFCDC74, 0.2)\n\tsun.position.set(-50, 40, -5)\n\tsun.castShadow = true\n\tsun.shadow.camera.left = -10\n\tsun.shadow.camera.right = 10\n\tsun.shadow.camera.top = 10\n\tsun.shadow.camera.bottom = -10\n\tsun.shadow.camera.near = 0.1\n\tsun.shadow.camera.far = 1000\n\tsun.shadow.mapSize.width = 2048\n\tsun.shadow.mapSize.height = 2048\n\tscene.add(ambient)\n\tscene.add(sun)\n}\n\nfunction initRender() {\n\trenderer = new THREE.WebGLRenderer({antialias: true})\n\tconst container = document.getElementById('container')\n\trenderer.setSize(window.innerWidth - 110, window.innerHeight)\n\trenderer.setClearColor(0xFFFFFF, 1)\n\trenderer.setPixelRatio( window.devicePixelRatio )\n\trenderer.shadowMap.enabled = true\n\trenderer.shadowMap.type = THREE.PCFSoftShadowMap\n\tcontainer.appendChild(renderer.domElement)\n\tcontrols = new THREE.OrbitControls(camera, renderer.domElement)\n\t//controls.enabled = false\n\n\t//container.addEventListener('mousemove', onDocumentMouseMove, false)\n\t//container.addEventListener('mouseup', onDocumentMouseCancel, false)\n\t//container.addEventListener('mousedown', onDocumentMouseDown, false)\n\t/* container.addEventListener('touchmove', onDocumentTouchMove, false)\n\tcontainer.addEventListener('touchstart', onDocumentTouchStart, false)\n\tcontainer.addEventListener('touchend', onDocumentTouchEnd, false) */\n}\n","function initRoad() {\n\tconst meshes = new THREE.Geometry()\n\tconst officeShadows = new THREE.Geometry()\n\tconst materials = [\n\t\tgrass,\t\t\t// 0\n\t\troad,\t\t\t\t// 1\n\t\tdivider,\t\t// 2\n\t\tlines,\t\t\t// 3\n\t\tgray,\t\t\t\t// 4\n\t\twhite,\t\t\t// 5\n\t\tshadows\t\t\t// 6\n\t]\n\n\tconst topGeometry = new THREE.BoxGeometry(45, 1, 10)\n\ttopGeometry.translate(0, 0, -9)\n\n\tfor (var j = 0; j < topGeometry.faces.length; j++) {\n\t\ttopGeometry.faces[j].materialIndex = 0;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(topGeometry))\n\n\tconst roadGeometry = new THREE.BoxGeometry(45, 1, 8)\n\n\tfor (var j = 0; j < roadGeometry.faces.length; j++) {\n\t\troadGeometry.faces[j].materialIndex = 1;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(roadGeometry))\n\n\tlet lineGeometry = new THREE.Geometry()\n\tlineGeometry.vertices.push(\n\t\tnew THREE.Vector3(-22.5, 0.51, -3.7),\n\t\tnew THREE.Vector3(22.5, 0.51, -3.7)\n\t)\n\n\tfor (var j = 0; j < lineGeometry.faces.length; j++) {\n\t\tlineGeometry.faces[j].materialIndex = 3;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(lineGeometry))\n\n\tlineGeometry = new THREE.Geometry()\n\tlineGeometry.vertices.push(\n\t\tnew THREE.Vector3(-22.5, 0.51, 3.7),\n\t\tnew THREE.Vector3(22.5, 0.51, 3.7)\n\t)\n\n\tfor (var j = 0; j < lineGeometry.faces.length; j++) {\n\t\tlineGeometry.faces[j].materialIndex = 3;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(lineGeometry))\n\n\tconst bottomGeometry = new THREE.BoxGeometry(45, 1, 7)\n\tbottomGeometry.translate(0, 0, 7.5)\n\n\tfor (var j = 0; j < bottomGeometry.faces.length; j++) {\n\t\tbottomGeometry.faces[j].materialIndex = 0;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(bottomGeometry))\n\n\tconst dividerGeometry = new THREE.Geometry()\n\tconst dividerLine = new THREE.BoxGeometry(1, 0.1, 0.2)\n\tdividerLine.translate(-22, 0.5, 0)\n\tdividerGeometry.merge(dividerLine)\n\tfor (let i = 22; i >= -22; i -= 2) {\n\t\tdividerLine.translate(2, 0, 0)\n\t\tdividerGeometry.merge(dividerLine)\n\t}\n\n\tfor (var j = 0; j < dividerGeometry.faces.length; j++) {\n\t\tdividerGeometry.faces[j].materialIndex = 2;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(dividerGeometry))\n\n\tconst shadowGeometry = new THREE.BoxGeometry(45, 1, 25)\n\tconst floorShadows = new THREE.Mesh(shadowGeometry, shadows)\n\tfloorShadows.position.set(0, 0.05, -1.5)\n\tfloorShadows.receiveShadow = true\n\tscene.add(floorShadows)\n\tobjects.push(floorShadows)\n\n\tconst cone = new THREE.Geometry()\n\tconst stripe = new THREE.Geometry()\n\tconst coneCore = coneGeometry.clone(true)\n\tconst stripeCore = stripeGeometry.clone(true)\n\tconeCore.translate(0, 0.75, 0.5)\n\tcone.merge(coneCore)\n\tstripeCore.translate(0, 0.75, 0.5)\n\tstripe.merge(stripeCore)\n\tfor (var i = 1.5; i <= 10; i += 1.5) {\n\t\tconeCore.translate(1.5, 0, 0)\n\t\tcone.merge(coneCore)\n\t\tstripeCore.translate(1.5, 0, 0)\n\t\tstripe.merge(stripeCore)\n\t}\n\n\tfor (var j = 0; j < cone.faces.length; j++) {\n\t\tcone.faces[j].materialIndex = 4;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(cone))\n\n\tfor (var j = 0; j < stripe.faces.length; j++) {\n\t\tstripe.faces[j].materialIndex = 5;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(stripe))\n\n\tlet combinedMesh = new THREE.Mesh(meshes, materials)\n\tcombinedMesh.castShadow = true\n\tscene.add(combinedMesh)\n}\n","function initTrees() {\n\tconst trees = new THREE.Geometry()\n\tconst tallTree = new THREE.Geometry()\n\tconst tallCone = new THREE.ConeGeometry(1.68, 4, 32)\n\ttallCone.translate(0, 1.35, 0)\n\ttallTree.merge(tallCone)\n\tconst tallSphere = new THREE.SphereGeometry(1.8, 60, 60)\n\ttallSphere.translate(0, -1.3, 0)\n\ttallTree.merge(tallSphere)\n\n\ttallTree.translate(-18, 3, -10.5)\n\ttrees.merge(tallTree)\n\ttallTree.translate(7, 0, 18.5)\n\ttrees.merge(tallTree)\n\n\tconst shortTree = tallTree.clone()\n\tshortTree.scale(0.5, 0.5, 0.5)\n\tshortTree.translate(0, 0.2, -12)\n\ttrees.merge(shortTree)\n\tshortTree.translate(17.5, 0, 14)\n\ttrees.merge(shortTree)\n\tshortTree.translate(4.5, 0, -16.5)\n\ttrees.merge(shortTree)\n\n\tconst allTrees = new THREE.Mesh(trees, treeTall)\n\tallTrees.castShadow = true\n\tscene.add(allTrees)\n\tconst treeShadows = new THREE.Mesh(trees, shadows)\n\ttreeShadows.receiveShadow = true\n\tscene.add(treeShadows)\n}\n","function initShop()\t{\n\tconst shop = new THREE.Group()\n\tconst shopBase = new THREE.Geometry()\n\tconst shopShadowGeometry = new THREE.Geometry()\n\n// Foundation\n\tconst bottom = new THREE.BoxGeometry(10, 1, 5)\n\tshopBase.merge(bottom)\n\tconst bottomStair = new THREE.BoxGeometry(2, 0.5, 0.5)\n\tbottomStair.translate(0, 0.25, 2.75)\n\tshopBase.merge(bottomStair)\n\tconst topStair = new THREE.BoxGeometry(2, 0.5, 1)\n\ttopStair.translate(0, -0.25, 3)\n\tshopBase.merge(topStair)\n\tconst shopBaseShadow = shopBase.clone()\n\tshopShadowGeometry.merge(shopBaseShadow)\n\tlet building = new THREE.Mesh(shopBase, foundation)\n\tbuilding.castShadow = true\n\tshop.add(building)\n\n// Building\n\tconst glass = new THREE.BoxGeometry(9.75, 4.9, 0.125)\n\tglass.translate(0, 3, 2.4)\n\tconst windows = new THREE.Mesh(glass, windowColor)\n\tshop.add(windows)\n\n\tconst shopCore = new THREE.Geometry()\n\tconst bottomFront = new THREE.BoxGeometry(4, 1, 0.75)\n\tbottomFront.translate(-3, 1, 2.125)\n\tshopCore.merge(bottomFront)\n\tbottomFront.translate(6, 0, 0)\n\tshopCore.merge(bottomFront)\n\tconst topFront = new THREE.BoxGeometry(10, 2, 0.75)\n\ttopFront.translate(0, 5, 2.12)\n\tshopCore.merge(topFront)\n\tconst sides = new THREE.BoxGeometry(1, 5.5, 3.25)\n\tsides.translate(-4.5, 3.25, 0.126)\n\tshopCore.merge(sides)\n\tsides.translate(9, 0, 0)\n\tshopCore.merge(sides)\n\tconst inner = new THREE.BoxGeometry(1, 2.5, 0.5)\n\tinner.translate(-1.5, 2.75, 2.25)\n\tshopCore.merge(inner)\n\tinner.translate(3, 0, 0)\n\tshopCore.merge(inner)\n\tconst center = new THREE.BoxGeometry(10, 5.5, 1)\n\tcenter.translate(0, 3.25, -2)\n\tshopCore.merge(center)\n\tconst top = new THREE.BoxGeometry(8, 1, 3.25)\n\ttop.translate(0, 5.5, 0.125)\n\tshopCore.merge(top)\n\tconst coreShopShadow = shopCore.clone()\n\tshopShadowGeometry.merge(coreShopShadow)\n\tbuilding = new THREE.Mesh(shopCore, stone)\n\tbuilding.castShadow = true\n\tshop.add(building)\n\n// Insides\n\tconst insideShadowGeometry = new THREE.Geometry()\n\n\tconst counter = new THREE.BoxGeometry(3, 1.5, 1)\n\tcounter.translate(0, 1.25, 0)\n\tconst coreCountersShadow = counter.clone()\n\tinsideShadowGeometry.merge(coreCountersShadow)\n\tconst Counters = new THREE.Mesh(counter, stone)\n\tshop.add(Counters)\n\n\tconst shelf = new THREE.BoxGeometry(0.5, 0.1, 3)\n\tshelf.translate(3.75, 2, 0)\n\tconst shelf2 = new THREE.BoxGeometry(0.5, 0.1, 3)\n\tshelf2.translate(3.75, 3, 0)\n\tshelf.merge(shelf2)\n\tshelf2.translate(0, 1, 0)\n\tshelf.merge(shelf2)\n\tshelf2.translate(-7.5, 0, 0)\n\tshelf.merge(shelf2)\n\tshelf2.translate(0, -1, 0)\n\tshelf.merge(shelf2)\n\tshelf2.translate(0, -1, 0)\n\tshelf.merge(shelf2)\n\tconst coreShelvesShadow = shelf.clone()\n\tinsideShadowGeometry.merge(coreShelvesShadow)\n\tconst shelves = new THREE.Mesh(shelf, stone)\n\tshop.add(shelves)\n\n\tconst book1 = new THREE.BoxGeometry(0.7, 0.75, 0.2)\n\tbook1.translate(3.75, 3.45, 0)\n\tconst book2 = new THREE.BoxGeometry(0.7, 0.75, 0.2)\n\tbook2.translate(3.75, 3.45, 1)\n\tbook1.merge(book2)\n\tbook2.translate(0, 1, -1.5)\n\tbook1.merge(book2)\n\tbook2.translate(0, -2, -0.5)\n\tbook1.merge(book2)\n\tbook2.translate(0, 0, 0.75)\n\tbook1.merge(book2)\n\tbook2.translate(0, 0, 1)\n\tbook1.merge(book2)\n\tbook2.translate(-7.5, 0, 0)\n\tbook1.merge(book2)\n\tbook2.translate(0, 0, -1.5)\n\tbook1.merge(book2)\n\tbook2.translate(0, 1, 0.5)\n\tbook1.merge(book2)\n\tbook2.translate(0, 0, 0.75)\n\tbook1.merge(book2)\n\tbook2.translate(0, 1, 0.25)\n\tbook1.merge(book2)\n\tbook2.translate(0, 0, -0.75)\n\tbook1.merge(book2)\n\tbook2.translate(0, 0, -0.5)\n\tbook1.merge(book2)\n\tconst book7 = new THREE.BoxGeometry(0.7, 0.75, 0.2)\n\tbook7.translate(-3.5, 1.87, 2.25)\n\tbook1.merge(book7)\n\tconst coreRedShadow = book1.clone()\n\tinsideShadowGeometry.merge(coreRedShadow)\n\tconst redBooks = new THREE.Mesh(book1, red)\n\tredBooks.castShadow = true\n\tshop.add(redBooks)\n\n\tconst books2 = new THREE.Geometry()\n\tconst book3 = new THREE.BoxGeometry(0.7, 0.75, 0.2)\n\tbook3.translate(3.75, 3.45, 1.2)\n\tbooks2.merge(book3)\n\tbook3.translate(0, 1, -1.5)\n\tbooks2.merge(book3)\n\tbook3.translate(0, -2, -0.5)\n\tbooks2.merge(book3)\n\tbook3.translate(0, 0, 0.75)\n\tbooks2.merge(book3)\n\tbook3.translate(0, 0, 1)\n\tbooks2.merge(book3)\n\tbook3.translate(-7.5, 0, 0)\n\tbooks2.merge(book3)\n\tbook3.translate(0, 0, -1.5)\n\tbooks2.merge(book3)\n\tbook3.translate(0, 1, 0.5)\n\tbooks2.merge(book3)\n\tbook3.translate(0, 0, 0.75)\n\tbooks2.merge(book3)\n\tbook3.translate(0, 1, 0.25)\n\tbooks2.merge(book3)\n\tbook3.translate(0, 0, -0.75)\n\tbooks2.merge(book3)\n\tbook3.translate(0, 0, -0.5)\n\tbooks2.merge(book3)\n\tconst book8 = new THREE.BoxGeometry(0.7, 0.75, 0.2)\n\tbook8.translate(-2.5, 1.87, 2.25)\n\tbooks2.merge(book8)\n\tconst coreBlueShadow = books2.clone()\n\tinsideShadowGeometry.merge(coreBlueShadow)\n\tconst blueBooks = new THREE.Mesh(books2, blue)\n\tblueBooks.castShadow = true\n\tshop.add(blueBooks)\n\n\tconst books3 = new THREE.Geometry()\n\tconst book4 = new THREE.BoxGeometry(0.7, 0.75, 0.2)\n\tbook4.translate(3.75, 3.45, 1.4)\n\tbooks3.merge(book4)\n\tbook4.translate(0, 1, -1.5)\n\tbooks3.merge(book4)\n\tbook4.translate(0, -2, -0.5)\n\tbooks3.merge(book4)\n\tbook4.translate(0, 0, 0.75)\n\tbooks3.merge(book4)\n\tbook4.translate(0, 0, 1)\n\tbooks3.merge(book4)\n\tbook4.translate(-7.5, 0, 0)\n\tbooks3.merge(book4)\n\tbook4.translate(0, 0, -1.5)\n\tbooks3.merge(book4)\n\tbook4.translate(0, 1, 0.5)\n\tbooks3.merge(book4)\n\tbook4.translate(0, 0, 0.75)\n\tbooks3.merge(book4)\n\tbook4.translate(0, 1, 0.25)\n\tbooks3.merge(book4)\n\tbook4.translate(0, 0, -0.75)\n\tbooks3.merge(book4)\n\tbook4.translate(0, 0, -1.5)\n\tbooks3.merge(book4)\n\tbook4.translate(7.5, 0, 2)\n\tbooks3.merge(book4)\n\tbook4.translate(0, -1, -1.75)\n\tbooks3.merge(book4)\n\tconst corePurpleShadow = books3.clone()\n\tinsideShadowGeometry.merge(corePurpleShadow)\n\tconst purpleBooks = new THREE.Mesh(books3, purple)\n\tpurpleBooks.castShadow = true\n\tshop.add(purpleBooks)\n\n\tconst books4 = new THREE.Geometry()\n\tconst book5 = new THREE.BoxGeometry(0.7, 0.75, 0.2)\n\tbook5.translate(3.75, 3.45, 0.6)\n\tbooks4.merge(book5)\n\tbook5.translate(0, 0, -1)\n\tbooks4.merge(book5)\n\tbook5.translate(0, 1, -0.75)\n\tbooks4.merge(book5)\n\tbook5.translate(0, 0, 1.5)\n\tbooks4.merge(book5)\n\tbook5.translate(0, 0, 0.75)\n\tbooks4.merge(book5)\n\tbook5.translate(-7.5, -1, -1.75)\n\tbooks4.merge(book5)\n\tbook5.translate(0, -1, -0.5)\n\tbooks4.merge(book5)\n\tbook5.translate(0, 0, 1.5)\n\tbooks4.merge(book5)\n\tconst book6 = new THREE.BoxGeometry(0.7, 0.75, 0.2)\n\tbook6.translate(3.5, 1.87, 2.25)\n\tbooks4.merge(book6)\n\tconst coreOrangeShadow = books4.clone()\n\tinsideShadowGeometry.merge(coreOrangeShadow)\n\tconst orangeBooks = new THREE.Mesh(books4, orange)\n\torangeBooks.castShadow = true\n\tshop.add(orangeBooks)\n\tconst shopInsideShadow = new THREE.Mesh(insideShadowGeometry, shadows)\n\tshopInsideShadow.receiveShadow = true\n\tshop.add(shopInsideShadow)\n\n// Awning\n\t// White Stripes\n\tconst awningA = new THREE.Geometry()\n\tconst aA1 = new THREE.BoxGeometry(1.1, 1.25, 2)\n\taA1.translate(-4.4, 5.25, 3.5)\n\taA1.vertices[0].y -= 0.9\n\taA1.vertices[5].y -= 0.9\n\tawningA.merge(aA1)\n\taA1.translate(2.2, 0, 0)\n\tawningA.merge(aA1)\n\taA1.translate(2.2, 0, 0)\n\tawningA.merge(aA1)\n\taA1.translate(2.2, 0, 0)\n\tawningA.merge(aA1)\n\taA1.translate(2.2, 0, 0)\n\tawningA.merge(aA1)\n\tconst aShadow = awningA.clone()\n\tshopShadowGeometry.merge(aShadow)\n\tconst As = new THREE.Mesh(awningA, offwhite)\n\tAs.castShadow = true\n\t// Red Stripes\n\tconst awningB = new THREE.Geometry()\n\tconst aB1 = new THREE.BoxGeometry(1.1, 1.25, 2)\n\taB1.translate(-3.3, 5.25, 3.5)\n\taB1.vertices[0].y -= 0.9\n\taB1.vertices[5].y -= 0.9\n\tawningB.merge(aB1)\n\taB1.translate(2.2, 0, 0)\n\tawningB.merge(aB1)\n\taB1.translate(2.2, 0, 0)\n\tawningB.merge(aB1)\n\taB1.translate(2.2, 0, 0)\n\tawningB.merge(aB1)\n\tconst bShadow = awningB.clone()\n\tshopShadowGeometry.merge(bShadow)\n\tconst Bs = new THREE.Mesh(awningB, blue)\n\tBs.castShadow = true\n\tshop.add(As)\n\tshop.add(Bs)\n\tconst shopShadow = new THREE.Mesh(shopShadowGeometry, shadows)\n\tshopShadow.receiveShadow = true\n\tshop.add(shopShadow)\n\n// Add To Scene\n\tshop.position.set(8, 1, -8) // 8, -9\n\tscene.add(shop)\n}\n","function initApartment() {\n\tconst meshes = new THREE.Geometry()\n\tconst officeShadows = new THREE.Geometry()\n\tconst materials = [\n\t\tfoundation,\n\t\tbrick,\n\t\twindowColor,\n\t\tcouchFabric,\n\t\tblueFabric,\n\t\tpurpleFabric,\n\t\ttanFabric,\n\t\tstone,\n\t\tshadows\n\t]\n\n  // Outside Walls\n\tconst base = new THREE.Geometry()\n\tconst left = new THREE.BoxGeometry(0.5, 10, 1)\n\tleft.translate(-3.5, 5.25, 3.25)\n\tbase.merge(left)\n\tleft.translate(0, 0, -2.125)\n\tbase.merge(left)\n\tleft.translate(0, 0, -2.125)\n\tbase.merge(left)\n\tleft.translate(0, 0, -2.125)\n\tbase.merge(left)\n\tleft.translate(7, 0, 0)\n\tbase.merge(left)\n\tleft.translate(0, 0, 2.125)\n\tbase.merge(left)\n\tleft.translate(0, 0, 2.125)\n\tbase.merge(left)\n\tleft.translate(0, 0, 2.125)\n\tbase.merge(left)\n\tconst back = new THREE.BoxGeometry(1, 10, 0.5)\n\tback.translate(-1.5, 5.25, -3.375)\n\tbase.merge(back)\n\tback.translate(3, 0, 0)\n\tbase.merge(back)\n\tback.translate(0, 0, 6.875)\n\tbase.merge(back)\n\tback.translate(-3, 0, 0)\n\tbase.merge(back)\n\tconst backSide = new THREE.BoxGeometry(1.25, 3.5, 0.5)\n\tbackSide.translate(-2.625, 2, 3.5)\n\tbase.merge(backSide)\n\tbackSide.translate(5.25, 0, 0)\n\tbase.merge(backSide)\n\tbackSide.translate(0, 0, -6.875)\n\tbase.merge(backSide)\n\tbackSide.translate(-5.25, 0, 0)\n\tbase.merge(backSide)\n\tlet front = new THREE.BoxGeometry(1.25, 1.75, 0.5)\n\tfront.translate(-2.625, 6.25, 3.5)\n\tbase.merge(front)\n\tfront.translate(0, 3.125, 0)\n\tbase.merge(front)\n\tfront.translate(5.25, 0, 0)\n\tbase.merge(front)\n\tfront.translate(0, -3.125, 0)\n\tbase.merge(front)\n\tfront.translate(0, 0, -6.875)\n\tbase.merge(front)\n\tfront.translate(0, 3.125, 0)\n\tbase.merge(front)\n\tfront.translate(-5.25, 0, 0)\n\tbase.merge(front)\n\tfront.translate(0, -3.125, 0)\n\tbase.merge(front)\n\tfront = new THREE.BoxGeometry(2, 7.5, 0.5)\n\tfront.translate(0, 6.5, 3.5)\n\tbase.merge(front)\n\tfront = new THREE.BoxGeometry(2, 10, 0.5)\n\tfront.translate(0, 5.25, -3.375)\n\tbase.merge(front)\n\tlet side = new THREE.BoxGeometry(0.5, 3.5, 1.15)\n\tside.translate(-3.5, 2, 2.19)\n\tbase.merge(side)\n\tside.translate(0, 0, -2.125)\n\tbase.merge(side)\n\tside.translate(0, 0, -2.125)\n\tbase.merge(side)\n\tside.translate(7, 0, 0)\n\tbase.merge(side)\n\tside.translate(0, 0, 2.125)\n\tbase.merge(side)\n\tside.translate(0, 0, 2.125)\n\tbase.merge(side)\n\tside = new THREE.BoxGeometry(0.5, 1.75, 1.15)\n\tside.translate(-3.5, 6.25, 2.19)\n\tbase.merge(side)\n\tside.translate(0, 0, -2.125)\n\tbase.merge(side)\n\tside.translate(0, 0, -2.125)\n\tbase.merge(side)\n\tside.translate(7, 0, 0)\n\tbase.merge(side)\n\tside.translate(0, 0, 2.125)\n\tbase.merge(side)\n\tside.translate(0, 0, 2.125)\n\tbase.merge(side)\n\tside.translate(0, 3.125, 0)\n\tbase.merge(side)\n\tside.translate(0, 0, -2.125)\n\tbase.merge(side)\n\tside.translate(0, 0, -2.125)\n\tbase.merge(side)\n\tside.translate(-7, 0, 0)\n\tbase.merge(side)\n\tside.translate(0, 0, 2.125)\n\tbase.merge(side)\n\tside.translate(0, 0, 2.125)\n\tbase.merge(side)\n\tconst floor = new THREE.BoxGeometry(6.5, 0.25, 6.5)\n\tfloor.translate(0, 3, 0)\n\tbase.merge(floor)\n\tfloor.translate(0, 3.5, 0)\n\tbase.merge(floor)\n\tfloor.translate(0, 3.63, 0)\n\tbase.merge(floor)\n\tconst innerWall = new THREE.BoxGeometry(0.25, 7.25, 6.5)\n\tinnerWall.translate(0, 6.67, 0)\n\tbase.merge(innerWall)\n\n\tfor (var j = 0; j < base.faces.length; j++) {\n\t\tbase.faces[j].materialIndex = 1;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(base))\n\n\tfor (var j = 0; j < base.faces.length; j++) {\n\t\tbase.faces[j].materialIndex = 8;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(base))\n\n  // Windows\n\tconst windows = new THREE.Geometry()\n\tlet windowSide = new THREE.BoxGeometry(7, 9.5, 0.1)\n\twindowSide.translate(0, 5, 3.5)\n\twindows.merge(windowSide)\n\twindowSide.translate(0, 0, -7)\n\twindows.merge(windowSide)\n\twindowSide = new THREE.BoxGeometry(0.1, 9.5, 7)\n\twindowSide.translate(3.5, 5, 0)\n\twindows.merge(windowSide)\n\twindowSide.translate(-7, 0, 0)\n\twindows.merge(windowSide)\n\n\tfor (var j = 0; j < windows.faces.length; j++) {\n\t\twindows.faces[j].materialIndex = 2;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(windows))\n\n  // Roof & Foundation\n\n\tconst cap = new THREE.Geometry()\n\n\tconst found = new THREE.BoxGeometry(8, 0.5, 8)\n\tcap.merge(found)\n\n\tconst step = new THREE.BoxGeometry(8.25, 0.25, 8.25)\n\tstep.translate(0, -0.125, 0)\n\tcap.merge(step)\n\n\tconst capLeft = new THREE.BoxGeometry(0.25, 0.5, 7.375)\n\tcapLeft.translate(-3.88, 10.5, 0.05)\n\tcap.merge(capLeft)\n\tcapLeft.translate(7.76, 0, 0)\n\tcap.merge(capLeft)\n\tconst capFront = new THREE.BoxGeometry(8.01, 0.5, 0.25)\n\tcapFront.translate(0, 10.5, 3.86)\n\tcap.merge(capFront)\n\tcapFront.translate(0, 0, -7.6)\n\tcap.merge(capFront)\n  // Sill\n  // Fronts - bottom\n\tconst sillBottom = new THREE.Geometry()\n\tconst sill1 = new THREE.BoxGeometry(1.5, 0.1, 0.1)\n\tsill1.translate(-2.6, 7.125, 3.8)\n\tsillBottom.merge(sill1)\n\tsill1.translate(0, 0, -7.475)\n\tsillBottom.merge(sill1)\n\tlet sill2 = new THREE.BoxGeometry(1.22, 0.1, 0.5)\n\tsill2.translate(-2.62, 7.125, 3.5)\n\tsillBottom.merge(sill2)\n\tsill2.translate(0, 0, -6.875)\n\tsillBottom.merge(sill2)\n\tcap.merge(sillBottom)\n\tsillBottom.translate(5.25, 0, 0)\n\tcap.merge(sillBottom)\n\tsillBottom.translate(0, -3.375, 0)\n\tcap.merge(sillBottom)\n\tsillBottom.translate(-5.25, 0, 0)\n\tcap.merge(sillBottom)\n  // Fronts - top\n\tconst sillTop = new THREE.Geometry()\n\tlet sill3 = new THREE.BoxGeometry(1.375, 0.1, 0.1)\n\tsill3.translate(-2.6, 8.5, 3.8)\n\tsillTop.merge(sill3)\n\tsill3.translate(0, 0, -7.475)\n\tsillTop.merge(sill3)\n\tlet sill4 = new THREE.BoxGeometry(1.25, 0.1, 0.1)\n\tsill4.translate(-2.625, 7.75, 3.55)\n\tsillTop.merge(sill4)\n\tsill4.translate(0, 0, -7.1)\n\tsillTop.merge(sill4)\n\tcap.merge(sillTop)\n\tsillTop.translate(5.25, 0, 0)\n\tcap.merge(sillTop)\n\tsillTop.translate(0, -3.12, 0)\n\tcap.merge(sillTop)\n\tsillTop.translate(-5.25, 0, 0)\n\tcap.merge(sillTop)\n  // Sides-Top\n\tconst sillTopSide = new THREE.Geometry()\n\tconst sill = new THREE.BoxGeometry(0.1, 0.1, 1.375)\n\tsill.translate(3.8, 8.5, 2.175)\n\tsillTopSide.merge(sill)\n\tsill.translate(-7.6, 0, 0)\n\tsillTopSide.merge(sill)\n\tsill2 = new THREE.BoxGeometry(0.1, 0.1, 1.25)\n\tsill2.translate(3.55, 7.75, 2.175)\n\tsillTopSide.merge(sill2)\n\tsill2.translate(-7.1, 0, 0)\n\tsillTopSide.merge(sill2)\n\tcap.merge(sillTopSide)\n\tsillTopSide.translate(0, 0, -2.125)\n\tcap.merge(sillTopSide)\n\tsillTopSide.translate(0, 0, -2.125)\n\tcap.merge(sillTopSide)\n\tsillTopSide.translate(0, -3.125, 0)\n\tcap.merge(sillTopSide)\n\tsillTopSide.translate(0, 0, 2.125)\n\tcap.merge(sillTopSide)\n\tsillTopSide.translate(0, 0, 2.125)\n\tcap.merge(sillTopSide)\n\tconst sillBottomSide = new THREE.Geometry()\n\tsill3 = new THREE.BoxGeometry(0.1, 0.1, 1.5)\n\tsill3.translate(3.8, 7.1, 2.175)\n\tsillBottomSide.merge(sill3)\n\tsill3.translate(-7.6, 0, 0)\n\tsillBottomSide.merge(sill3)\n\tsill4 = new THREE.BoxGeometry(0.5, 0.1, 1.22)\n\tsill4.translate(3.51, 7.1, 2.175)\n\tsillBottomSide.merge(sill4)\n\tsill4.translate(-7.02, 0, 0)\n\tsillBottomSide.merge(sill4)\n\tcap.merge(sillBottomSide)\n\tsillBottomSide.translate(0, 0, -2.125)\n\tcap.merge(sillBottomSide)\n\tsillBottomSide.translate(0, 0, -2.125)\n\tcap.merge(sillBottomSide)\n\tsillBottomSide.translate(0, -3.37, 0)\n\tcap.merge(sillBottomSide)\n\tsillBottomSide.translate(0, 0, 2.125)\n\tcap.merge(sillBottomSide)\n\tsillBottomSide.translate(0, 0, 2.125)\n\tcap.merge(sillBottomSide)\n  // Door\n\tconst doorSill = new THREE.BoxGeometry(2.5, 0.25, 0.2)\n\tdoorSill.translate(0, 2.87, 3.75)\n\tcap.merge(doorSill)\n\tconst doorSillSide = new THREE.BoxGeometry(0.1, 2.5, 0.1)\n\tdoorSillSide.translate(-1, 1.5, 3.75)\n\tcap.merge(doorSillSide)\n\tdoorSillSide.translate(1, 0, 0)\n\tcap.merge(doorSillSide)\n\tdoorSillSide.translate(1, 0, 0)\n\tcap.merge(doorSillSide)\n  // Add to building\n\tfor (var j = 0; j < cap.faces.length; j++) {\n\t\tcap.faces[j].materialIndex = 0;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(cap))\n\n\tfor (var j = 0; j < cap.faces.length; j++) {\n\t\tcap.faces[j].materialIndex = 8;\n\t}\n\tofficeShadows.mergeMesh(new THREE.Mesh(cap))\n\n  // Set Decorations\n\tconst Green = new THREE.Geometry()\n\tconst Blue = new THREE.Geometry()\n\tconst Purple = new THREE.Geometry()\n\tconst Tan = new THREE.Geometry()\n\n\tconst couchSeat = new THREE.BoxGeometry(0.75, 0.25, 1.65)\n\tcouchSeat.translate(-1, 6.75, -0.01)\n\tGreen.merge(couchSeat)\n\tBlue.merge(couchSeat)\n\tPurple.merge(couchSeat)\n\tTan.merge(couchSeat)\n\n\tconst couchBack = new THREE.BoxGeometry(0.25, 0.75, 1.65)\n\tcouchBack.translate(-0.5, 7, -0.01)\n\tGreen.merge(couchBack)\n\tBlue.merge(couchBack)\n\tPurple.merge(couchBack)\n\tTan.merge(couchBack)\n\n\tconst armRest = new THREE.BoxGeometry(1, 0.5, 0.25)\n\tarmRest.translate(-0.87, 6.87, 0.92)\n\tGreen.merge(armRest)\n\tBlue.merge(armRest)\n\tPurple.merge(armRest)\n\tTan.merge(armRest)\n\tarmRest.translate(0, 0, -1.84)\n\tGreen.merge(armRest)\n\tBlue.merge(armRest)\n\tPurple.merge(armRest)\n\tTan.merge(armRest)\n\n\tconst cushion = new THREE.BoxGeometry(0.75, 0.15, 0.5)\n\tcushion.translate(-1, 6.86, 0)\n\tGreen.merge(cushion)\n\tBlue.merge(cushion)\n\tPurple.merge(cushion)\n\tTan.merge(cushion)\n\tcushion.translate(0, 0, -0.52)\n\tGreen.merge(cushion)\n\tBlue.merge(cushion)\n\tPurple.merge(cushion)\n\tTan.merge(cushion)\n\tcushion.translate(0, 0, 1.04)\n\tGreen.merge(cushion)\n\tBlue.merge(cushion)\n\tPurple.merge(cushion)\n\tTan.merge(cushion)\n\n\n\tGreen.rotateY(1.25)\n\tGreen.translate(-1.25, 0, -3)\n\tBlue.rotateY(-1.25)\n\tBlue.translate(2.25, 0, 3.25)\n\tPurple.rotateY(1)\n\tPurple.translate(2.5, -3.5, -3.25)\n\tTan.rotateY(-1.5)\n\tTan.translate(-2.25, -3.5, 3.25)\n\n\tconst sheets = new THREE.BoxGeometry(2.2, 0.5, 1.2)\n\tsheets.translate(-1.5, 3.55, -2)\n\tsheets.rotateY(-1.55)\n\tsheets.translate(-3, 0, 0)\n\tBlue.merge(sheets)\n\tsheets.translate(0, 3.5, 3)\n\tPurple.merge(sheets)\n\tsheets.rotateY(1.55)\n\tsheets.translate(.325, 0, -3.075)\n\tPurple.merge(sheets)\n\tsheets.translate(-.75, -3.5, 3.985)\n\tGreen.merge(sheets)\n\n  // Green\n\tfor (var j = 0; j < Green.faces.length; j++) {\n\t\tGreen.faces[j].materialIndex = 3;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(Green))\n\n\t// Blue\n\tfor (var j = 0; j < Blue.faces.length; j++) {\n\t\tBlue.faces[j].materialIndex = 4;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(Blue))\n\n\t// Purple\n\tfor (var j = 0; j < Purple.faces.length; j++) {\n\t\tPurple.faces[j].materialIndex = 5;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(Purple))\n\n\t// Tan\n\tfor (var j = 0; j < Tan.faces.length; j++) {\n\t\tTan.faces[j].materialIndex = 6;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(Tan))\n\n\n\tconst mattress = new THREE.BoxGeometry(2.5, 0.45, 1)\n\tmattress.rotateY(-1.55)\n\tmattress.translate(-1.02, 3.475, -1.75)\n\tfor (var j = 0; j < mattress.faces.length; j++) {\n\t\tmattress.faces[j].materialIndex = 6;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(mattress))\n\n\tconst mattress2 = mattress.clone()\n\tmattress2.rotateY(1.55)\n\tmattress2.translate(3.3, 0, 1)\n\tfor (var j = 0; j < mattress2.faces.length; j++) {\n\t\tmattress2.faces[j].materialIndex = 6;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(mattress2))\n\n\tconst mattress3 = mattress.clone()\n\tmattress3.rotateY(1.55)\n\tmattress3.translate(3.3, 3.5, -3)\n\tfor (var j = 0; j < mattress3.faces.length; j++) {\n\t\tmattress3.faces[j].materialIndex = 6;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(mattress3))\n\n\tconst mattress4 = mattress.clone()\n\tmattress4.translate(0, 3.5, 3)\n\tfor (var j = 0; j < mattress4.faces.length; j++) {\n\t\tmattress4.faces[j].materialIndex = 6;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(mattress4))\n\n  // Lobby\n\tconst lobbyDesk = new THREE.Geometry()\n\tlet deskFront = new THREE.BoxGeometry(3, 1, 0.1)\n\tdeskFront.translate(0, 1, -0.5)\n\tlobbyDesk.merge(deskFront)\n\tdeskFront = new THREE.BoxGeometry(0.1, 1, 1)\n\tdeskFront.translate(1.45, 1, -1)\n\tlobbyDesk.merge(deskFront)\n\tdeskFront.translate(-2.9, 0, 0)\n\tlobbyDesk.merge(deskFront)\n\tdeskFront = new THREE.BoxGeometry(3.2, 0.1, 1.2)\n\tdeskFront.translate(0, 1.55, -1)\n\tlobbyDesk.merge(deskFront)\n\tdeskFront = new THREE.BoxGeometry(3.1, 0.1, 1.1)\n\tdeskFront.translate(0, 1.65, -1)\n\tlobbyDesk.merge(deskFront)\n\tfor (var j = 0; j < lobbyDesk.faces.length; j++) {\n\t\tlobbyDesk.faces[j].materialIndex = 7;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(lobbyDesk))\n\n// Create the combined mesh\nlet combinedMesh = new THREE.Mesh(meshes, materials)\ncombinedMesh.position.set(-11, 0.75, -9)\ncombinedMesh.castShadow = true\nscene.add(combinedMesh)\n\n}\n","function initBench() {\n\tconst meshes = new THREE.Geometry()\n\tconst officeShadows = new THREE.Geometry()\n\tconst materials = [\n\t\torange,\t\t\t// 0\n\t\tgray,\t\t\t\t// 1\n\t\tskinTone3,\t// 2\n\t\tjean,\t\t\t\t// 3\n\t\tred,\t\t\t\t// 4\n\t\toffwhite,\t\t// 5\n\t\tshadows\t\t\t// 6\n\t]\n\n\tconst benchGeometry = new THREE.Geometry()\n\tconst benchSeat = new THREE.BoxGeometry(2, 0.1, 1)\n\tbenchGeometry.merge(benchSeat)\n\tconst benchBack = new THREE.BoxGeometry(2, 0.8, 0.1)\n\tbenchBack.translate(0, 0.8, -0.55)\n\tbenchGeometry.merge(benchBack)\n\tbenchGeometry.scale(0.8, 0.8, 0.8)\n\n\tfor (var j = 0; j < benchGeometry.faces.length; j++) {\n\t\tbenchGeometry.faces[j].materialIndex = 0;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(benchGeometry))\n\t// Metal\n\tconst benchMetal = new THREE.Geometry()\n\tlet metalSide = new THREE.BoxGeometry(0.1, 1.8, 0.1)\n\tmetalSide.translate(-1.05, 0.4, -0.55)\n\tbenchMetal.merge(metalSide)\n\tmetalSide.translate(2.1, 0, 0)\n\tbenchMetal.merge(metalSide)\n\tmetalSide = new THREE.BoxGeometry(0.1, 0.6, 0.1)\n\tmetalSide.translate(-1.05, -0.25, 0.55)\n\tbenchMetal.merge(metalSide)\n\tmetalSide.translate(2.1, 0, 0)\n\tbenchMetal.merge(metalSide)\n\tmetalSide = new THREE.BoxGeometry(0.1, 0.1, 1)\n\tmetalSide.translate(-1.05, 0, 0)\n\tbenchMetal.merge(metalSide)\n\tmetalSide.translate(2.1, 0, 0)\n\tbenchMetal.merge(metalSide)\n\tmetalSide = new THREE.BoxGeometry(2, 0.1, 0.1)\n\tmetalSide.translate(0, 0, 0.55)\n\tbenchMetal.merge(metalSide)\n\tmetalSide.translate(0, 0, -1.1)\n\tbenchMetal.merge(metalSide)\n\tmetalSide.translate(0, 0.35, 0)\n\tbenchMetal.merge(metalSide)\n\tmetalSide.translate(0, 0.9, 0)\n\tbenchMetal.merge(metalSide)\n\tbenchMetal.scale(0.8, 0.8, 0.8)\n\n\tfor (var j = 0; j < benchMetal.faces.length; j++) {\n\t\tbenchMetal.faces[j].materialIndex = 1;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(benchMetal))\n\n\tconst benchShadow = new THREE.Geometry()\n\tconst coreBenchShadow = benchGeometry.clone()\n\tbenchShadow.merge(coreBenchShadow)\n\tconst metalBenchShadow = benchMetal.clone()\n\tbenchShadow.merge(metalBenchShadow)\n\n\tfor (var j = 0; j < benchShadow.faces.length; j++) {\n\t\tbenchShadow.faces[j].materialIndex = 6;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(benchShadow))\n\n\tconst body = new THREE.Geometry()\n\t// Arms\n\tlet rightArm = new THREE.BoxGeometry(0.3, 0.4, 0.5)\n\trightArm.translate(0.55, 0.1, 0.5)\n\trightArm.vertices[4].x += 0.1\n\trightArm.vertices[6].x += 0.1\n\trightArm.vertices[0].x -= 0.2\n\trightArm.vertices[2].x -= 0.2\n\trightArm.vertices[0].y += 0.3\n\trightArm.vertices[2].y += 0.4\n\trightArm.vertices[4].y += 0.3\n\trightArm.vertices[5].y += 0.3\n\trightArm.vertices[6].y += 0.3\n\trightArm.vertices[7].y += 0.4\n\tbody.merge(rightArm)\n\trightArm = new THREE.BoxGeometry(0.3, 0.4, 0.5)\n\trightArm.translate(-0.55, 0.1, 0.5)\n\trightArm.vertices[1].x -= 0.1\n\trightArm.vertices[3].x -= 0.1\n\trightArm.vertices[5].x += 0.2\n\trightArm.vertices[7].x += 0.2\n\trightArm.vertices[5].y += 0.3\n\trightArm.vertices[7].y += 0.4\n\trightArm.vertices[1].y += 0.3\n\trightArm.vertices[0].y += 0.3\n\trightArm.vertices[3].y += 0.3\n\trightArm.vertices[2].y += 0.4\n\tbody.merge(rightArm)\n// Head\n\tconst head = new THREE.SphereGeometry(0.35, 32, 32)\n\thead.translate(0, 1.3, 0)\n\tbody.merge(head)\n\tbody.scale(0.5, 0.5, 0.5)\n\tbody.translate(0, 0.56, 0)\n\n\tfor (var j = 0; j < body.faces.length; j++) {\n\t\tbody.faces[j].materialIndex = 2;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(body))\n// Clothes\n// Shirt\n\tconst torso = new THREE.BoxGeometry(1, 1.4, 0.8)\n\ttorso.translate(0, 0.1, 0)\n\ttorso.vertices[0].z -= 0.15\n\ttorso.vertices[0].x -= 0.15\n\ttorso.vertices[1].z += 0.15\n\ttorso.vertices[1].x -= 0.15\n\ttorso.vertices[4].z += 0.15\n\ttorso.vertices[4].x += 0.15\n\ttorso.vertices[5].z -= 0.15\n\ttorso.vertices[5].x += 0.15\n\tconst leftArm = new THREE.BoxGeometry(0.3, 0.5, 0.5)\n\tleftArm.translate(0.55, 0.55, 0)\n\tleftArm.vertices[4].x -= 0.05\n\tleftArm.vertices[5].x -= 0.05\n\tleftArm.vertices[0].y -= 0.5\n\tleftArm.vertices[1].y -= 0.5\n\tleftArm.vertices[2].y -= 0.4\n\tleftArm.vertices[3].y -= 0.4\n\tleftArm.vertices[1].z += 0.1\n\tleftArm.vertices[3].z += 0.1\n\ttorso.merge(leftArm)\n\trightArm = new THREE.BoxGeometry(0.3, 0.5, 0.5)\n\trightArm.translate(-0.55, 0.55, 0)\n\trightArm.vertices[1].x += 0.05\n\trightArm.vertices[0].x += 0.05\n\trightArm.vertices[5].y -= 0.5\n\trightArm.vertices[4].y -= 0.5\n\trightArm.vertices[7].y -= 0.4\n\trightArm.vertices[6].y -= 0.4\n\trightArm.vertices[4].z += 0.1\n\trightArm.vertices[6].z += 0.1\n\ttorso.merge(rightArm)\n\ttorso.scale(0.5, 0.5, 0.5)\n\ttorso.translate(0, 0.56, 0)\n\n\tfor (var j = 0; j < torso.faces.length; j++) {\n\t\ttorso.faces[j].materialIndex = 1;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(torso))\n// Pants\n\tconst pant = new THREE.BoxGeometry(0.5, 0.5, 0.8)\n\tpant.translate(-0.25, -0.8, 0)\n\tpant.vertices[3].z += 0.2\n\tpant.vertices[6].z += 0.2\n\tlet leg = new THREE.BoxGeometry(0.5, 0.5, 0.8)\n\tleg.translate(-0.25, -0.8, 0.8)\n\tleg.vertices[0].x -= 0.1\n\tleg.vertices[2].x -= 0.1\n\tleg.vertices[5].x += 0.1\n\tleg.vertices[7].x += 0.1\n\tleg.vertices[0].y -= 0.2\n\tleg.vertices[5].y -= 0.2\n\tpant.merge(leg)\n\tleg = new THREE.BoxGeometry(0.5, 0.5, 0.8)\n\tleg.translate(0.25, -0.8, 0)\n\tleg.vertices[3].z += 0.2\n\tleg.vertices[6].z += 0.2\n\tpant.merge(leg)\n\tleg = new THREE.BoxGeometry(0.5, 0.5, 0.8)\n\tleg.translate(0.25, -0.8, 0.8)\n\tleg.vertices[0].x -= 0.1\n\tleg.vertices[2].x -= 0.1\n\tleg.vertices[5].x += 0.1\n\tleg.vertices[7].x += 0.1\n\tleg.vertices[0].y -= 0.2\n\tleg.vertices[5].y -= 0.2\n\tpant.merge(leg)\n\tpant.scale(0.5, 0.5, 0.5)\n\tpant.translate(0, 0.56, 0)\n\n\tfor (var j = 0; j < pant.faces.length; j++) {\n\t\tpant.faces[j].materialIndex = 3;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(pant))\n\t// Book\n\tconst flap = new THREE.BoxGeometry(0.25, 0.3, 0.02)\n\tflap.translate(-0.05, 0.75, 0.35)\n\tflap.rotateY(-0.2)\n\tconst flap2 = new THREE.BoxGeometry(0.25, 0.3, 0.02)\n\tflap2.translate(0.05, 0.75, 0.35)\n\tflap2.rotateY(0.2)\n\tflap.merge(flap2)\n\n\tfor (var j = 0; j < flap.faces.length; j++) {\n\t\tflap.faces[j].materialIndex = 4;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(flap))\n\n\tconst pages = new THREE.BoxGeometry(0.25, 0.3, 0.05)\n\tpages.translate(-0.05, 0.75, 0.32)\n\tpages.rotateY(-0.2)\n\tconst pages2 = new THREE.BoxGeometry(0.25, 0.3, 0.05)\n\tpages2.translate(0.05, 0.75, 0.32)\n\tpages2.rotateY(0.2)\n\tpages.merge(pages2)\n\n\tfor (var j = 0; j < pages.faces.length; j++) {\n\t\tpages.faces[j].materialIndex = 5;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(pages))\n\n\t// Shadows\n\tconst pedestrianShadows = new THREE.Geometry()\n\tconst newBody = body.clone(true)\n\tpedestrianShadows.merge(newBody)\n\tconst newPages = pages.clone(true)\n\tpedestrianShadows.merge(newPages)\n\tconst newShirt = torso.clone(true)\n\tnewShirt.scale(1.01, 1.01, 1.01)\n\tpedestrianShadows.merge(newShirt)\n\tconst newPants = pant.clone(true)\n\tnewPants.scale(1.01, 1.01, 1.01)\n\tpedestrianShadows.merge(newPants)\n\tconst newCover = flap.clone(true)\n\tpedestrianShadows.merge(newCover)\n\n\tfor (var j = 0; j < pedestrianShadows.faces.length; j++) {\n\t\tpedestrianShadows.faces[j].materialIndex = 6;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(pedestrianShadows))\n\n\t// Add to scene\n\n\tlet combinedMesh = new THREE.Mesh(meshes, materials)\n\tcombinedMesh.castShadow = true\n\tcombinedMesh.position.set(0, 0.95, -7)\n\tscene.add(combinedMesh)\n}\n","function initBackHoe() {\n\tconst meshes = new THREE.Geometry()\n\tconst officeShadows = new THREE.Geometry()\n\tconst materials = [\n\t\ttruckMaterial,\t\t\t// 0\n\t\twindowColor,\t\t\t\t// 1\n\t\tgray,\t\t\t\t\t\t\t\t// 2\n\t\tshadows\t\t\t\t\t\t\t// 3\n\t]\n\n\tconst shadowHoe = new THREE.Geometry()\n\t// Cabin\n\tconst coreGeometry = new THREE.Geometry()\n\tconst blockGeometry = new THREE.BoxGeometry(4, 0.5, 1.2)\n\tblockGeometry.translate(0.75, 0.25, -0.5)\n\tcoreGeometry.merge(blockGeometry)\n\tconst backAngle = new THREE.BoxGeometry(0.5, 0.5, 1.2)\n\tbackAngle.translate(-1, 1, -0.5)\n\tbackAngle.vertices[4].y -= 0.5\n\tbackAngle.vertices[5].y -= 0.5\n\tcoreGeometry.merge(backAngle)\n\tconst backSolid = new THREE.BoxGeometry(0.25, 0.5, 1.2)\n\tbackSolid.translate(-0.63, 1, -0.5)\n\tcoreGeometry.merge(backSolid)\n\tconst middleSolid = new THREE.BoxGeometry(2.5, 0.25, 1.2)\n\tmiddleSolid.translate(0, 0.625, -0.5)\n\tcoreGeometry.merge(middleSolid)\n\tconst roofSolid = new THREE.BoxGeometry(1.9, 0.1, 1.3)\n\troofSolid.translate(0.4, 2.3, -0.5)\n\tcoreGeometry.merge(roofSolid)\n\t// Arms\n\tconst armBase = new THREE.BoxGeometry(0.75, 0.5, 0.25)\n\tarmBase.translate(2.55, 0.25, 0.25)\n\tarmBase.vertices[4].x -= 0.5\n\tarmBase.vertices[5].x -= 0.5\n\tarmBase.vertices[0].y += 0.55\n\tarmBase.vertices[1].y += 0.55\n\tarmBase.vertices[0].x -= 0.4\n\tarmBase.vertices[1].x -= 0.4\n\tarmBase.vertices[2].y += 1\n\tarmBase.vertices[3].y += 1\n\tarmBase.vertices[6].y += 0.5\n\tarmBase.vertices[7].y += 0.5\n\tarmBase.vertices[6].x += 0.2\n\tarmBase.vertices[7].x += 0.2\n\tcoreGeometry.merge(armBase)\n\tarmBase.translate(0, 0, -1.5)\n\tcoreGeometry.merge(armBase)\n\tconst armLeft = new THREE.BoxGeometry(1, 0.25, 0.3)\n\tarmLeft.translate(3.025, 1.18, 0.25)\n\tarmLeft.vertices[4].x += 0.35\n\tarmLeft.vertices[5].x += 0.35\n\tarmLeft.vertices[0].y -= 0.3\n\tarmLeft.vertices[1].y -= 0.3\n\tarmLeft.vertices[2].y -= 0.5\n\tarmLeft.vertices[3].y -= 0.5\n\tcoreGeometry.merge(armLeft)\n\tarmLeft.translate(0, 0, -1.5)\n\tcoreGeometry.merge(armLeft)\n\tconst armRight = new THREE.BoxGeometry(0.75, 0.45, 0.3)\n\tarmRight.translate(3.9, 0.78, 0.25)\n\tarmRight.vertices[0].y -= 0.5\n\tarmRight.vertices[1].y -= 0.5\n\tarmRight.vertices[0].x += 0.2\n\tarmRight.vertices[1].x += 0.2\n\tarmRight.vertices[2].y -= 0.5\n\tarmRight.vertices[3].y -= 0.5\n\tcoreGeometry.merge(armRight)\n\tarmRight.translate(0, 0, -1.5)\n\tcoreGeometry.merge(armRight)\n\t// Assemble Orange Base\n\tconst shadowCoreGeometry = coreGeometry.clone(true)\n\tshadowHoe.merge(shadowCoreGeometry)\n\n\tfor (var j = 0; j < coreGeometry.faces.length; j++) {\n\t\tcoreGeometry.faces[j].materialIndex = 0;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(coreGeometry))\n\t// Windows\n\tconst windowGeometry = new THREE.BoxGeometry(2.75, 1.75, 1.125)\n\twindowGeometry.translate(.94, 1.375, -.5)\n\twindowGeometry.vertices[0].x -= 1.1\n\twindowGeometry.vertices[1].x -= 1.1\n\twindowGeometry.vertices[3].y += .15\n\twindowGeometry.vertices[2].y += .15\n\n\tfor (var j = 0; j < windowGeometry.faces.length; j++) {\n\t\twindowGeometry.faces[j].materialIndex = 1;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(windowGeometry))\n\t// Cabin Frame\n\tconst cabinGeometry = new THREE.Geometry()\n\tlet verticalBarGeometry = new THREE.BoxGeometry(0.1, 1.5, 0.1)\n\tverticalBarGeometry.translate(-0.45, 1.5, 0.05)\n\tcabinGeometry.merge(verticalBarGeometry)\n\tverticalBarGeometry.translate(0.55, 0, 0)\n\tcabinGeometry.merge(verticalBarGeometry)\n\tverticalBarGeometry.translate(0, 0, -1.1)\n\tcabinGeometry.merge(verticalBarGeometry)\n\tverticalBarGeometry.translate(-0.55, 0, 0)\n\tcabinGeometry.merge(verticalBarGeometry)\n\tverticalBarGeometry = new THREE.BoxGeometry(0.05, 1.5, 0.1)\n\tverticalBarGeometry.translate(1.23, 1.5, 0.05)\n\tcabinGeometry.merge(verticalBarGeometry)\n\tverticalBarGeometry.translate(0, 0, -1.1)\n\tcabinGeometry.merge(verticalBarGeometry)\n\tconst verticalBarGeometryBig = new THREE.BoxGeometry(0.05, 1.75, 0.1)\n\tverticalBarGeometryBig.translate(1.28, 1.375, 0.05)\n\tverticalBarGeometryBig.vertices[0].y -= 0.05\n\tverticalBarGeometryBig.vertices[1].y -= 0.05\n\tcabinGeometry.merge(verticalBarGeometryBig)\n\tverticalBarGeometryBig.translate(0, 0, -1.1)\n\tcabinGeometry.merge(verticalBarGeometryBig)\n\tconst verticalBarGeometryLittle = new THREE.BoxGeometry(0.1, 0.25, 0.1)\n\tverticalBarGeometryLittle.translate(2.3, 0.625, 0.05)\n\tverticalBarGeometryLittle.vertices[0].y -= 0.05\n\tverticalBarGeometryLittle.vertices[1].y -= 0.05\n\tcabinGeometry.merge(verticalBarGeometryLittle)\n\tverticalBarGeometryLittle.translate(0, 0, -1.1)\n\tcabinGeometry.merge(verticalBarGeometryLittle)\n\tlet horizontalBarGeometry = new THREE.BoxGeometry(1.75, 0.1, 0.1)\n\thorizontalBarGeometry.translate(0.375, 2.2, 0.05)\n\tcabinGeometry.merge(horizontalBarGeometry)\n\thorizontalBarGeometry.translate(0, 0, -1.1)\n\tcabinGeometry.merge(horizontalBarGeometry)\n\thorizontalBarGeometry = new THREE.BoxGeometry(1, 0.1, 0.1)\n\thorizontalBarGeometry.translate(1.75, 0.55, 0.05)\n\tcabinGeometry.merge(horizontalBarGeometry)\n\thorizontalBarGeometry.translate(0, 0, -1.1)\n\tcabinGeometry.merge(horizontalBarGeometry)\n\thorizontalBarGeometry = new THREE.BoxGeometry(1.75, 0.5, 0.1)\n\thorizontalBarGeometry.translate(0.4, 1, 0.05)\n\tcabinGeometry.merge(horizontalBarGeometry)\n\thorizontalBarGeometry.translate(0, 0, -1.1)\n\tcabinGeometry.merge(horizontalBarGeometry)\n\tconst backBarGeometry = new THREE.BoxGeometry(0.01, 0.2, 1)\n\tbackBarGeometry.translate(-0.496, 1.3, -0.5)\n\tcabinGeometry.merge(backBarGeometry)\n\tbackBarGeometry.translate(0, 0.9, 0)\n\tcabinGeometry.merge(backBarGeometry)\n\tconst diagonalBarGeometry = new THREE.BoxGeometry(1.045, 0.1, 0.1)\n\tdiagonalBarGeometry.translate(1.825, 2.155, 0.05)\n\tdiagonalBarGeometry.vertices[0].y -= 1.5\n\tdiagonalBarGeometry.vertices[1].y -= 1.5\n\tdiagonalBarGeometry.vertices[2].y -= 1.5\n\tdiagonalBarGeometry.vertices[3].y -= 1.5\n\tcabinGeometry.merge(diagonalBarGeometry)\n\tdiagonalBarGeometry.translate(0, 0, -1.1)\n\tcabinGeometry.merge(diagonalBarGeometry)\n\tconst frontBarGeometry = new THREE.BoxGeometry(0.1, 0.1, 1)\n\tfrontBarGeometry.translate(2.3, 0.55, -0.5)\n\tcabinGeometry.merge(frontBarGeometry)\n\tconst shadowCabin = cabinGeometry.clone(true)\n\tshadowHoe.merge(shadowCabin)\n\n\tfor (var j = 0; j < cabinGeometry.faces.length; j++) {\n\t\tcabinGeometry.faces[j].materialIndex = 2;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(cabinGeometry))\n  // Inside\n\tconst truckSeat = new THREE.Geometry()\n\tconst truckSeatButt = new THREE.BoxGeometry(0.4, 0.1, 0.4)\n\ttruckSeatButt.translate(0.7, 0.75, -0.5)\n\ttruckSeat.merge(truckSeatButt)\n\tconst truckSeatBack = new THREE.BoxGeometry(0.1, 0.7, 0.4)\n\ttruckSeatBack.translate(0.45, 1.05, -0.5)\n\ttruckSeat.merge(truckSeatBack)\n\tconst truckSteering = new THREE.CylinderGeometry(0.2, 0.2, 0.05, 32)\n\ttruckSteering.translate(1.5, -0.75, -0.5)\n\ttruckSteering.rotateZ(1.2)\n\ttruckSeat.merge(truckSteering)\n\tconst truckConsole = new THREE.BoxGeometry(0.95, 0.24, 0.98)\n\ttruckConsole.translate(1.75, 0.65, -0.5)\n\ttruckSeat.merge(truckConsole)\n\tconst truckInnerConsole = new THREE.BoxGeometry(0.95, 0.5, 0.98)\n\ttruckInnerConsole.translate(1.75, 1, -0.5)\n\ttruckInnerConsole.vertices[0].x -= 0.4\n\ttruckInnerConsole.vertices[1].x -= 0.4\n\ttruckSeat.merge(truckInnerConsole)\n\n\tfor (var j = 0; j < truckSeat.faces.length; j++) {\n\t\ttruckSeat.faces[j].materialIndex = 2;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(truckSeat))\n\t// Wheels\n\tconst shape = new THREE.Shape()\n\tshape.moveTo(0, 0.75)\n\tshape.bezierCurveTo(0, 1.75, 1.5, 1.75, 1.5, 0.75)\n\tshape.lineTo(1.125, 0.75)\n\tshape.bezierCurveTo(1.125, 1.25, 0.375, 1.25, 0.375, 0.75)\n\tshape.bezierCurveTo(0.375, 0.35, 1.125, 0.35, 1.125, 0.75)\n\tshape.lineTo(1.5, 0.75)\n\tshape.bezierCurveTo(1.5, -0.125, 0, -0.125, 0, 0.75)\n\n\tconst extrudeSettings = {\n\t\tamount: 0.5,\n\t\tsteps: 50,\n\t\tbevelEnabled: false,\n\t\tcurveSegments: 8\n\t}\n\tconst truckWheel = new THREE.Group()\n\tconst truckRubber = new THREE.Geometry()\n\tconst truckTire = new THREE.ExtrudeGeometry(shape, extrudeSettings)\n\ttruckTire.translate(-1, -1, 0)\n\ttruckRubber.merge(truckTire)\n\ttruckTire.translate(0, 0, -1.5)\n\ttruckRubber.merge(truckTire)\n\ttruckTire.translate(3.2, 0, 0)\n\ttruckRubber.merge(truckTire)\n\ttruckTire.translate(0, 0, 1.5)\n\ttruckRubber.merge(truckTire)\n\tconst nut = new THREE.CylinderGeometry(0.15, 0.15, 0.3, 6)\n\tnut.rotateX(1.6)\n\tnut.translate(-0.25, -0.2, 0.3)\n\ttruckRubber.merge(nut)\n\tnut.translate(0, 0, -1.5)\n\ttruckRubber.merge(nut)\n\tnut.translate(3.2, 0, 0)\n\ttruckRubber.merge(nut)\n\tnut.translate(0, 0, 1.5)\n\ttruckRubber.merge(nut)\n\tlet truckBumper = new THREE.BoxGeometry(0.2, 0.2, 1.5)\n\ttruckBumper.translate(-1.25, 0, -0.5)\n\ttruckRubber.merge(truckBumper)\n\ttruckBumper = new THREE.BoxGeometry(0.32, 0.2, 1.5)\n\ttruckBumper.translate(-1.19, -0.2, -0.5)\n\ttruckRubber.merge(truckBumper)\n\ttruckBumper = new THREE.BoxGeometry(1.25, 0.2, 1.5)\n\ttruckBumper.translate(1.25, -0.2, -0.5)\n\ttruckRubber.merge(truckBumper)\n\ttruckBumper = new THREE.BoxGeometry(0.2, 0.2, 0.9)\n\ttruckBumper.translate(2.75, -0.2, -0.45)\n\ttruckRubber.merge(truckBumper)\n\tconst truckLicense = new THREE.BoxGeometry(0.05, 0.2, 0.5)\n\ttruckLicense.translate(-1.25, 0.3, -0.5)\n\ttruckRubber.merge(truckLicense)\n\tlet Scoop = new THREE.BoxGeometry(0.5, 0.2, 2)\n\tScoop.rotateZ(0.2)\n\tScoop.translate(4.825, 0.7, -0.5)\n\ttruckRubber.merge(Scoop)\n\tScoop = new THREE.BoxGeometry(1, 0.2, 2)\n\tScoop.rotateZ(1.15)\n\tScoop.translate(4.45, 0.25, -0.5)\n\ttruckRubber.merge(Scoop)\n\tScoop = new THREE.BoxGeometry(1, 0.2, 2)\n\tScoop.rotateZ(-0.7)\n\tScoop.translate(4.61, -0.42, -0.5)\n\ttruckRubber.merge(Scoop)\n\tScoop = new THREE.BoxGeometry(0.75, 0.2, 2)\n\tScoop.translate(5.3, -0.717, -0.5)\n\ttruckRubber.merge(Scoop)\n\t// Scoop Sides\n\tScoop = new THREE.BoxGeometry(0.5, 0.25, 0.2)\n\tScoop.translate(4.839, 0.53, 0.4)\n\tScoop.vertices[6].y += 0.2\n\tScoop.vertices[7].y += 0.2\n\tScoop.vertices[2].y += 0.1\n\tScoop.vertices[3].y += 0.1\n\tScoop.vertices[2].x -= 0.15\n\tScoop.vertices[3].x -= 0.15\n\ttruckRubber.merge(Scoop)\n\tScoop.translate(0, 0, -1.8)\n\ttruckRubber.merge(Scoop)\n\tScoop = new THREE.BoxGeometry(0.75, 0.25, 0.2)\n\tScoop.translate(5.3, -0.5, 0.4)\n\tScoop.vertices[4].x += 0.2\n\tScoop.vertices[5].x += 0.2\n\tScoop.vertices[0].y -= 0.2\n\tScoop.vertices[1].y -= 0.2\n\ttruckRubber.merge(Scoop)\n\tScoop.translate(0, 0, -1.8)\n\ttruckRubber.merge(Scoop)\n\tScoop = new THREE.BoxGeometry(0.75, 0.75, 0.2)\n\tScoop.translate(4.75, 0.25, 0.4)\n\tScoop.vertices[2].x += 0.1\n\tScoop.vertices[3].x += 0.1\n\tScoop.vertices[4].x += 0.2\n\tScoop.vertices[5].x += 0.2\n\tScoop.vertices[0].x -= 0.23\n\tScoop.vertices[1].x -= 0.23\n\tScoop.vertices[0].y += 0.02\n\tScoop.vertices[1].y += 0.02\n\ttruckRubber.merge(Scoop)\n\tScoop.translate(0, 0, -1.8)\n\ttruckRubber.merge(Scoop)\n\tScoop = new THREE.BoxGeometry(0.5, 0.5, 0.2)\n\tScoop.translate(4.875, -0.375, 0.4)\n\tScoop.vertices[0].x += 0.1\n\tScoop.vertices[1].x += 0.1\n\tScoop.vertices[2].x += 0.3\n\tScoop.vertices[3].x += 0.3\n\tScoop.vertices[4].x -= 0.25\n\tScoop.vertices[5].x -= 0.25\n\tScoop.vertices[6].x += 0.05\n\tScoop.vertices[7].x += 0.05\n\tScoop.vertices[6].y += 0.05\n\tScoop.vertices[7].y += 0.05\n\ttruckRubber.merge(Scoop)\n\tScoop.translate(0, 0, -1.8)\n\ttruckRubber.merge(Scoop)\n\tconst shadowRubber = truckRubber.clone(true)\n\tshadowHoe.merge(shadowRubber)\n\n\tfor (var j = 0; j < truckRubber.faces.length; j++) {\n\t\ttruckRubber.faces[j].materialIndex = 2;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(truckRubber))\n\n\tconst truckHub = new THREE.Geometry()\n\tconst innerHub = new THREE.TorusGeometry(0.34, 0.1, 4, 50, 6.3)\n\tinnerHub.translate(-0.25, -0.213, 0.415)\n\ttruckHub.merge(innerHub)\n\tinnerHub.translate(0, 0, -1.825)\n\ttruckHub.merge(innerHub)\n\tinnerHub.translate(3.2, 0, 0)\n\ttruckHub.merge(innerHub)\n\tinnerHub.translate(0, 0, 1.825)\n\ttruckHub.merge(innerHub)\n\tconst flatHub = new THREE.CylinderGeometry(0.5, 0.5, 0.3, 32)\n\tflatHub.translate(-0.25, 0.2, 0.25)\n\tflatHub.rotateX(1.6)\n\ttruckHub.merge(flatHub)\n\tflatHub.translate(0, 0, -1.3)\n\ttruckHub.merge(flatHub)\n\tflatHub.translate(3.25, 0, 0)\n\ttruckHub.merge(flatHub)\n\tflatHub.translate(0, 0, 1.3)\n\ttruckHub.merge(flatHub)\n\tconst shadowHub = truckHub.clone(true)\n\tshadowHoe.merge(shadowHub)\n\n\tfor (var j = 0; j < truckHub.faces.length; j++) {\n\t\ttruckHub.faces[j].materialIndex = 2;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(truckHub))\n\t// Add To scene\n\n\tfor (var j = 0; j < shadowHoe.faces.length; j++) {\n\t\tshadowHoe.faces[j].materialIndex = 3;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(shadowHoe))\n\n\tlet combinedMesh = new THREE.Mesh(meshes, materials)\n\tcombinedMesh.castShadow = true\n\tcombinedMesh.position.set(2.5, 1.4, 2.8)\n\tscene.add(combinedMesh)\n}\n","function initTruck() {\n\tconst truck = new THREE.Group()\n\tconst shadowCopy = new THREE.Geometry()\n\t// Base\n\tconst core = new THREE.Geometry()\n\tconst nose = new THREE.BoxGeometry(1, 0.8, 1.3)\n\tnose.translate(-0.6, 0, 0)\n\tcore.merge(nose)\n\tconst cabin = new THREE.BoxGeometry(0.1, 0.8, 1.3)\n\tcabin.translate(0.52, 0.25, 0)\n\tcore.merge(cabin)\n\tconst cabinSide = new THREE.BoxGeometry(0.1, 0.7, 0.3)\n\tcabinSide.translate(0.52, 0.85, 0.5)\n\tcore.merge(cabinSide)\n\tcabinSide.translate(0, 0, -1)\n\tcore.merge(cabinSide)\n\tconst roof = new THREE.BoxGeometry(0.8, 0.1, 1.3)\n\troof.translate(0.17, 1.15, 0)\n\troof.vertices[6].x -= 0.05\n\troof.vertices[7].x -= 0.05\n\tcore.merge(roof)\n\tconst shieldRight = new THREE.BoxGeometry(0.1, 1, 0.1)\n\tshieldRight.translate(-0.6, 0.52, -0.6)\n\tshieldRight.rotateZ(-0.4)\n\tcore.merge(shieldRight)\n\tshieldRight.translate(0, 0, 1.2)\n\tcore.merge(shieldRight)\n\tconst windshield = new THREE.BoxGeometry(1, 0.8, 1.29)\n\t// X\n\twindshield.vertices[4].x += 0.26\n\twindshield.vertices[5].x += 0.26\n\twindshield.vertices[6].x -= 0.035\n\twindshield.vertices[7].x -= 0.035\n\t// Y\n\twindshield.vertices[0].y += 2.2\n\twindshield.vertices[1].y += 2.2\n\twindshield.vertices[2].y += 2.3\n\twindshield.vertices[3].y += 2.3\n\twindshield.vertices[4].y += 2.2\n\twindshield.vertices[5].y += 2.2\n\twindshield.vertices[6].y += 2.3\n\twindshield.vertices[7].y += 2.3\n\tconst shield = new THREE.Mesh(windshield, windowColor)\n\ttruck.add(shield)\n\tconst bed = new THREE.BoxGeometry(3.2, 0.3, 1.3)\n\tbed.translate(0.9, -0.31, 0)\n\tcore.merge(bed)\n\tconst bedSide = new THREE.BoxGeometry(2.68, 0.6, 0.1)\n\tbedSide.translate(1.15, 0.1, 0.6)\n\tcore.merge(bedSide)\n\tbedSide.translate(0, 0, -1.2)\n\tcore.merge(bedSide)\n\tconst bedBack = new THREE.BoxGeometry(0.1, 0.6, 1.3)\n\tbedBack.translate(2.45, 0.1, 0)\n\tcore.merge(bedBack)\n\tcore.translate(0, 1.5, 0)\n\tconst shadowCore = core.clone(true)\n\tshadowCopy.merge(shadowCore)\n\tconst base = new THREE.Mesh(core, offwhite)\n\tbase.castShadow = true\n\ttruck.add(base)\n\t// Inside\n\tconst seat = new THREE.Geometry()\n\tconst seatButt = new THREE.BoxGeometry(0.4, 0.1, 0.4)\n\tseatButt.translate(0.25, 1.6, 0.3)\n\tseat.merge(seatButt)\n\tseatButt.translate(0, 0, -0.6)\n\tseat.merge(seatButt)\n\tconst seatBack = new THREE.BoxGeometry(0.1, 0.7, 0.4)\n\tseatBack.translate(0.45, 1.8, 0.3)\n\tseat.merge(seatBack)\n\tseatBack.translate(0, 0, -0.6)\n\tseat.merge(seatBack)\n\tconst steering = new THREE.CylinderGeometry(0.2, 0.2, 0.05, 32)\n\tsteering.translate(-1.9, 0.65, 0.3)\n\tsteering.rotateZ(-1.2)\n\tseat.merge(steering)\n\tconst shadowSeat = seat.clone(true)\n\tshadowCopy.merge(shadowSeat)\n\tconst seatPiece = new THREE.Mesh(seat, gray)\n\ttruck.add(seatPiece)\n\t// Bumper\n\n\tconst bumperGeometry = new THREE.Geometry()\n\tconst frontBumper = new THREE.BoxGeometry(0.4, 0.1, 1.4)\n\tfrontBumper.translate(-0.95, 1.05, 0)\n\tfrontBumper.vertices[2].x += 0.01\n\tfrontBumper.vertices[3].x += 0.01\n\tbumperGeometry.merge(frontBumper)\n\tconst middleBumper = new THREE.BoxGeometry(1.1, 0.1, 1.4)\n\tmiddleBumper.translate(0.7, 1.05, 0)\n\tmiddleBumper.vertices[2].x += 0.01\n\tmiddleBumper.vertices[3].x += 0.01\n\tmiddleBumper.vertices[6].x -= 0.01\n\tmiddleBumper.vertices[7].x -= 0.01\n\tbumperGeometry.merge(middleBumper)\n\tconst backBumper = new THREE.BoxGeometry(0.4, 0.1, 1.4)\n\tbackBumper.translate(2.35, 1.05, 0)\n\tbackBumper.vertices[6].x -= 0.01\n\tbackBumper.vertices[7].x -= 0.01\n\tbumperGeometry.merge(backBumper)\n\tconst shadowBumper = bumperGeometry.clone(true)\n\tshadowCopy.merge(shadowBumper)\n\tconst bumper = new THREE.Mesh(bumperGeometry, palegray)\n\ttruck.add(bumper)\n\t// Wheels\n\tconst wheels = new THREE.Geometry()\n\tconst wheelGeometry = new THREE.CylinderGeometry(0.45, 0.45, 0.2, 32)\n\twheelGeometry.translate(-0.3, 0.55, -1.1)\n\twheelGeometry.rotateX(1.6)\n\twheels.merge(wheelGeometry)\n\twheelGeometry.translate(0, 0, -1.2)\n\twheels.merge(wheelGeometry)\n\twheelGeometry.translate(2, 0, 1.2)\n\twheels.merge(wheelGeometry)\n\twheelGeometry.translate(0, 0, -1.2)\n\twheels.merge(wheelGeometry)\n\tconst grill = new THREE.BoxGeometry(0.01, 0.7, 1.2)\n\tgrill.translate(-1.1, 1.5, 0)\n\twheels.merge(grill)\n\tconst license = new THREE.BoxGeometry(0.05, 0.2, 0.5)\n\tlicense.translate(2.5, 1.25, 0)\n\twheels.merge(license)\n\tconst shadowWheel = wheels.clone(true)\n\tshadowCopy.merge(shadowWheel)\n\tconst greys = new THREE.Mesh(wheels, gray)\n\tgreys.castShadow = true\n\ttruck.add(greys)\n\t// Hubcaps\n\tconst hubs = new THREE.Geometry()\n\tconst hubGeometry = new THREE.TorusGeometry(0.25, 0.1, 3, 199)\n\thubGeometry.translate(-0.3, 1.09, 0.63)\n\thubs.merge(hubGeometry)\n\thubGeometry.translate(0, 0, -1.3)\n\thubs.merge(hubGeometry)\n\thubGeometry.translate(2, 0, 1.3)\n\thubs.merge(hubGeometry)\n\thubGeometry.translate(0, 0, -1.3)\n\thubs.merge(hubGeometry)\n\tconst shadowHubs = hubs.clone(true)\n\tshadowCopy.merge(shadowHubs)\n\tconst hubcaps = new THREE.Mesh(hubs, offwhite)\n\ttruck.add(hubcaps)\n\t// Back\n\tconst brakeLights = new THREE.Geometry()\n\tconst leftLight = new THREE.BoxGeometry(0.1, 0.1, 0.1)\n\tleftLight.translate(2.5, 1.25, 0.45)\n\tbrakeLights.merge(leftLight)\n\tleftLight.translate(0, 0, -0.9)\n\tbrakeLights.merge(leftLight)\n\tconst shadowlights = brakeLights.clone(true)\n\tshadowCopy.merge(shadowlights)\n\tconst brakes = new THREE.Mesh(brakeLights, red)\n\ttruck.add(brakes)\n\n\t// Lights\n\tconst lightGeometry = new THREE.BoxGeometry(0.1, 0.05, 0.5)\n\tlightGeometry.translate(0.2, 2.72, 0)\n\tconst shadowlTopLights = lightGeometry.clone(true)\n\tshadowCopy.merge(shadowlTopLights)\n\tconst light = new THREE.Mesh(lightGeometry, orange)\n\tlight.castShadow = true\n\ttruck.add(light)\n\n\tconst baseShadow = new THREE.Mesh(shadowCopy, shadows)\n\ttruck.add(baseShadow)\n\n\ttruck.position.set(0, 0, 7)\n\ttruck.rotation.y += 0.5\n\ttruck.scale.set(0.9, 0.9, 0.9)\n\tscene.add(truck)\n}\n","function initWorkers()\t{\n\tconst worker = new THREE.Group()\n\tconst worker2 = new THREE.Group()\n\tconst worker3 = new THREE.Group()\n\tconst shadowPerson1 = new THREE.Geometry()\n\tconst shadowPerson2 = new THREE.Geometry()\n\tconst shadowPerson3 = new THREE.Geometry()\n\n\t// Person 1\n\tconst body = new THREE.Geometry()\n\t// Arms\n\tconst rightArm = new THREE.BoxGeometry(1, 0.4, 0.5)\n\trightArm.translate(0.85, 0.6, 0)\n\trightArm.vertices[0].y -= 0.75\n\trightArm.vertices[1].y -= 0.75\n\trightArm.vertices[2].y -= 0.5\n\trightArm.vertices[3].y -= 0.5\n\trightArm.vertices[0].x -= 0.5\n\trightArm.vertices[1].x -= 0.5\n\trightArm.vertices[2].x -= 0.5\n\trightArm.vertices[3].x -= 0.5\n\trightArm.vertices[0].z -= 0.15\n\trightArm.vertices[1].z += 0.15\n\trightArm.vertices[2].z -= 0.15\n\trightArm.vertices[3].z += 0.15\n\tbody.merge(rightArm)\n\tconst leftArm = new THREE.BoxGeometry(1, 0.4, 0.5)\n\tleftArm.translate(-0.85, 0.6, 0)\n\tleftArm.vertices[5].y += 0.3\n\tleftArm.vertices[4].y += 0.3\n\tleftArm.vertices[7].y += 0.55\n\tleftArm.vertices[6].y += 0.55\n\tleftArm.vertices[5].x += 0.8\n\tleftArm.vertices[4].x += 0.8\n\tleftArm.vertices[7].x += 0.8\n\tleftArm.vertices[6].x += 0.8\n\tleftArm.vertices[5].z += 0.9\n\tleftArm.vertices[4].z += 1.05\n\tleftArm.vertices[7].z += 0.9\n\tleftArm.vertices[6].z += 1.05\n\tbody.merge(leftArm)\n\t// Head\n\tconst head = new THREE.SphereGeometry(0.35, 32, 32)\n\thead.translate(0, 1.3, 0)\n\tbody.merge(head)\n\t// Mesh\n\tconst person = new THREE.Mesh(body, skinTone2)\n\tperson.castShadow = true\n\tperson.geometry.scale(0.5, 0.5, 0.5)\n\tconst shadowBody = body.clone(true)\n\tshadowPerson1.merge(shadowBody)\n\tworker.add(person)\n\t// Clothes\n\t// Shirt\n\tconst torso = new THREE.BoxGeometry(1, 1.4, 0.8)\n\ttorso.translate(0, 0.1, 0)\n\ttorso.vertices[0].z -= 0.15\n\ttorso.vertices[0].x -= 0.15\n\ttorso.vertices[1].z += 0.15\n\ttorso.vertices[1].x -= 0.15\n\ttorso.vertices[4].z += 0.15\n\ttorso.vertices[4].x += 0.15\n\ttorso.vertices[5].z -= 0.15\n\ttorso.vertices[5].x += 0.15\n\tconst shirt1 = new THREE.Mesh(torso, palegray)\n\tshirt1.castShadow = true\n\tshirt1.geometry.scale(0.5, 0.5, 0.5)\n\tconst shadowShirt = torso.clone(true)\n\tshadowPerson1.merge(shadowShirt)\n\tworker.add(shirt1)\n\t\t// Pants\n\tconst leftLeg = new THREE.BoxGeometry(0.5, 0.8, 0.8)\n\tleftLeg.translate(-0.25, -1, 0)\n\tleftLeg.vertices[0].x -= 0.1\n\tleftLeg.vertices[1].x -= 0.1\n\tleftLeg.vertices[2].x -= 0.3\n\tleftLeg.vertices[2].z -= 0.3\n\tleftLeg.vertices[3].x -= 0.3\n\tleftLeg.vertices[3].z += 0.3\n\tleftLeg.vertices[6].z += 0.3\n\tleftLeg.vertices[7].z -= 0.3\n\tconst rightLeg = new THREE.BoxGeometry(0.5, 0.8, 0.8)\n\trightLeg.translate(0.25, -1, 0)\n\trightLeg.vertices[4].x += 0.1\n\trightLeg.vertices[5].x += 0.1\n\trightLeg.vertices[2].z -= 0.3\n\trightLeg.vertices[3].z += 0.3\n\trightLeg.vertices[6].x += 0.3\n\trightLeg.vertices[6].z += 0.3\n\trightLeg.vertices[7].x += 0.3\n\trightLeg.vertices[7].z -= 0.3\n\tleftLeg.merge(rightLeg)\n\n\tconst pants1 = new THREE.Mesh(leftLeg, jean)\n\tpants1.castShadow = true\n\tpants1.geometry.scale(0.5, 0.5, 0.5)\n\tconst shadowPant = leftLeg.clone(true)\n\tshadowPerson1.merge(shadowPant)\n\tworker.add(pants1)\n\n\t// Person 2\n\tconst body2 = new THREE.Geometry()\n\tconst rightArm2 = rightArm.clone()\n\tbody2.merge(rightArm2)\n\tconst leftArm2 = new THREE.BoxGeometry(1, 0.4, 0.5)\n\tleftArm2.translate(-0.85, 0.6, 0)\n\tleftArm2.vertices[5].y -= 0.75\n\tleftArm2.vertices[4].y -= 0.75\n\tleftArm2.vertices[7].y -= 0.5\n\tleftArm2.vertices[6].y -= 0.5\n\tleftArm2.vertices[5].x += 0.5\n\tleftArm2.vertices[4].x += 0.5\n\tleftArm2.vertices[7].x += 0.5\n\tleftArm2.vertices[6].x += 0.5\n\tleftArm2.vertices[5].z -= 0.15\n\tleftArm2.vertices[4].z += 0.15\n\tleftArm2.vertices[7].z -= 0.15\n\tleftArm2.vertices[6].z += 0.15\n\tbody2.merge(leftArm2)\n\t// Head\n\tconst head2 = new THREE.SphereGeometry(0.35, 32, 32)\n\thead2.translate(0, 1.3, 0)\n\tbody2.merge(head2)\n\tconst person2 = new THREE.Mesh(body2, skinTone4)\n\tperson2.castShadow = true\n\tperson2.geometry.scale(0.5, 0.5, 0.5)\n\tworker2.add(person2)\n\t// Clothes\n\t// Shirt\n\tconst shirt2 = new THREE.Mesh(torso, palegray)\n\tshirt2.castShadow = true\n\tconst shadowShirt2 = torso.clone(true)\n\tshadowPerson2.merge(shadowShirt2)\n\tworker2.add(shirt2)\n\t// Pants\n\tconst pants2 = new THREE.Mesh(leftLeg, jean)\n\tpants2.castShadow = true\n\tconst shadowPant2 = leftLeg.clone(true)\n\tshadowPerson2.merge(shadowPant2)\n\tworker2.add(pants2)\n\n\t// Person 3\n\tconst body3 = new THREE.Geometry()\n\tconst rightArm3 = new THREE.BoxGeometry(1, 0.4, 0.5)\n\trightArm3.translate(0.85, 0.6, 0)\n\trightArm3.vertices[0].y -= 0.45\n\trightArm3.vertices[1].y -= 0.45\n\trightArm3.vertices[2].y -= 0.2\n\trightArm3.vertices[3].y -= 0.2\n\trightArm3.vertices[0].x -= 0.5\n\trightArm3.vertices[1].x -= 0.5\n\trightArm3.vertices[2].x -= 0.5\n\trightArm3.vertices[3].x -= 0.5\n\trightArm3.vertices[0].z += 0.45\n\trightArm3.vertices[1].z += 0.85\n\trightArm3.vertices[2].z += 0.45\n\trightArm3.vertices[3].z += 0.85\n\tbody3.merge(rightArm3)\n\tconst leftArm3 = new THREE.BoxGeometry(1, 0.4, 0.5)\n\tleftArm3.translate(-0.85, 0.6, 0)\n\tleftArm3.vertices[5].y -= 0.45\n\tleftArm3.vertices[4].y -= 0.45\n\tleftArm3.vertices[7].y -= 0.2\n\tleftArm3.vertices[6].y -= 0.2\n\tleftArm3.vertices[5].x += 0.5\n\tleftArm3.vertices[4].x += 0.5\n\tleftArm3.vertices[7].x += 0.5\n\tleftArm3.vertices[6].x += 0.5\n\tleftArm3.vertices[5].z += 0.45\n\tleftArm3.vertices[4].z += 0.85\n\tleftArm3.vertices[7].z += 0.45\n\tleftArm3.vertices[6].z += 0.85\n\tbody3.merge(leftArm3)\n\t// Head\n\tconst head3 = new THREE.SphereGeometry(0.35, 32, 32)\n\thead3.translate(0, 1.3, 0)\n\tbody3.merge(head3)\n\tconst person3 = new THREE.Mesh(body3, skinTone1)\n\tperson3.castShadow = true\n\tperson3.geometry.scale(0.5, 0.5, 0.5)\n\tworker3.add(person3)\n\t// Clothes\n\t// Shirt\n\tconst shirt3 = new THREE.Mesh(torso, palegray)\n\tshirt3.castShadow = true\n\tconst shadowShirt3 = torso.clone(true)\n\tshadowPerson3.merge(shadowShirt3)\n\tworker3.add(shirt3)\n\t// Pants\n\tconst pants3 = new THREE.Mesh(leftLeg, jean)\n\tpants3.castShadow = true\n\tconst shadowPant3 = leftLeg.clone(true)\n\tshadowPerson3.merge(shadowPant3)\n\tworker3.add(pants3)\n\n// Hat\n\tconst hat = new THREE.Geometry()\n\tconst dome = new THREE.SphereGeometry(0.2, 32, 32, 1, 6.3, 0, 1.5)\n\tdome.translate(0, 0.7, 0)\n\that.merge(dome)\n\tconst brim = new THREE.CylinderGeometry(0.2, 0.2, 0.02, 32)\n\tbrim.translate(0, 0.72, 0.1)\n\that.merge(brim)\n\tconst constHat = new THREE.Mesh(hat, truckMaterial)\n\tconstHat.castShadow = true\n\tconst hat2 = constHat.clone()\n\tconst hat3 = constHat.clone()\n// Vest\n\tconst vestGeometry = new THREE.Geometry()\n\tconst left = new THREE.BoxGeometry(0.2, 0.5, 0.4)\n\tleft.translate(-0.13, 0.17, 0)\n\tleft.vertices[0].z -= 0.05\n\tleft.vertices[1].z += 0.05\n\tleft.vertices[4].z += 0.05\n\tleft.vertices[4].x += 0.05\n\tleft.vertices[5].z -= 0.05\n\tleft.vertices[5].x += 0.05\n\tvestGeometry.merge(left)\n\tconst right = new THREE.BoxGeometry(0.2, 0.5, 0.4)\n\tright.translate(0.13, 0.17, 0)\n\tright.vertices[5].z -= 0.05\n\tright.vertices[4].z += 0.05\n\tright.vertices[1].z += 0.05\n\tright.vertices[1].x -= 0.05\n\tright.vertices[0].z -= 0.05\n\tright.vertices[0].x -= 0.05\n\tvestGeometry.merge(right)\n\tconst back = new THREE.BoxGeometry(0.2, 0.5, 0.025)\n\tback.translate(0, 0.17, -0.1875)\n\tback.vertices[0].z += 0.05\n\tback.vertices[1].z += 0.05\n\tback.vertices[4].z += 0.05\n\tback.vertices[5].z += 0.05\n\tvestGeometry.merge(back)\n\tlet vest = new THREE.Mesh(vestGeometry, truckMaterial)\n\tvest.castShadow = true\n\t// Stripes\n\tconst vestStripes = new THREE.Geometry()\n\tconst stripeFront = new THREE.BoxGeometry(0.05, 0.5, 0.001)\n\tstripeFront.translate(-0.11, 0.17, 0.201)\n\tstripeFront.vertices[0].z -= 0.05\n\tstripeFront.vertices[1].z -= 0.05\n\tstripeFront.vertices[4].z -= 0.05\n\tstripeFront.vertices[5].z -= 0.05\n\tvestStripes.merge(stripeFront)\n\tstripeFront.translate(0.22, 0, 0)\n\tvestStripes.merge(stripeFront)\n\tconst stripeBack = new THREE.BoxGeometry(0.05, 0.5, 0.001)\n\tstripeBack.translate(-0.11, 0.17, -0.201)\n\tstripeBack.vertices[0].z += 0.05\n\tstripeBack.vertices[1].z += 0.05\n\tstripeBack.vertices[4].z += 0.05\n\tstripeBack.vertices[5].z += 0.05\n\tvestStripes.merge(stripeBack)\n\tstripeBack.translate(0.22, 0, 0)\n\tvestStripes.merge(stripeBack)\n\tconst stripeTop = new THREE.BoxGeometry(0.05, 0.001, 0.3)\n\tstripeTop.translate(-0.11, 0.42, 0)\n\tvestStripes.merge(stripeTop)\n\tstripeTop.translate(0.22, 0, 0)\n\tvestStripes.merge(stripeTop)\n\tconst stripeBottom1 = new THREE.BoxGeometry(0.2, 0.2, 0.001)\n\tstripeBottom1.translate(-0.13, 0.02, 0.201)\n\tstripeBottom1.vertices[4].x += 0.02\n\tstripeBottom1.vertices[5].x += 0.02\n\tstripeBottom1.vertices[0].z -= 0.02\n\tstripeBottom1.vertices[1].z -= 0.02\n\tstripeBottom1.vertices[4].z -= 0.02\n\tstripeBottom1.vertices[5].z -= 0.02\n\tvestStripes.merge(stripeBottom1)\n\tconst stripeBottom2 = new THREE.BoxGeometry(0.2, 0.2, 0.001)\n\tstripeBottom2.translate(0.13, 0.02, 0.201)\n\tstripeBottom2.vertices[0].x -= 0.02\n\tstripeBottom2.vertices[1].x -= 0.02\n\tstripeBottom2.vertices[0].z -= 0.02\n\tstripeBottom2.vertices[1].z -= 0.02\n\tstripeBottom2.vertices[4].z -= 0.02\n\tstripeBottom2.vertices[5].z -= 0.02\n\tvestStripes.merge(stripeBottom2)\n\tconst stripeBottom3 = new THREE.BoxGeometry(0.001, 0.2, 0.4)\n\tstripeBottom3.translate(-0.23, 0.02, 0)\n\tstripeBottom3.vertices[0].x += 0.02\n\tstripeBottom3.vertices[1].x += 0.02\n\tstripeBottom3.vertices[4].x += 0.02\n\tstripeBottom3.vertices[5].x += 0.02\n\tstripeBottom3.vertices[0].z -= 0.02\n\tstripeBottom3.vertices[1].z += 0.02\n\tstripeBottom3.vertices[4].z += 0.02\n\tstripeBottom3.vertices[5].z -= 0.02\n\tvestStripes.merge(stripeBottom3)\n\tconst stripeBottom4 = new THREE.BoxGeometry(0.001, 0.2, 0.4)\n\tstripeBottom4.translate(0.23, 0.02, 0)\n\tstripeBottom4.vertices[0].x -= 0.02\n\tstripeBottom4.vertices[1].x -= 0.02\n\tstripeBottom4.vertices[4].x -= 0.02\n\tstripeBottom4.vertices[5].x -= 0.02\n\tstripeBottom4.vertices[0].z -= 0.02\n\tstripeBottom4.vertices[1].z += 0.02\n\tstripeBottom4.vertices[4].z += 0.02\n\tstripeBottom4.vertices[5].z -= 0.02\n\tvestStripes.merge(stripeBottom4)\n\tconst stripeBottom5 = new THREE.BoxGeometry(0.45, 0.2, 0.001)\n\tstripeBottom5.translate(0, 0.02, -0.201)\n\tstripeBottom5.vertices[0].x -= 0.02\n\tstripeBottom5.vertices[1].x -= 0.02\n\tstripeBottom5.vertices[4].x += 0.02\n\tstripeBottom5.vertices[5].x += 0.02\n\tstripeBottom5.vertices[0].z += 0.02\n\tstripeBottom5.vertices[1].z += 0.02\n\tstripeBottom5.vertices[4].z += 0.02\n\tstripeBottom5.vertices[5].z += 0.02\n\tvestStripes.merge(stripeBottom5)\n\tconst stripes = new THREE.Mesh(vestStripes, yellow)\n\tvest = new THREE.Mesh(vestGeometry, truckMaterial)\n\tvest.add(stripes)\n\tconst vest2 = vest.clone()\n\tconst vest3 = vest.clone()\n\n\t// Paper\n\tconst paper = new THREE.BoxGeometry(0.8, 0.6, 0.025)\n\tpaper.translate(0, 0.3, 0.25)\n\tpaper.rotateX(0.4)\n\tconst sheet = new THREE.Mesh(paper, white)\n\tsheet.castShadow = true\n\n\tworker.add(constHat)\n\tworker.add(vest)\n\tconst shadow1 = new THREE.Mesh(shadowPerson1, shadows)\n\tworker.add(shadow1)\n\n\tworker.position.set(2.7, 1.2, 6.5)\n\tworker.rotation.y -= 1\n\tscene.add(worker)\n\n\tworker2.add(hat2)\n\tworker2.add(vest2)\n\tconst shadow2 = new THREE.Mesh(shadowPerson2, shadows)\n\tworker2.add(shadow2)\n\tworker2.position.set(5.6, 1.2, 6.3)\n\tworker2.rotation.y += 0.8\n\tscene.add(worker2)\n\n\tworker3.add(hat3)\n\tworker3.add(vest3)\n\tworker3.add(sheet)\n\tconst shadow3 = new THREE.Mesh(shadowPerson3, shadows)\n\tworker3.add(shadow3)\n\tworker3.position.set(7, 1.2, 6.4)\n\tworker3.rotation.y -= 0.6\n\tscene.add(worker3)\n}\n","\nfunction render() {\n\tscene.position.set(0, 0, 3)\n\trenderer.render(scene, camera)\n}\n\nfunction animate() {\n\trequestAnimationFrame(animate)\n\trender()\n\tcontrols.update()\n}\n\ninit()\nanimate()\n","let showing = 'none'\n\nfunction slide(id) {\n\tswitch (showing) {\n\t\tcase id:\n\t\t\tdocument.getElementById(id).removeAttribute('style')\n\t\t\tdocument.getElementsByClassName(id)[0].removeAttribute('style')\n\t\t\tbreak\n\t\tcase 'group-1':\n\t\t\tdocument.getElementById('group-1').removeAttribute('style')\n\t\t\tdocument.getElementsByClassName('group-1')[0].removeAttribute('style')\n\t\t\tbreak\n\t\tcase 'group-2':\n\t\t\tdocument.getElementById('group-2').removeAttribute('style')\n\t\t\tdocument.getElementsByClassName('group-2')[0].removeAttribute('style')\n\t\t\tbreak\n\t\tcase 'group-3':\n\t\t\tdocument.getElementById('group-3').removeAttribute('style')\n\t\t\tdocument.getElementsByClassName('group-3')[0].removeAttribute('style')\n\t\t\tbreak\n\t\tcase 'group-4':\n\t\t\tdocument.getElementById('group-4').removeAttribute('style')\n\t\t\tdocument.getElementsByClassName('group-4')[0].removeAttribute('style')\n\t\t\tbreak\n\t\tcase 'group-5':\n\t\t\tdocument.getElementById('group-5').removeAttribute('style')\n\t\t\tdocument.getElementsByClassName('group-5')[0].removeAttribute('style')\n\t\t\tbreak\n\t\tcase 'group-6':\n\t\t\tdocument.getElementById('group-6').removeAttribute('style')\n\t\t\tdocument.getElementsByClassName('group-6')[0].removeAttribute('style')\n\t\t\tbreak\n\t\tdefault:\n\t\t\tbreak\n\t}\n\n\tif (showing === id) {\n\t\tshowing = 'none'\n\t} else {\n\t\tdocument.getElementsByClassName(id)[0].style.backgroundColor = '#666'\n\t\tdocument.getElementById(id).style.width = '300px'\n\t\tshowing = id\n\t}\n}\n","function onDocumentMouseMove(event) {\n\tevent.preventDefault()\n\tconst rect = renderer.domElement.getBoundingClientRect()\n\tmouse.x = (((event.clientX - rect.left) / rect.width) * 2) - 1\n\tmouse.y = -(((event.clientY - rect.top) / rect.height) * 2) + 1\n\traycaster.setFromCamera(mouse, camera)\n\tif (selected) {\n\t\tif (raycaster.intersectObjects(objects)) {\n\t\t\tselected.position.set(0, 1, 0)\n\t\t\tselected.position.set(raycaster.intersectObjects(objects)[0].point.x, selected.position.y, raycaster.intersectObjects(objects)[0].point.z-3)\n\t\t}\n\t}\n\traycaster.setFromCamera(mouse, camera)\n\tconst intersects = raycaster.intersectObjects(flaggers)\n\tif (intersects.length > 0) {\n\t\tconst object = intersects[0].object\n\t\tif (hovered !== object) {\n\t\t\trenderer.domElement.style.cursor = 'pointer'\n\t\t\thovered = object\n\t\t}\n\t} else if (hovered !== null) {\n\t\trenderer.domElement.style.cursor = 'auto'\n\t\thovered = null\n\t}\n}\n\nfunction onDocumentTouchMove(event) {\n\tevent.preventDefault()\n\tevent = event.changedTouches[0]\n\tconst rect = renderer.domElement.getBoundingClientRect()\n\tmouse.x = (((event.clientX - rect.left) / rect.width) * 2) - 1\n\tmouse.y = -(((event.clientY - rect.top) / rect.height) * 2) + 1\n\traycaster.setFromCamera(mouse, camera)\n\tif (selected) {\n\t\tif (raycaster.intersectObjects(objects)) {\n\t\t\tselected.position.set(0, 1, 0)\n\t\t\tselected.position.set(raycaster.intersectObjects(objects)[0].point.x, selected.position.y, raycaster.intersectObjects(objects)[0].point.z)\n\t\t}\n\t}\n}\n","function onDocumentMouseDown(event) {\n\tcontrols.enabled = false\n\tevent.preventDefault()\n\traycaster.setFromCamera(mouse, camera)\n\tconst intersects = raycaster.intersectObjects(flaggers)\n\tif (intersects.length > 0) {\n\t\tselected = intersects[0].object\n\t\tif (raycaster.intersectObjects(objects)) {\n\t\t\toffset.copy(intersection).sub(selected.position)\n\t\t}\n\t\trenderer.domElement.style.cursor = 'move'\n\t}\n}\n\nfunction onDocumentTouchStart(event) {\n\tcontrols.enabled = false\n\tevent.preventDefault()\n\tevent = event.changedTouches[0]\n\tconst rect = renderer.domElement.getBoundingClientRect()\n\tmouse.x = (((event.clientX - rect.left) / rect.width) * 2) - 1\n\tmouse.y = -(((event.clientY - rect.top) / rect.height) * 2) + 1\n\traycaster.setFromCamera(mouse, camera)\n\tconst intersects = raycaster.intersectObjects(flaggers)\n\tif (intersects.length > 0) {\n\t\tselected = intersects[0].object\n\t\tif (raycaster.intersectObjects(objects)) {\n\t\t\toffset.copy(intersection).sub(selected.position)\n\t\t}\n\t\trenderer.domElement.style.cursor = 'move'\n\t}\n}\n","function onDocumentMouseCancel(event) {\n\tcontrols.enabled = true\n\tevent.preventDefault()\n\tif (selected) {\n\t\tselected = null\n\t}\n\trenderer.domElement.style.cursor = 'auto'\n}\n\nfunction onDocumentTouchEnd(event) {\n\tcontrols.enabled = true\n\tevent.preventDefault()\n\tif (selected) {\n\t\tselected = null\n\t}\n\trenderer.domElement.style.cursor = 'auto'\n}\n","function flagger(color) {\n\tconst meshes = new THREE.Geometry()\n\tconst officeShadows = new THREE.Geometry()\n\tconst materials = [\n\t\tcolor,\t\t\t\t\t// 0\n\t\tgray,\t\t\t\t\t\t// 1\n\t\tjean,\t\t\t\t\t\t// 2\n\t\tskinTone1,\t\t\t// 3\n\t\tskinTone2,\t\t\t// 4\n\t\tskinTone3,\t\t\t// 5\n\t\tyellow,\t\t\t\t\t// 6\n\t\ttruckMaterial,\t// 7\n\t\tshadows\t\t\t\t\t// 8\n\t]\n\n\t// Torso\n\tconst torso = new THREE.BoxGeometry(1, 1.4, 0.8)\n\ttorso.translate(0, 0.1, 0)\n\ttorso.vertices[0].z -= 0.15\n\ttorso.vertices[0].x -= 0.15\n\ttorso.vertices[1].z += 0.15\n\ttorso.vertices[1].x -= 0.15\n\ttorso.vertices[4].z += 0.15\n\ttorso.vertices[4].x += 0.15\n\ttorso.vertices[5].z -= 0.15\n\ttorso.vertices[5].x += 0.15\n\ttorso.rotateY(-.5)\n\ttorso.translate(.45, 0, .7)\n\ttorso.scale(0.5, 0.5, 0.5)\n\n\tfor (var j = 0; j < torso.faces.length; j++) {\n\t\ttorso.faces[j].materialIndex = 0;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(torso))\n\n\tfor (var j = 0; j < torso.faces.length; j++) {\n\t\ttorso.faces[j].materialIndex = 8;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(torso))\n\n\n// Hat\n\tconst hat = new THREE.Geometry()\n\tconst dome = new THREE.SphereGeometry(0.2, 32, 32, 1, 6.3, 0, 1.5)\n\tdome.translate(0, 0.7, 0)\n\that.merge(dome)\n\tconst brim = new THREE.CylinderGeometry(0.2, 0.2, 0.02, 32)\n\tbrim.translate(0, 0.72, 0.1)\n\that.merge(brim)\n\that.rotateY(-.5)\n\that.translate(.225, 0, .345)\n\n\tfor (var j = 0; j < hat.faces.length; j++) {\n\t\that.faces[j].materialIndex = 0;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(hat))\n\n\tfor (var j = 0; j < hat.faces.length; j++) {\n\t\that.faces[j].materialIndex = 8;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(hat))\n// Vest\n\tconst vestGeometry = new THREE.Geometry()\n\tconst left = new THREE.BoxGeometry(0.2, 0.5, 0.4)\n\tleft.translate(-0.13, 0.17, 0)\n\tleft.vertices[0].z -= 0.05\n\tleft.vertices[1].z += 0.05\n\tleft.vertices[4].z += 0.05\n\tleft.vertices[4].x += 0.05\n\tleft.vertices[5].z -= 0.05\n\tleft.vertices[5].x += 0.05\n\tvestGeometry.merge(left)\n\tconst right = new THREE.BoxGeometry(0.2, 0.5, 0.4)\n\tright.translate(0.13, 0.17, 0)\n\tright.vertices[5].z -= 0.05\n\tright.vertices[4].z += 0.05\n\tright.vertices[1].z += 0.05\n\tright.vertices[1].x -= 0.05\n\tright.vertices[0].z -= 0.05\n\tright.vertices[0].x -= 0.05\n\tvestGeometry.merge(right)\n\tconst back = new THREE.BoxGeometry(0.2, 0.5, 0.025)\n\tback.translate(0, 0.17, -0.1875)\n\tback.vertices[0].z += 0.05\n\tback.vertices[1].z += 0.05\n\tback.vertices[4].z += 0.05\n\tback.vertices[5].z += 0.05\n\tvestGeometry.merge(back)\n\tvestGeometry.rotateY(-.5)\n\tvestGeometry.translate(.225, 0, .345)\n\n\tfor (var j = 0; j < vestGeometry.faces.length; j++) {\n\t\tvestGeometry.faces[j].materialIndex = 7;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(vestGeometry))\n\n\tfor (var j = 0; j < vestGeometry.faces.length; j++) {\n\t\tvestGeometry.faces[j].materialIndex = 8;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(vestGeometry))\n\t// Stripes\n\tconst vestStripes = new THREE.Geometry()\n\tlet stripe = new THREE.BoxGeometry(0.05, 0.5, 0.001)\n\tstripe.translate(-0.11, 0.17, 0.201)\n\tstripe.vertices[0].z -= 0.05\n\tstripe.vertices[1].z -= 0.05\n\tstripe.vertices[4].z -= 0.05\n\tstripe.vertices[5].z -= 0.05\n\tvestStripes.merge(stripe)\n\tstripe.translate(0.22, 0, 0)\n\tvestStripes.merge(stripe)\n\tstripe = new THREE.BoxGeometry(0.05, 0.5, 0.001)\n\tstripe.translate(-0.11, 0.17, -0.201)\n\tstripe.vertices[0].z += 0.05\n\tstripe.vertices[1].z += 0.05\n\tstripe.vertices[4].z += 0.05\n\tstripe.vertices[5].z += 0.05\n\tvestStripes.merge(stripe)\n\tstripe.translate(0.22, 0, 0)\n\tvestStripes.merge(stripe)\n\tstripe = new THREE.BoxGeometry(0.05, 0.001, 0.3)\n\tstripe.translate(-0.11, 0.42, 0)\n\tvestStripes.merge(stripe)\n\tstripe.translate(0.22, 0, 0)\n\tvestStripes.merge(stripe)\n\tstripe = new THREE.BoxGeometry(0.2, 0.2, 0.001)\n\tstripe.translate(-0.13, 0.02, 0.201)\n\tstripe.vertices[4].x += 0.02\n\tstripe.vertices[5].x += 0.02\n\tstripe.vertices[0].z -= 0.02\n\tstripe.vertices[1].z -= 0.02\n\tstripe.vertices[4].z -= 0.02\n\tstripe.vertices[5].z -= 0.02\n\tvestStripes.merge(stripe)\n\tstripe = new THREE.BoxGeometry(0.2, 0.2, 0.001)\n\tstripe.translate(0.13, 0.02, 0.201)\n\tstripe.vertices[0].x -= 0.02\n\tstripe.vertices[1].x -= 0.02\n\tstripe.vertices[0].z -= 0.02\n\tstripe.vertices[1].z -= 0.02\n\tstripe.vertices[4].z -= 0.02\n\tstripe.vertices[5].z -= 0.02\n\tvestStripes.merge(stripe)\n\tstripe = new THREE.BoxGeometry(0.001, 0.2, 0.4)\n\tstripe.translate(-0.23, 0.02, 0)\n\tstripe.vertices[0].x += 0.02\n\tstripe.vertices[1].x += 0.02\n\tstripe.vertices[4].x += 0.02\n\tstripe.vertices[5].x += 0.02\n\tstripe.vertices[0].z -= 0.02\n\tstripe.vertices[1].z += 0.02\n\tstripe.vertices[4].z += 0.02\n\tstripe.vertices[5].z -= 0.02\n\tvestStripes.merge(stripe)\n\tstripe = new THREE.BoxGeometry(0.001, 0.2, 0.4)\n\tstripe.translate(0.23, 0.02, 0)\n\tstripe.vertices[0].x -= 0.02\n\tstripe.vertices[1].x -= 0.02\n\tstripe.vertices[4].x -= 0.02\n\tstripe.vertices[5].x -= 0.02\n\tstripe.vertices[0].z -= 0.02\n\tstripe.vertices[1].z += 0.02\n\tstripe.vertices[4].z += 0.02\n\tstripe.vertices[5].z -= 0.02\n\tvestStripes.merge(stripe)\n\tstripe = new THREE.BoxGeometry(0.45, 0.2, 0.001)\n\tstripe.translate(0, 0.02, -0.201)\n\tstripe.vertices[0].x -= 0.02\n\tstripe.vertices[1].x -= 0.02\n\tstripe.vertices[4].x += 0.02\n\tstripe.vertices[5].x += 0.02\n\tstripe.vertices[0].z += 0.02\n\tstripe.vertices[1].z += 0.02\n\tstripe.vertices[4].z += 0.02\n\tstripe.vertices[5].z += 0.02\n\tvestStripes.merge(stripe)\n\tvestStripes.rotateY(-.5)\n\tvestStripes.translate(.225, 0, .345)\n\n\tfor (var j = 0; j < vestStripes.faces.length; j++) {\n\t\tvestStripes.faces[j].materialIndex = 6;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(vestStripes))\n\n\tfor (var j = 0; j < vestStripes.faces.length; j++) {\n\t\tvestStripes.faces[j].materialIndex = 8;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(vestStripes))\n\n\n\tconst pants = new THREE.Geometry()\n\t// Legs\n\tlet leftLeg = new THREE.BoxGeometry(0.5, 0.8, 0.8)\n\tleftLeg.translate(-0.25, -1, 0)\n\tleftLeg.vertices[0].x -= 0.1\n\tleftLeg.vertices[1].x -= 0.1\n\tleftLeg.vertices[2].x -= 0.3\n\tleftLeg.vertices[2].z -= 0.3\n\tleftLeg.vertices[3].x -= 0.3\n\tleftLeg.vertices[3].z += 0.3\n\tleftLeg.vertices[6].z += 0.3\n\tleftLeg.vertices[7].z -= 0.3\n\tpants.merge(leftLeg)\n\tconst rightLeg = new THREE.BoxGeometry(0.5, 0.8, 0.8)\n\trightLeg.translate(0.25, -1, 0)\n\trightLeg.vertices[4].x += 0.1\n\trightLeg.vertices[5].x += 0.1\n\trightLeg.vertices[2].z -= 0.3\n\trightLeg.vertices[3].z += 0.3\n\trightLeg.vertices[6].x += 0.3\n\trightLeg.vertices[6].z += 0.3\n\trightLeg.vertices[7].x += 0.3\n\trightLeg.vertices[7].z -= 0.3\n\tpants.merge(rightLeg)\n\tpants.rotateY(-.5)\n\tpants.translate(.45, 0, .7)\n\tpants.scale(0.5, 0.5, 0.5)\n\n\tfor (var j = 0; j < pants.faces.length; j++) {\n\t\tpants.faces[j].materialIndex = 2;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(pants))\n\n\tfor (var j = 0; j < pants.faces.length; j++) {\n\t\tpants.faces[j].materialIndex = 8;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(pants))\n\n\tconst body = new THREE.Geometry()\n\t// Arms\n\tconst rightArm1 = new THREE.BoxGeometry(0.5, 0.4, 0.5)\n\trightArm1.translate(0.64, 0.6, 0)\n\trightArm1.vertices[0].y -= 0.1\n\trightArm1.vertices[0].z += 0.1\n\trightArm1.vertices[0].x -= 0.2\n\trightArm1.vertices[1].y -= 0.08\n\trightArm1.vertices[1].z += 0.3\n\trightArm1.vertices[1].x -= 0.1\n\trightArm1.vertices[2].z += 0.1\n\trightArm1.vertices[2].x -= 0.05\n\trightArm1.vertices[2].y += 0.1\n\trightArm1.vertices[3].y += 0.2\n\trightArm1.vertices[3].z += 0.4\n\trightArm1.vertices[3].x += 0.2\n\trightArm1.vertices[4].x -= 0.04\n\trightArm1.vertices[5].x -= 0.04\n\tbody.merge(rightArm1)\n\tconst rightArm2 = new THREE.BoxGeometry(0.5, 0.3, 0.3)\n\trightArm2.translate(1.14, 0.6, 0.3)\n\trightArm2.vertices[0].y += 0.25\n\trightArm2.vertices[0].z -= 0.1\n\trightArm2.vertices[0].x -= 0.65\n\trightArm2.vertices[1].y += 0.25\n\trightArm2.vertices[1].z += 0.05\n\trightArm2.vertices[1].x -= 0.5\n\trightArm2.vertices[2].y += 0.55\n\trightArm2.vertices[2].z -= 0.05\n\trightArm2.vertices[2].x -= 0.55\n\trightArm2.vertices[3].y += 0.55\n\trightArm2.vertices[3].z += 0.1\n\trightArm2.vertices[3].x -= 0.4\n\trightArm2.vertices[4].x -= 0.1\n\trightArm2.vertices[4].z -= 0.1\n\trightArm2.vertices[4].y -= 0.03\n\trightArm2.vertices[5].y -= 0.05\n\trightArm2.vertices[5].z -= 0.1\n\trightArm2.vertices[5].x -= 0.2\n\trightArm2.vertices[6].x += 0.2\n\trightArm2.vertices[6].y += 0.15\n\trightArm2.vertices[6].z += 0.0\n\trightArm2.vertices[7].x -= 0.05\n\trightArm2.vertices[7].z -= 0.1\n\trightArm2.vertices[7].y += 0.05\n\tbody.merge(rightArm2)\n\tconst leftArm = new THREE.BoxGeometry(1, 0.4, 0.5)\n\tleftArm.translate(-0.85, 0.6, 0)\n\tleftArm.vertices[5].y -= 0.8\n\tleftArm.vertices[5].z -= 0.1\n\tleftArm.vertices[4].y -= 0.8\n\tleftArm.vertices[4].z += 0.1\n\tleftArm.vertices[7].y -= 0.5\n\tleftArm.vertices[7].z -= 0.1\n\tleftArm.vertices[6].y -= 0.5\n\tleftArm.vertices[6].z += 0.1\n\tleftArm.vertices[3].x -= 0.04\n\tleftArm.vertices[2].x -= 0.04\n\tbody.merge(leftArm)\n\n\t// Head\n\tconst head = new THREE.SphereGeometry(0.35, 32, 32)\n\thead.translate(0, 1.3, 0)\n\tbody.merge(head)\n\tbody.rotateY(-.5)\n\tbody.translate(.45, 0, .7)\n\tbody.scale(0.5, 0.5, 0.5)\n\t\tlet min = Math.ceil(3)\n  \tlet max = Math.floor(5)\n\t\tlet skinTone = Math.floor(Math.random() * (max - min)) + min\n\n\tfor (var j = 0; j < body.faces.length; j++) {\n\t\tbody.faces[j].materialIndex = skinTone\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(body))\n\n\tfor (var j = 0; j < body.faces.length; j++) {\n\t\tbody.faces[j].materialIndex = 8;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(body))\n\n\t// Flag\n\tconst object = new THREE.CylinderGeometry(.4, .4, .1, 8)\n\tobject.translate(.75, .25, -.55)\n\tobject.rotateZ(1.25)\n\tobject.rotateY(.75)\n\tobject.rotateX(.5)\n\n\tfor (var j = 0; j < object.faces.length; j++) {\n\t\tobject.faces[j].materialIndex = 0;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(object))\n\n\tfor (var j = 0; j < object.faces.length; j++) {\n\t\tobject.faces[j].materialIndex = 8;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(object))\n\n\tconst stick = new THREE.CylinderGeometry(0.05, 0.05, 2.4, 32)\n\tstick.translate(-0.7, 0.05, 0.02)\n\tstick.scale(0.5, 0.5, 0.5)\n\n\tfor (var j = 0; j < stick.faces.length; j++) {\n\t\tstick.faces[j].materialIndex = 1;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(stick))\n\n\tfor (var j = 0; j < stick.faces.length; j++) {\n\t\tstick.faces[j].materialIndex = 8;\n\t}\n\tmeshes.mergeMesh(new THREE.Mesh(stick))\n\n\n\n\tlet combinedMesh = new THREE.Mesh(meshes, materials)\n\tcombinedMesh.castShadow = true\n\tcombinedMesh.position.set(-1, 1.2, -1)\n\tscene.add(combinedMesh)\n\tflaggers.push(combinedMesh)\n\n\tconst person2 = combinedMesh.clone(true)\n\tperson2.position.set(1, 1.2, -1)\n\tscene.add(person2)\n\tflaggers.push(person2)\n\n\t// Hammer.js\n/*\n\tvar movable = new Hammer(person2)\n\tmovable.add( new Hammer.Pan({ direction: Hammer.DIRECTION_ALL, threshold: 0 }) )\n\tmovable.on(\"pan\", handleDrag)\n\tvar lastPosX = 0\n\tvar lastPosY = 0\n\tvar isDragging = false\n\n\tconst rect = renderer.domElement.getBoundingClientRect()\n\tmouse.x = (((event.clientX - rect.left) / rect.width) * 2) - 1\n\tmouse.y = -(((event.clientY - rect.top) / rect.height) * 2) + 1\n\traycaster.setFromCamera(mouse, camera)\n\n\tfunction handleDrag(event) {\n\t\tcontrols.enabled = false\n\t\tconsole.log('dragging')\n\t\tvar elem = event.target\n\t\tif ( ! isDragging ) {\n\t    isDragging = true\n\t    lastPosX = elem.offsetLeft\n\t    lastPosY = elem.offsetTop\n\t  }\n\t\t/*\n\t\tvar posX = ev.deltaX + lastPosX\n\t  var posY = ev.deltaY + lastPosY\n\n\t  elem.style.left = posX + \"px\"\n\t  elem.style.top = posY + \"px\"\n\n\n\t\tif (selected) {\n\t\t\tif (raycaster.intersectObjects(objects)) {\n\t\t\t\tselected.position.set(0, 1, 0)\n\t\t\t\tselected.position.set(raycaster.intersectObjects(objects)[0].point.x, selected.position.y, raycaster.intersectObjects(objects)[0].point.z)\n\t\t\t}\n\t\t}\n\t  if (event.isFinal) {\n\t    isDragging = false\n\t  }\n\n\t} */\n}\n","const signs = [[], [], [], [], [], [], []]\n\nfunction signArray(group, checkbox) {\n\tconst idx = signs[group].indexOf(checkbox.value)\n\n\tif (idx !== -1) {\t\t\t\t \t\t\t\t\t\t\t\t// If already in array\n\t\tsigns[group].splice(idx, 1) \t\t\t\t\t// Make sure we remove it\n\t}\n\n\tif (checkbox.checked) {\t\t\t\t\t\t\t\t\t// If checked\n\t\tsigns[group].unshift(checkbox.value)\t// Add to end of array\n\t}\n}\n\nfunction signSpace(color, group, start) {\n\tconst signGrouped = new THREE.Group()\n\tconst spacing = Number(document.getElementById('sign-' + group).value) / 200\n\n\t// Get Signs\n\n\tconst signImages = signs[group]\n\tlet sign1\n\tlet pos = start - spacing\n\tfor (let i = 0; i < signImages.length && pos >= -22; i++) {\n\t\t// Image\n\n\t\tconst signBase = new THREE.CylinderGeometry(0.8, 0.8, 0.1, 4)\n\t\tsignBase.rotateX(1.5)\n\t\tsignBase.rotateZ(1.6)\n\n\t\tswitch (signImages[i]) {\n\t\t\tcase 'worker':\n\t\t\t\tsign1 = new THREE.Mesh(signBase, [safetyOrange, workerSignMaterial, safetyOrange])\n\t\t\t\tbreak\n\t\t\tcase 'flagger':\n\t\t\t\tsign1 = new THREE.Mesh(signBase, [safetyOrange, flaggerSignMaterial, safetyOrange])\n\t\t\t\tbreak\n\t\t\tcase 'fAhead':\n\t\t\t\tsign1 = new THREE.Mesh(signBase, [safetyOrange, flagAheadSignMaterial, safetyOrange])\n\t\t\t\tbreak\n\t\t\tcase 'men':\n\t\t\t\tsign1 = new THREE.Mesh(signBase, [safetyOrange, menWorkSignMaterial, safetyOrange])\n\t\t\t\tbreak\n\t\t\tcase 'stop':\n\t\t\t\tsign1 = new THREE.Mesh(signBase, [safetyOrange, prepareStopSignMaterial, safetyOrange])\n\t\t\t\tbreak\n\t\t\tcase 'lane':\n\t\t\t\tsign1 = new THREE.Mesh(signBase, [safetyOrange, oneLaneSignMaterial, safetyOrange])\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tsign1 = new THREE.Mesh(signBase, [safetyOrange, workAheadSignMaterial, safetyOrange])\n\t\t\t\tbreak\n\t\t}\n\n\t\tsign1.position.set(pos, 3, (4 + (group * 0.5)))\n\t\tsignGrouped.add(sign1)\n\n\t\t// Group Color Backing\n\n\t\tconst signColor = new THREE.CylinderGeometry(1, 1, 0.1, 4)\n\t\tsignColor.rotateX(1.5)\n\t\tsignColor.rotateZ(1.6)\n\t\tconst signColorBack = new THREE.Mesh(signColor, color)\n\t\tsignColorBack.position.set((pos + 0.01), 3, (4 + (group * 0.5)))\n\t\tsignGrouped.add(signColorBack)\n\n\t\t// Stick\n\n\t\tconst stick = new THREE.CylinderGeometry(0.05, 0.05, 2, 32)\n\t\tconst signStick = new THREE.Mesh(stick, color)\n\t\tsignStick.position.set((pos + 0.01), 1.2, (4 + (group * 0.5)))\n\t\tsignGrouped.add(signStick)\n\t\tconsole.log((4 + (group / 0.5)))\n\t\t// Position and Add to Scene\n\t\tpos -= 2\n\t}\n\n\tsignGrouped.name = 'signGroup-' + group\n\tscene.add(signGrouped)\n}\n","function test(group, color) {\n\t// Remove old render if it exists\n\tif (scene.getObjectByName(group)) {\n\t\tscene.remove(scene.getObjectByName(group))\n\t}\n\n\tif (scene.getObjectByName('signGroup-' + group)) {\n\t\tscene.remove(scene.getObjectByName('signGroup-' + group))\n\t}\n\tconst coneCore = new THREE.Mesh(coneGeometry, color)\n\tconst shadowCone = new THREE.Mesh(coneGeometry, shadows)\n\tshadowCone.scale.set(1.05, 1.05, 1.05)\n\tconeCore.castShadow = true\n\tconst cone = new THREE.Group()\n\tconst newStripe = stripe.clone()\n\tcone.add(coneCore)\n\tcone.add(newStripe)\n\tlet initialX\n\tconst coneGroup = new THREE.Group()\n\tconst shadowGroup = new THREE.Group()\n\n/* Buffer */\n\n\tswitch (group) {\n\t\tcase 1:\n\t\t\tinitialX = 0\n\t\t\tbreak\n\t\tcase 2:\n\t\t\tinitialX = -0.5\n\t\t\tbreak\n\t\tcase 3:\n\t\t\tinitialX = -1.5\n\t\t\tbreak\n\t\tcase 4:\n\t\t\tinitialX = -2\n\t\t\tbreak\n\t\tcase 5:\n\t\t\tinitialX = -2.5\n\t\t\tbreak\n\t\tcase 6:\n\t\t\tinitialX = -3\n\t\t\tbreak\n\t\tdefault:\n\t\t\tbreak\n\t}\n\tconst buffer = Number(document.getElementById('buffer-' + group).value)\n\tcone.position.set(initialX, 0.75, 0.5)\n\tconeGroup.add(cone)\n\tshadowCone.position.set(initialX, 0.75, 0.5)\n\tshadowGroup.add(shadowCone)\n\tlet x = initialX\n\tlet cones = 1 + (buffer / 100)\n\tlet spacing = (buffer / 50) / cones\n\n\twhile (Math.abs(x - spacing) <= (Math.abs((buffer / 50)) - initialX) && Math.abs(x) <= 23) {\n\t\tconst newCone = cone.clone()\n\t\tconst newShadowCone = shadowCone.clone()\n\t\tnewShadowCone.position.set(x, 0.75, 0.5)\n\t\tshadowGroup.add(newShadowCone)\n\t\tx -= spacing\n\t\tnewCone.position.set(x, 0.75, 0.5)\n\t\tconeGroup.add(newCone)\n\t}\n\n/* Transition Taper */\n\n\tconst upstream = Number(document.getElementById('upstream-' + group).value)\n\tcones = 2 + (upstream / 100)\n\tspacing = (upstream / 50) / cones\n\tlet y = (3 / cones) + 0.5\n\tfor (let i = 1; i <= cones; i++) {\n\t\tconst newCone = cone.clone()\n\t\tx -= spacing\n\t\tnewCone.position.set(x, 0.75, y)\n\t\tconst newShadowCone = shadowCone.clone()\n\t\tnewShadowCone.position.set(x, 0.75, y)\n\t\tshadowGroup.add(newShadowCone)\n\t\ty += 3 / cones\n\t\tconeGroup.add(newCone)\n\t}\n\n/* Sign Spacing */\n\tsignSpace(color, group, x)\n\n/* Downstream Taper */\n\n\tswitch (group) {\n\t\tcase 1:\n\t\t\tinitialX = 10\n\t\t\tbreak\n\t\tcase 2:\n\t\t\tinitialX = 10.5\n\t\t\tbreak\n\t\tcase 3:\n\t\t\tinitialX = 11\n\t\t\tbreak\n\t\tcase 4:\n\t\t\tinitialX = 11.5\n\t\t\tbreak\n\t\tcase 5:\n\t\t\tinitialX = 12\n\t\t\tbreak\n\t\tcase 6:\n\t\t\tinitialX = 12.5\n\t\t\tbreak\n\t\tdefault:\n\t\t\tbreak\n\t}\n\tconst downstream = Number(document.getElementById('downstream-' + group).value)\n\tx = initialX\n\tcones = 2 + (downstream / 100)\n\tspacing = (downstream / 50) / cones\n\ty = 0.5\n\twhile (Math.abs(x) <= ((downstream / 50) + initialX) && Math.abs(x) <= 21.5) {\n\t\tconst newCone = cone.clone()\n\t\tnewCone.position.set(x, 0.75, y)\n\t\tconst newShadowCone = shadowCone.clone()\n\t\tnewShadowCone.position.set(x, 0.75, y)\n\t\tshadowGroup.add(newShadowCone)\n\t\ty += 3 / cones\n\t\tx += spacing\n\t\tconeGroup.add(newCone)\n\t}\n\n/* Give Group A Name and Add To Scene */\n\tconeGroup.name = group\n\tshadowGroup.name = group\n\tscene.add(coneGroup)\n\tscene.add(shadowGroup)\n\n/* Close Sidebar */\n\tslide('group-' + group)\n\tflagger(color)\n}\n","\n\n/* Variables */\nlet scene\nlet camera\nlet controls\nlet renderer\nlet ambient\nlet sun\nconst objects = []\nconst flaggers = []\n\nconst raycaster = new THREE.Raycaster()\nconst mouse = new THREE.Vector2()\nconst offset = new THREE.Vector3()\nconst intersection = new THREE.Vector3()\nlet selected = null\nlet hovered = null\n// Scenery\nconst road = new THREE.MeshLambertMaterial({color: 0x87836E})\nconst lines = new THREE.LineBasicMaterial({color: 0xFFFFFF})\nconst divider = new THREE.MeshLambertMaterial({color: 0xFFFF86})\nconst grass = new THREE.MeshLambertMaterial({color: 0x77C997})\nconst treeTall = new THREE.MeshLambertMaterial({color: 0x62C192})\nconst shadows = new THREE.ShadowMaterial({opacity: 0.3})\nconst windowColor = new THREE.MeshLambertMaterial({color: 0xD0DDE3, transparent: true, opacity: 0.5})\nconst brick = new THREE.MeshLambertMaterial({color: 0xAA5050})\nconst stone = new THREE.MeshLambertMaterial({color: 0xE5D2A9})\nconst truckMaterial = new THREE.MeshLambertMaterial({color: 0xEF8547})\nconst foundation = new THREE.MeshLambertMaterial({color: 0xF4EEEF})\nconst couchFabric = new THREE.MeshLambertMaterial({color: 0x638464})\nconst blueFabric = new THREE.MeshLambertMaterial({color: 0x5E7E9B})\nconst purpleFabric = new THREE.MeshLambertMaterial({color: 0x805C8E})\nconst tanFabric = new THREE.MeshLambertMaterial({color: 0xE8C1A0})\n// Skin\nconst skinTone1 = new THREE.MeshLambertMaterial({color: 0x8D5524}) // Brown\nconst skinTone2 = new THREE.MeshLambertMaterial({color: 0xC68642}) // Light Brown\nconst skinTone3 = new THREE.MeshLambertMaterial({color: 0xF1C27D}) // Tan\nconst skinTone4 = new THREE.MeshLambertMaterial({color: 0xFFDBAC}) // Pale\n\n// Colors\nconst red = new THREE.MeshLambertMaterial({color: 0xF87676})\nconst green = new THREE.MeshLambertMaterial({color: 0x78C789})\nconst blue = new THREE.MeshLambertMaterial({color: 0x22B8E2})\nconst orange = new THREE.MeshLambertMaterial({color: 0xF6B331})\nconst safetyOrange = new THREE.MeshLambertMaterial({color: 0xFF7900})\nconst yellow = new THREE.MeshLambertMaterial({color: 0xFDDB4C})\nconst purple = new THREE.MeshLambertMaterial({color: 0xB78DD1})\nconst white = new THREE.MeshLambertMaterial({color: 0xFFFFFF})\nconst offwhite = new THREE.MeshLambertMaterial({color: 0xF2F2F2})\nconst gray = new THREE.MeshLambertMaterial({color: 0x555555})\nconst palegray = new THREE.MeshLambertMaterial({color: 0xA5A5A5})\nconst jean = new THREE.MeshLambertMaterial({color: 0x416BAD})\n// Signs\nconst workerSign = new THREE.TextureLoader().load('images/sign-01.png')\nconst workerSignMaterial = new THREE.MeshBasicMaterial({map: workerSign})\nconst flaggerSign = new THREE.TextureLoader().load('images/sign-02.png')\nconst flaggerSignMaterial = new THREE.MeshBasicMaterial({map: flaggerSign})\nconst flagAheadSign = new THREE.TextureLoader().load('images/sign-03.png')\nconst flagAheadSignMaterial = new THREE.MeshBasicMaterial({map: flagAheadSign})\nconst menWorkSign = new THREE.TextureLoader().load('images/sign-04.png')\nconst menWorkSignMaterial = new THREE.MeshBasicMaterial({map: menWorkSign})\nconst prepareStopSign = new THREE.TextureLoader().load('images/sign-05.png')\nconst prepareStopSignMaterial = new THREE.MeshBasicMaterial({map: prepareStopSign})\nconst oneLaneSign = new THREE.TextureLoader().load('images/sign-06.png')\nconst oneLaneSignMaterial = new THREE.MeshBasicMaterial({map: oneLaneSign})\nconst workAheadSign = new THREE.TextureLoader().load('images/sign-07.png')\nconst workAheadSignMaterial = new THREE.MeshBasicMaterial({map: workAheadSign})\n// Geometry\nconst tallTree = new THREE.Geometry()\nconst tallCone = new THREE.ConeGeometry(1.68, 4, 32)\ntallCone.translate(0, 1.35, 0)\ntallTree.merge(tallCone)\nconst tallSphere = new THREE.SphereGeometry(1.8, 60, 60)\ntallSphere.translate(0, -1.3, 0)\ntallTree.merge(tallSphere)\nconst shortTree = tallTree.clone()\nshortTree.scale(0.5, 0.5, 0.5)\n/* Cone */\nconst coreGeometry = new THREE.CylinderGeometry(0.07, 0.2, 0.5, 32, 0.8, false, 0.8)\nconst coneBottomG = new THREE.BoxGeometry(0.5, 0.06, 0.5)\nconeBottomG.translate(0, -0.23, 0)\nconst coneGeometry = new THREE.Geometry()\nconeGeometry.merge(coreGeometry)\nconeGeometry.merge(coneBottomG)\nconst stripeGeometry = new THREE.CylinderGeometry(0.116, 0.155, 0.15, 32, 1, false, 0.8)\nconst stripe = new THREE.Mesh(stripeGeometry, white)\n"]}